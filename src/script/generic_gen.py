I = "Integer"
N = "Number"
F = "Float"
A = "Any"
V = "Vector"
T = "Tuple"

GENERICS = [
    ("add", "+", 
         [((I,I),"add_i_i"), ((F,F),"add_f_f"),
          ((N, N), "add_n_n")]),
    ("sub", "-",
         [((I,I),"sub_i_i"), ((F,F),"sub_f_f"),
          ((N, N), "sub_n_n")]),
    ("mul", "*",
         [((I,I),"mult_i_i"), ((F,F),"mult_f_f"),
          ((N, N), "mult_n_n")]),
    ("div", "/",
         [((I,I),"div_i_i"), ((F,F),"div_f_f"),
          ((N, N), "div_n_n")]),
    ("mod", "%",
         [((F,F),"mod_f_f"),
          ((N, N), "mod_n_n")]),
    ("uplus", "__uplus__",
         [((N,), "uplus_n")]),
    ("uminus", "__uminus__",
         [((I,),"uminus_i"), ((F,),"uminus_f"),
          ((N,), "uminus_n")]),
    ("not_", "not",
         [((A,),"not_w")]),
    ("eq", "==",
         [((A,A),"eq_w")]),
    ("ne", "!=",
         [((A,A),"noteq_w")]),
    ("compare", "compare",None),
    ("in_", "in",
         [((A,A),"in_w")]),
    ("notin", "notin",
         [((A,A),"notin_w")]),
    ("gt", ">",
         [((I,I),"compare_gt_i_i"), ((F,F),"compare_gt_f_f"),
          ((N, N), "compare_gt_n_n")]),
    ("ge", ">=",
         [((I,I),"compare_ge_i_i"), ((F,F),"compare_ge_f_f"),
          ((N, N), "compare_ge_n_n")]),
    ("bitnot", "!",
         [((I,),"bitnot_i")]),
     ("bitor", "^",
         [((I,I),"bitor_i_i")]),
     ("bitxor", "~",
         [((I,I),"bitxor_i_i")]),
     ("bitand", "&",
         [((I,I),"bitand_i_i")]),
     ("lsh", "<<",
         [((I,I),"lsh_i_i")]),
     ("rsh", ">>",
         [((I,I),"rsh_i_i")]),
     ("ursh", ">>>",
         [((I,I),"ursh_i_i")]),
     ("as_", "as",
         [((A,A),"as_w_w")]),
     ("kindof", "kindof",
         [((A,A),"kindof_w_w")]),
     ("is_", "is",
         [((A,A),"is_w_w")]),
     ("isnot", "isnot",
         [((A,A),"isnot_w_w")]),
     ("isa", "isa",
         [((A,A),"isa_w_w")]),
     ("nota", "nota",
         [((A,A),"nota_w_w")]),

     ("len", "len",
         [((A,),"len_w")]),
     ("str", "str",
         [((A,),"str_w")]),
     ("list", "list",
         [((T,),"plist_tuple","obin.types.plist"),]),
]

def hotpath_name(name):
    return 'hp_%s' % name 

def print_implementations():
    print "    # ---------------AUTOGENERATED---------------------"
    TPL_IMPL_BINARY = """
    @complete_native_routine
    def builtin_%s(process, routine):
        from %s import %s 
        arg1 = routine.get_arg(0)
        arg2 = routine.get_arg(1)
        return %s(process, arg1, arg2)
    """

    TPL_IMPL_UNARY = """
    @complete_native_routine
    def builtin_%s(process, routine):
        from %s import %s 
        arg1 = routine.get_arg(0)
        return %s(process, arg1)
    """
    print "from obin.runtime.routine import complete_native_routine"
    for G in GENERICS:
        impls = G[2]
        if impls is None:
            continue
                
        for impl in impls:

            traits = impl[0]
            func = impl[1]
            if len(traits) == 1:
                tpl = TPL_IMPL_UNARY
            else:
                tpl = TPL_IMPL_BINARY
            try:
                module = impl[2]
            except:
                module = "obin.builtins.internals.operations"
            S = tpl %(func, module, func, func)
            print S


def print_declarations():
    print "    # ---------------AUTOGENERATED---------------------"
    TPL_HOT = "        self.%s = newgeneric_hotpath(symbols.symbol(u\"%s\"), hotpath.%s)"
    TPL = "        self.%s = newgeneric(symbols.symbol(u\"%s\"))"
    for G in GENERICS:
        varname = G[0]
        funcname = G[1]
        impls = G[2]
        if impls is None:
            print TPL % (varname, funcname)
        else:
            print TPL_HOT % (varname, funcname, hotpath_name(varname))

def print_builtin_puts():
    print "    # ---------------AUTOGENERATED---------------------"
    for G in GENERICS:
        varname = G[0]
        S = "    api.put(module, generics.%s.name, generics.%s)" % (varname, varname)
        print S

    
def print_reify():
    print "    # ---------------AUTOGENERATED---------------------"
    REIFY_TPL = """
    specify_single(process, generics.{{varname}},
                     newtuple([{% for trait in traits %}traits.{{trait}}, {% endfor %}]),
                     newnativefunc(newsymbol(process, u"{{funcname}}"), wrappers.builtin_{{funcname}}, {{traits|length}}))
    """
    from jinja2 import Template
    template = Template(REIFY_TPL)
    for G in GENERICS:
        impls = G[2]
        if impls is None:
            continue
        varname = G[0]
        

        for impl in impls:
            data = {"varname":varname, "funcname":impl[1], "traits":impl[0]}
            S = template.render(data)
            print S

# print_declarations()

# print_implementations()
# print_builtin_puts()
# print_reify()
