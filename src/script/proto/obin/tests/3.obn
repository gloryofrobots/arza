generic _and_:
    case (t of True, f of True):
        true
    end
    case (t of Boolean, f of Boolean):
        false
    end
end

print(_and_(true, true))

print(_and_(true, false), _and_(false, true),  _and_(true, true))

specify _and_ (i of Integer, i of Float):
    false
end

specify _and_:
    case (i of String, i of Integer):
        true
    end
end

print(_and_(1, 1.0), _and_("hhh", 1))


f1 = func (a,b,c):
    print(a, b, c)
end

f1(1,2,3)

func f2():  print("func(): end") end
f2()

func f3:  print("func: end") end
f3()

func f4(a,b,c,...rest):
    print(a,b,c,rest)
end

f4(1,2,3,4,5,6)


func f5(x, (y,z), a, b,
    {name=name, age=(years, month)},
     ...rest):
    print("x",x, "(y,z)", (y,z),
            "a", a,"b",b,"{name=name, age=(years, month)}", name, years, month,"rest", rest )
end
f5(1, (2,3), 4,5, {name=6, age=(7,8)}, 9,10,11,12)

trait Animal

origin Human(name, surname):
    lst({name=name, surname=surname}, Human, Animal)
end

origin Wolf(name):
    lst({name=name}, Wolf, Animal)
end

print(Human)

generic `-=-=-=`(self of Animal):
    print("I am animal", self.name)
end

specify `-=-=-=`(self of Human):
    print("I am nice human",self.name, self.surname)
end

h = Human("Bob", "Alice")
w = Wolf("Jack")
`-=-=-=`(h)
`-=-=-=`(w)

//print(h)

l = lst(1,2,3,4,5)
print(l)

A = [1,2,3,4,5]


co = coroutine(func(yield, x):
           Z = "1111"

           _co1 = coroutine(
               func(yield2, y):
                   Y = "2222"
                   func send():
                        X = "3333"
                        yield2(42 + y)
                   end
                   send()
               end)

        print("x", x)
        v = _co1(x)
        t = yield(v)
        print("t", t)
        x = yield(t)
        print("x", x)
        return x
end)

print(co(23))
print(co(34))
print(co(44))


generic gg1
func ff1(a,b,...c): 1 end
origin o1(): 1 end
print(gg1, ff1, o1)

x = 12


if x == 13:
    1
elif x == 14:
    2
elif x == 15:
    3
else:
    4
end





T = match (1, (23, (24, 25))):
        case (Z, (G, 1)): 12 + Z end
        case (1, 23):  11  end
        case (1, (23, X)):  11  end
        case _: nil end
end


print("Match result", T, X)

//print(Z, X)

