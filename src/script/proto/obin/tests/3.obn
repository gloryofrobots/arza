func test_eq(str, val, expected):
    print("test:","'" + str + "'", val, val == expected)
    if val != expected:
        throw "Test error"
    end
end


x = 1
test_eq("x = 1", x, 1)

x = "Hello"
test_eq("x = 'Hello'", x, "Hello")

x = 42.234433444
test_eq("x = 42.234433444", x, 42.234433444)

x = (1, "Hello", 35.44555)
print(x)
print(x[1])

x = (42,)
print(x)

x = (1,2, ["Alice", "Bob", (45,), 54.000000001])
print(x)

x = {name= "XXX"}
print(x.name)

print((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Bob"})

x = true
print(x)

x = false
print(x)
x = nil
print(x)

x = { name="X", age=42.24 }
print(x)

x = 1
y = 0
print("x = ", x, "y = ", y)

print("x or y", x or y)

print("x and y", x and y)
print("not y", not y)
print("~ y", ~ y)
print("~ y", ~ y)


print("x | y", x | y)
print("x & y", x & y)
print("x ^ y", x ^ y)

//print("x += 0.5", x += 0.5)
//print("x -= 1", x -= 1)
//print("x *= 2", x *= 2)
//print("x /= 3", x /= 3)
//print("x %= 4", x %= 4)
//print("x &= 5", x &= 5)
//print("x ^=6", x ^=6)
//print("x |= 7", x |= 7)

print("true when 5 > 4 else false", true when 5 > 4 else false)
print("x is y", x is y)
print("x isnot y", x isnot y)
print("5 > 5", 5 > 5)
print("5 >= 3", 5 >= 3)
print("5 < 4", 5 < 4)
print("5 <= 3", 5 <= 3)
print("x != 6", x != 6)
print("x == y", x == y)
//print("x >> 43", x >> 43)
//print("x << 10001", x << 10001)
//print("x >>> 1001001001", x >>> 1001001001)
print("x + 34", x + 34)
print("x - 34", x - 34)
print("x * 34", x * 34)
print("x / 45", x / 45)
print("x % 32", x % 32)


x = `+`(1,2)
print(x)
x = `+`(1.0,2.0)
print(x)
x = `+`(1,2.0)
print(x)

A = [1,2,3,4,5,6]
print(length(A))

A = [0, 1, 2, x]
print(x,"in",A, x in A)

x = 2
generic _and_:
    case (t of True, f of True):
        true
    end
    case (t of Boolean, f of Boolean):
        false
    end
end

print(_and_(true, true))

print(_and_(true, false), _and_(false, true),  _and_(true, true))

specify _and_ (i of Integer, i of Float):
    false
end

specify _and_:
    case (i of String, i of Integer):
        true
    end
end

print(_and_(1, 1.0), _and_("hhh", 1))


f1 = func (a,b,c):
    print(a, b, c)
end

f1(1,2,3)

func f2():  print("func(): end") end
f2()

func f3:  print("func: end") end
f3()

func f4(a,b,c,...rest):
    print(a,b,c,rest)
end

f4(1,2,3,4,5,6)


func f5(x, (y,z), a, b,
    {name=name, age=(years, month)},
     ...rest):
    print("x",x, "(y,z)", (y,z),
            "a", a,"b",b,"{name=name, age=(years, month)}", name, years, month,"rest", rest )
end
f5(1, (2,3), 4,5, {name=6, age=(7,8)}, 9,10,11,12)

trait Animal

origin Human(name, surname):
    [{name=name, surname=surname}, Human, Animal]
end

origin Wolf(name):
    [{name=name}, Wolf, Animal]
end

print(Human)

generic `-=-=-=`(self of Animal):
    print("I am animal", self.name)
end

specify `-=-=-=`(self of Human):
    print("I am nice human",self.name, self.surname)
end

h = Human("Bob", "Alice")
w = Wolf("Jack")
`-=-=-=`(h)
`-=-=-=`(w)

//print(h)


A = [1,2,3,4,5]
print(A)


co = coroutine(func(yield, x):
           Z = "1111"

           _co1 = coroutine(
               func(yield2, y):
                   Y = "2222"
                   func send():
                        X = "3333"
                        yield2(42 + y)
                   end
                   send()
               end)

        print("x", x)
        v = _co1(x)
        t = yield(v)
        print("t", t)
        x = yield(t)
        print("x", x)
        return x
end)

print(co(23))
print(co(34))
print(co(44))


generic gg1
func ff1(a,b,...c): 1 end
origin o1(): 1 end
print(gg1, ff1, o1)

x = 12


if x == 13:
    1
elif x == 14:
    2
elif x == 15:
    3
else:
    4
end



A = (1,2,3,4,5,6)
for x in A:
    print(x) end

x = 10
while x > 0:
    x-=1
    print(x) end

print("Match result", T, X)

A = (1, 2, 3, 4, 5, 6, 35, 110, 122)
for a in A:
    if(a == 35):
       continue
    end

    if(a > 115):
        if(1 < 2):
            break;
        end
    end
    print(a)
end

x = 20
while x > 0:
    x -= 5
    if x == 10:
        print("SKIP", x)
        continue
    end
    print("X", x)
end

func inner_loop_outer():
    x = 0
    func f():
        outer x
        while x < 100:
            x += 1
            if x == 8:
                continue
            elif x == 11:
                break
            end
            print(x)
        end
    end
    f()
end

print ("**************************************************************************")


metadata = {
    title= "Nemesis Games",
    subject= "SCIFI",
    translationsUa={title="IGRU DOLI", translator="PILIP LUN" },
    translationsEn={ titleEn=("GAMES OF NEMESIS", "NEMESIS GAMES"), translatorEn="Jhon DOU" },
    author= ("James", "Corey")
}


print(metadata.title, metadata.subject, metadata.translationsUa["title"], metadata.translationsUa.translator,
      metadata.translationsEn.titleEn,  metadata.translationsEn.translatorEn, metadata.author)

print ("**************************************************************************")

{
    title=englishTitle,
    subject,
    translationsUa={ title=localeTitle, translator },
    translationsEn={ titleEn=(localeTitleEn, origTitleEn), translatorEn },
    author=author_data
} = metadata;

print(englishTitle, subject, localeTitle,translator,(localeTitleEn, origTitleEn), translatorEn, author_data )

print ("**************************************************************************")

//print(Z, X)


T = match (1, (23, (24, 25))):
        case (Z, (G, 1)): 12 + Z end
        case (1, 23):  11  end
        case (1, (23, X)):  11  end
        case _: nil end
end
A = [(1,2), (2,3,4), 5, [6,7,8]]
print(
match A:
    case [a,b,c]: (a, b, c) end
    case [a, b]: (a,b) end
    case (x, y, z): (x, y, z) end
    case [(1, X), Y, 5, [6,7, Z]]: (X, Y, Z) end
    case _: 123 end
end
)

A = {name="Bob", surname=("Alice", "Dou"), age=42}
print(A)
print(match A:
    case {name="Bob2", age=42}: (name, age) end
    case {name="Bob", surname="Alice"}: (name, surname) end
//    case {name="Bob", surname=("Alice", X)}: (name, surname, X) end
    case {name="Bob", surname=("Alice", "Dou")}: (surname, name) end
    case _: 42 end
end
)
print(
match A:
    case {age=41, names}: (name, age, 0) end
    case {name, age=41}: (name, age, 1) end
    case {age=42}: (age, 2) end
    case _: 42 end
end
)


//match A:
//    case [a, b, ...rest] -> (a, b, rest) end
//    case [a, ...rest] -> (a, rest) end
//end
//
