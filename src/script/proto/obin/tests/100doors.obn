Array.apply(null, { length: 100 })
  .map(function(v, i) { return i + 1; })
    .forEach(function(door) {
      var sqrt = Math.sqrt(door);

      if (sqrt === (sqrt | 0)) {
        console.log("Door %d is open", door);
      }
    });

/**LIST MONAD************************************************************************/

(function () {
  return chain(

    rng(1, 100),

    function (x) {
      var root = Math.sqrt(x);

      return root === Math.floor(root) ? inject(x) : fail();
    }
  );


  /*************************************************************/

  // monadic Bind/chain for lists
  function chain(xs, f) {
    return [].concat.apply([], xs.map(f));
  }

  // monadic Return/inject for lists
  function inject(x) { return [x]; }

  // monadic Fail for lists
  function fail() { return []; }

  // rng(1, 20) --> [1..20]
  function rng(m, n) {
    return Array.apply(null, Array(n - m + 1)).map(function (x, i) {
      return m + i;
    });
  }

})();

/**LIST MONAD END************************************************************************/

/**ARRAY FILTER ************************************************************************/
(function () {

  return rng(1, 100).filter(
    function (x) {
      var root = Math.sqrt(x);

      return root === Math.floor(root);
    }
  );

  // rng(1, 20) --> [1..20]
  function rng(m, n) {
    return Array.apply(null, Array(n - m + 1)).map(function (x, i) {
      return m + i;
    });
  }

})();

/**ARRAY FILTER END ************************************************************************/

// Array comprehension style
[ for (i of Array.apply(null, { length: 100 })) i ].forEach((_, i) => {
  var door = i + 1
  var sqrt = Math.sqrt(door);

  if (sqrt === (sqrt | 0)) {
    console.log("Door %d is open", door);
  }
});