exports customers, items, foodcort

module customers {
    trait Customer;
    exports visit, Vegan, Ordinary

    generic visit(self of Customer, cort of FoodCort) {
        foodcort:prepare(cort, self, self.money)
    }

    func _customer(_trait, name, money) {
       form([_trait, Customer], {name=name, money=money})
    }

    factory Vegan(name, money) {
        _customer(Vegan, name, money)
    }

    factory Ordinary(name, money) {
        _customer(Ordinary, name, money)
    }
}

module items {
    exports packing, pack, VegBurger, ChickenBurger, Pepsi, Coke

    trait Item
    trait Burger
    trait ColdDrink

    trait Wrapper
    trait Bottle


    generic _item(traits of Enumerable, price of Float, name of String) {
        item = entity(
            concat(traits, Item),
             record {price=price, name=name})
    }

    factory VegBurger() {
        _item([VegBurger, Burger], 0.25, "VegBurger")
    }

    factory ChickenBurger() {
        _item([ChickenBurger, Burger], 40.45, "ChickenBurger")
    }

    factory Pepsi() {
        _item([Pepsi, ColdDrink], 1.45, "Pepsi")
    }
    factory Coke() {
        _item([Coke, ColdDrink], 1.65, "Coke")
    }

    generic pack {
       (self of Wrapper) {
          print("Wrapper of ", self.label)
       }
       (self of Bottle) {
          print("Bottle", self.label, " volume: ", self.volume)
       }
    }

    generic packing {
       (self of Burger) {
          entity(Wrapper, { label = "Burger"})
       }
       (self of ColdDrink) {
          entity(Bottle, { label = "ColdDrink", volume = 1.0})
       }
    }
}

module foodcort {
    exports cost, NotEnoughMoneyError, prepare
    trait NotEnoughMoneyError;

    func cost(meal) {
        reduce(func(item, result)
                    { result + item.price },
                0.0,
               meal as Vector)
    }

    // It answers to append and all other list funcs
    factory Menu(items) {
        construct([Menu], items);
    }

    specify __tostring__(self of Menu) {
        each(func(item) {
                string.build(
                             "Item", string.nl,
                             "name", item.name, string.nl,
                             "price", item.price, string.nl
                              "packing", items.packing(item)
                            )
                }, self as Vector)
    }

    factory FoodCort{
        form(FoodCort, {
        })
    }

    generic prepare {
        func check_amount(menu, money) {
            if cost(menu) > money {
                throw Error(NotEnoughMoneyError,
                                {"money"=money})
            }
        }

        case (cort of FoodCort, customer of customers.Vegan, money of Float) {
            menu = Menu([items.VegBurger(), items.Coke()])
            check_amount(menu, money)
        }

        case (cort of FoodCort, customer of customers.Ordinary, money of Float) {
            menu = Menu([items.ChickenBurger(), items.Pepsi()])
            check_amount(menu, money)
        }
    }
}

OliveGarden = FoodCort()

Joe = customers.Vegan()
Bob = customers.Ordinary()
Joe.visit(OliveGarden)
Bob.visit(OliveGarden)

