/*
fn fib(n) {
  fn _process(n,a,b) {
    return _process(n-1,b,a+b) when n>0 else a;
  }
  return _process(n,0,1);
}


fn yfib(x) {
    coroutine(fn(yield) {
      for i in range(0, x) {
        yield(fib(i))
      }
    })
}

f = yfib(15)

for i in f {
  print(i)
}


fn ruler(put, k) {
    if k <= 0 {
        return nil
    }
    print("k", k)
    for i in range(0, k) {
        put(i)
        print("i", i)
        ruler(put, i - 1)
    }
}
fn eachruler() {
    return coroutine(fn(yield) {
        return ruler(yield, 10)
    })
}

d = eachruler()
for i in d {
    print(i)
}



fn sumseq(k, iter) {
    sum = 0
    for v in iter {
        k = k - 1
        sum = sum + v
        if k <= 0 {
            break
        }
    }
}

sumseq(24, eachruler())

fn yrange(start, end) {
    return coroutine(fn (yield) {
        outer start
        while start < end {
           yield(start)
           start += 1
        }
        return nil
    })
}


for i in yrange(0, 100) {
    print(i)
}


 co = coroutine(fn(yield, x) {
           Z = "1111"

           _co1 = coroutine(fn(yield2, y) {
               Y = "2222"
               fn send() {
                    X = "3333"
                    return yield2(42 + y)
               }
               send()
           })

        print("x", x)
        v = _co1(x)
        t = yield(v)
        print("t", t)
        x = yield(t)
        print("x", x)
        return x
      })

v = co(23)
print(v)
v = co(34)
print(v)
v = co(44)
print(v)

 co = coroutine(fn(yield) {
           Z = "1111"
           _co1 = coroutine(fn(yield2) {
               Y = "2222"
               fn send() {
                    X = "3333"
                    return yield2(42)
               }
               send()
           })

        v = _co1()
        x = yield(v)
        y = yield(x + v)
        print(x, y)
        return x + y
      })
v = co(co(co()))
print(v)

iter = coroutine(fn(yield) {
           _iter = coroutine(fn(yield2) {
               fn send(i) {
                    return yield2(i)
               }
               i = 0
               while i < 9 {
                   send(i)
                   i += 1
               }
               return i
           })
        for v in _iter {
            yield(v)
        }
        return nil
      })

for v in iter {
    print(v)
}
*/
 iter = coroutine(fn(yield, j) {
           fn send(i) {
               return yield(i)
           }

           i = 1
           v = j
           while i < 2 {
               v = send(i + v)
               i += 1
           }
           v + i
     })

/*
print(iter(10))
print(iter(11))
print(iter(12))
*/
(fn() {
    print(iter(10))
    (fn(){
        print(iter(11))
        (fn() {
            iter(12)
        })()
     })()
})()

