export trait Shape
export trait Rectangle
export trait Square
export generic vertices
export generic shape
export generic draw

specify shape {
    """
       main shape factory
    """

    entity RectangleEntity
          of (Rectangle, Shape)
          isa {height: nil
                width: nil}

    entity SquareEntity
          of (Rectangle, Shape)
          isa {side: nil}

    entity LoggedRectangleEntity
          of (Rectangle, Shape)
          isa RectangleEntity

    (width of Integer, height of Integer) {
        RectangleEntity {width = width, height = height}
    }
    (width of Integer, height of Integer, logging of True) {
        LoggedRectangleEntity {width = width, height = height}
    }
    (width of Integer, height of Integer, logging of False) {
        create_rectangle(width, height)
    }
    (side of Integer) {
        SquareEntity {side = side}
    }
}

specify draw {
    (self of Shape, point of Enumerable)  {
        {draw, merge} = import graphics.simple.primitives
        v = vertices(self)
        point_to_draw = merge(v, point)
        draw(point_to_draw)
    }
}

fn rect_vertices(width, height) {
    [0,0,width, height]
}

specify vertices {
    (self of Rectangle) {
        rect_vertices(self.width, self.height)
    }
    (self of Square) {
        rect_vertices(self.side, self.side)
    }
    (self of LoggedRectangle) {
        import utils.log
        log.debug("Rectangle Logged")
        vertices(self as Rectangle)
    }
}
