class Generics:
    def __init__(self, symbols):
        from obin.types.space import newgeneric

        ## AUTOGENERATED generic_gen.py
        self.Add = newgeneric(symbols.symbol(u"+"))
        self.Sub = newgeneric(symbols.symbol(u"-"))
        self.Mul = newgeneric(symbols.symbol(u"*"))
        self.Div = newgeneric(symbols.symbol(u"/"))
        self.Mod = newgeneric(symbols.symbol(u"%"))
        self.UnaryPlus = newgeneric(symbols.symbol(u"__unary_plus__"))
        self.UnaryMinus = newgeneric(symbols.symbol(u"__unary_minus__"))
        self.Not = newgeneric(symbols.symbol(u"not"))
        self.Equal = newgeneric(symbols.symbol(u"=="))
        self.NotEqual = newgeneric(symbols.symbol(u"!="))
        self.Compare = newgeneric(symbols.symbol(u"compare"))
        self.In = newgeneric(symbols.symbol(u"contains"))
        self.GreaterThen = newgeneric(symbols.symbol(u">"))
        self.GreaterEqual = newgeneric(symbols.symbol(u">="))
        self.BitNot = newgeneric(symbols.symbol(u"!"))
        self.BitOr = newgeneric(symbols.symbol(u"^"))
        self.BitXor = newgeneric(symbols.symbol(u"~"))
        self.BitAnd = newgeneric(symbols.symbol(u"&"))
        self.LeftShift = newgeneric(symbols.symbol(u"<<"))
        self.RightShift = newgeneric(symbols.symbol(u">>"))
        self.UnsignedRightShift = newgeneric(symbols.symbol(u">>>"))
        self.Len = newgeneric(symbols.symbol(u"len"))
        self.Str = newgeneric(symbols.symbol(u"str"))
        self.List = newgeneric(symbols.symbol(u"list"))


class Behaviors:
    def __init__(self, traits):
        self.create_builtins(traits)
        # from obin.objects.space import newmap
        # self.behaviors = newmap()
        # self.create_cache = newmap()
        # self.attach_cache = newmap()
        # self.detach_cache = newmap()

    def create_builtins(self, traits):
        from obin.types.space import newlist, newbehavior
        self.True = newbehavior(newlist([traits.True, traits.Boolean, traits.Any]))
        self.False = newbehavior(newlist([traits.False, traits.Boolean, traits.Any]))
        self.Nil = newbehavior(newlist([traits.Nil, traits.Any]))
        self.Undefined = newbehavior(newlist([traits.Undefined, traits.Any]))
        self.Char = newbehavior(newlist([traits.Char, traits.Any]))
        self.Integer = newbehavior(newlist([traits.Integer, traits.Number, traits.Any]))
        self.Float = newbehavior(newlist([traits.Float, traits.Number, traits.Any]))
        self.Symbol = newbehavior(newlist([traits.Symbol, traits.Callable, traits.Any]))

        self.String = newbehavior(newlist([traits.String, traits.Enumerable, traits.Collection, traits.Any]))
        self.List = newbehavior(newlist([traits.List, traits.Enumerable, traits.Collection, traits.Any]))
        self.Vector = newbehavior(newlist([traits.Vector, traits.Enumerable, traits.Collection, traits.Any]))
        self.Tuple = newbehavior(newlist([traits.Tuple, traits.Enumerable, traits.Collection, traits.Any]))
        self.Map = newbehavior(newlist([traits.Map, traits.Enumerable, traits.Collection, traits.Any]))

        self.Function = newbehavior(newlist([traits.Function, traits.Callable, traits.Any]))
        self.Generic = newbehavior(newlist([traits.Generic, traits.Callable, traits.Any]))
        self.Primitive = newbehavior(newlist([traits.Primitive, traits.Callable, traits.Any]))

        self.Trait = newbehavior(newlist([traits.Trait, traits.Any]))
        self.Fiber = newbehavior(newlist([traits.Fiber, traits.Callable, traits.Any]))
        self.TVar = newbehavior(newlist([traits.TVar, traits.Any]))


        self.Environment = newbehavior(newlist([traits.Environment, traits.Collection, traits.Any]))
        self.Module = newbehavior(newlist([traits.Module, traits.Collection, traits.Any]))
        self.Behavior = newbehavior(newlist([traits.Behavior, traits.Any]))


class Traits:
    def __init__(self, symbols):
        from obin.types.space import newtrait
        self.Any = newtrait(symbols.symbol(u"Any"))
        self.Boolean = newtrait(symbols.symbol(u"Boolean"))
        self.True = newtrait(symbols.symbol(u"True"))
        self.False = newtrait(symbols.symbol(u"False"))
        self.Nil = newtrait(symbols.symbol(u"Nil"))
        self.Undefined = newtrait(symbols.symbol(u"Undefined"))
        self.Char = newtrait(symbols.symbol(u"Char"))
        self.Number = newtrait(symbols.symbol(u"Number"))
        self.Integer = newtrait(symbols.symbol(u"Integer"))
        self.Float = newtrait(symbols.symbol(u"Float"))
        self.Symbol = newtrait(symbols.symbol(u"Symbol"))
        self.String = newtrait(symbols.symbol(u"String"))
        self.Enumerable = newtrait(symbols.symbol(u"Enumerable"))
        self.Collection = newtrait(symbols.symbol(u"Collection"))
        self.List = newtrait(symbols.symbol(u"List"))
        self.Vector = newtrait(symbols.symbol(u"Vector"))
        self.Tuple = newtrait(symbols.symbol(u"Tuple"))
        self.Map = newtrait(symbols.symbol(u"Map"))
        self.Callable = newtrait(symbols.symbol(u"Callable"))
        self.Function = newtrait(symbols.symbol(u"Function"))
        self.Fiber = newtrait(symbols.symbol(u"Fiber"))
        self.Generic = newtrait(symbols.symbol(u"Generic"))
        self.Primitive = newtrait(symbols.symbol(u"Primitive"))
        self.Module = newtrait(symbols.symbol(u"Module"))
        self.Environment = newtrait(symbols.symbol(u"Environment"))
        self.TVar = newtrait(symbols.symbol(u"TVar"))
        self.Behavior = newtrait(symbols.symbol(u"Behavior"))
        self.Trait = newtrait(symbols.symbol(u"Trait"))

class Std:
    def __init__(self, symbols):
        self.traits = Traits(symbols)
        self.behaviors = Behaviors(self.traits)
        self.generics = Generics(symbols)
