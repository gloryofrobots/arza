class Generics:
    def __init__(self, symbols):
        from obin.types.space import newgeneric_hotpath, newgeneric
        from obin.builtins.generics import hotpath

        # ---------------AUTOGENERATED---------------------
        self.uplus = newgeneric_hotpath(symbols.symbol(u"__uplus__"), hotpath.hp_uplus)
        self.uminus = newgeneric_hotpath(symbols.symbol(u"__uminus__"), hotpath.hp_uminus)
        self.not_ = newgeneric_hotpath(symbols.symbol(u"not"), hotpath.hp_not_)
        self.eq = newgeneric_hotpath(symbols.symbol(u"=="), hotpath.hp_eq)
        self.ne = newgeneric_hotpath(symbols.symbol(u"!="), hotpath.hp_ne)
        self.in_ = newgeneric_hotpath(symbols.symbol(u"in"), hotpath.hp_in_)
        self.notin = newgeneric_hotpath(symbols.symbol(u"notin"), hotpath.hp_notin)
        self.compare = newgeneric(symbols.symbol(u"compare"))
        self.add = newgeneric_hotpath(symbols.symbol(u"+"), hotpath.hp_add)
        self.sub = newgeneric_hotpath(symbols.symbol(u"-"), hotpath.hp_sub)
        self.mul = newgeneric_hotpath(symbols.symbol(u"*"), hotpath.hp_mul)
        self.div = newgeneric_hotpath(symbols.symbol(u"/"), hotpath.hp_div)
        self.mod = newgeneric_hotpath(symbols.symbol(u"%"), hotpath.hp_mod)
        self.gt = newgeneric_hotpath(symbols.symbol(u">"), hotpath.hp_gt)
        self.ge = newgeneric_hotpath(symbols.symbol(u">="), hotpath.hp_ge)
        self.le = newgeneric_hotpath(symbols.symbol(u"<="), hotpath.hp_le)
        self.lt = newgeneric_hotpath(symbols.symbol(u"<"), hotpath.hp_lt)
        self.bitnot = newgeneric_hotpath(symbols.symbol(u"~"), hotpath.hp_bitnot)
        self.bitor = newgeneric_hotpath(symbols.symbol(u"|"), hotpath.hp_bitor)
        self.bitxor = newgeneric_hotpath(symbols.symbol(u"^"), hotpath.hp_bitxor)
        self.bitand = newgeneric_hotpath(symbols.symbol(u"&"), hotpath.hp_bitand)
        self.lsh = newgeneric_hotpath(symbols.symbol(u"<<"), hotpath.hp_lsh)
        self.rsh = newgeneric_hotpath(symbols.symbol(u">>"), hotpath.hp_rsh)
        self.ursh = newgeneric_hotpath(symbols.symbol(u">>>"), hotpath.hp_ursh)
        self.cons = newgeneric_hotpath(symbols.symbol(u"::"), hotpath.hp_cons)
        self.concat = newgeneric_hotpath(symbols.symbol(u"++"), hotpath.hp_concat)

class Behaviors:
    def __init__(self, traits):
        self.create_builtins(traits)
        # from obin.objects.space import newmap
        # self.behaviors = newmap()
        # self.create_cache = newmap()
        # self.attach_cache = newmap()
        # self.detach_cache = newmap()

    def create_builtins(self, traits):
        from obin.types.space import newlist, newbehavior
        self.True = newbehavior(newlist([traits.True, traits.Boolean, traits.Any]))
        self.False = newbehavior(newlist([traits.False, traits.Boolean, traits.Any]))
        self.Nil = newbehavior(newlist([traits.Nil, traits.Any]))
        self.Char = newbehavior(newlist([traits.Char, traits.Any]))
        self.Integer = newbehavior(newlist([traits.Int, traits.Number, traits.Any]))
        self.Float = newbehavior(newlist([traits.Float, traits.Number, traits.Any]))
        self.Symbol = newbehavior(newlist([traits.Symbol, traits.Callable, traits.Any]))

        self.String = newbehavior(newlist([traits.String, traits.Indexed, traits.Collection, traits.Any]))
        self.List = newbehavior(newlist([traits.List, traits.Seq, traits.Collection, traits.Any]))
        self.Vector = newbehavior(newlist([traits.Vector, traits.Indexed, traits.Collection, traits.Any]))
        self.Tuple = newbehavior(newlist([traits.Tuple, traits.Indexed, traits.Collection, traits.Any]))
        self.Map = newbehavior(newlist([traits.Map, traits.Indexed, traits.Collection, traits.Any]))

        self.Function = newbehavior(newlist([traits.Function, traits.Callable, traits.Any]))
        self.Generic = newbehavior(newlist([traits.Generic, traits.Callable, traits.Any]))
        self.Primitive = newbehavior(newlist([traits.Primitive, traits.Callable, traits.Any]))

        self.Trait = newbehavior(newlist([traits.Trait, traits.Any]))
        self.Fiber = newbehavior(newlist([traits.Fiber, traits.Callable, traits.Any]))
        self.TVar = newbehavior(newlist([traits.TVar, traits.Any]))


        self.Environment = newbehavior(newlist([traits.Environment, traits.Collection, traits.Any]))
        self.Module = newbehavior(newlist([traits.Module, traits.Collection, traits.Any]))
        self.Behavior = newbehavior(newlist([traits.Behavior, traits.Any]))


class Traits:
    def __init__(self, symbols):
        from obin.types.space import newtrait
        self.Any = newtrait(symbols.symbol(u"Any"))
        self.Boolean = newtrait(symbols.symbol(u"Boolean"))
        self.True = newtrait(symbols.symbol(u"True"))
        self.False = newtrait(symbols.symbol(u"False"))
        self.Nil = newtrait(symbols.symbol(u"Nil"))
        self.Char = newtrait(symbols.symbol(u"Char"))
        self.Number = newtrait(symbols.symbol(u"Number"))
        self.Int = newtrait(symbols.symbol(u"Int"))
        self.Float = newtrait(symbols.symbol(u"Float"))
        self.Symbol = newtrait(symbols.symbol(u"Symbol"))
        self.String = newtrait(symbols.symbol(u"String"))
        self.List = newtrait(symbols.symbol(u"List"))
        self.Vector = newtrait(symbols.symbol(u"Vector"))
        self.Tuple = newtrait(symbols.symbol(u"Tuple"))
        self.Map = newtrait(symbols.symbol(u"Map"))
        self.Callable = newtrait(symbols.symbol(u"Callable"))
        self.Function = newtrait(symbols.symbol(u"Function"))
        self.Fiber = newtrait(symbols.symbol(u"Fiber"))
        self.Generic = newtrait(symbols.symbol(u"Generic"))
        self.Primitive = newtrait(symbols.symbol(u"Primitive"))
        self.Environment = newtrait(symbols.symbol(u"Environment"))
        self.TVar = newtrait(symbols.symbol(u"TVar"))
        self.Module = newtrait(symbols.symbol(u"Module"))
        self.Behavior = newtrait(symbols.symbol(u"Behavior"))
        self.Trait = newtrait(symbols.symbol(u"Trait"))
        self.Collection = newtrait(symbols.symbol(u"Collection"))
        self.Seq = newtrait(symbols.symbol(u"Seq"))
        self.Indexed = newtrait(symbols.symbol(u"Indexed"))

class Std:
    def __init__(self, symbols):
        self.traits = Traits(symbols)
        self.behaviors = Behaviors(self.traits)
        self.generics = Generics(symbols)
