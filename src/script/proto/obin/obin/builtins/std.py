class Generics:
    def __init__(self, symbols):
        from obin.types.space import newgeneric_hotpath, newgeneric
        from obin.builtins.generics import hotpath

        # ---------------AUTOGENERATED---------------------
        self.uplus = newgeneric_hotpath(symbols.symbol(u"__uplus__"), hotpath.hp_uplus, 1)
        self.uminus = newgeneric_hotpath(symbols.symbol(u"__uminus__"), hotpath.hp_uminus, 1)
        self.not_ = newgeneric_hotpath(symbols.symbol(u"not"), hotpath.hp_not_, 1)
        self.eq = newgeneric_hotpath(symbols.symbol(u"=="), hotpath.hp_eq, 2)
        self.ne = newgeneric_hotpath(symbols.symbol(u"!="), hotpath.hp_ne, 2)
        self.in_ = newgeneric_hotpath(symbols.symbol(u"in"), hotpath.hp_in_, 2)
        self.notin = newgeneric_hotpath(symbols.symbol(u"notin"), hotpath.hp_notin, 2)
        self.compare = newgeneric(symbols.symbol(u"compare"))
        self.add = newgeneric_hotpath(symbols.symbol(u"+"), hotpath.hp_add, 2)
        self.sub = newgeneric_hotpath(symbols.symbol(u"-"), hotpath.hp_sub, 2)
        self.mul = newgeneric_hotpath(symbols.symbol(u"*"), hotpath.hp_mul, 2)
        self.div = newgeneric_hotpath(symbols.symbol(u"/"), hotpath.hp_div, 2)
        self.mod = newgeneric_hotpath(symbols.symbol(u"%"), hotpath.hp_mod, 2)
        self.gt = newgeneric_hotpath(symbols.symbol(u">"), hotpath.hp_gt, 2)
        self.ge = newgeneric_hotpath(symbols.symbol(u">="), hotpath.hp_ge, 2)
        self.le = newgeneric_hotpath(symbols.symbol(u"<="), hotpath.hp_le, 2)
        self.lt = newgeneric_hotpath(symbols.symbol(u"<"), hotpath.hp_lt, 2)
        self.bitnot = newgeneric_hotpath(symbols.symbol(u"~"), hotpath.hp_bitnot, 1)
        self.bitor = newgeneric_hotpath(symbols.symbol(u"|"), hotpath.hp_bitor, 2)
        self.bitxor = newgeneric_hotpath(symbols.symbol(u"^"), hotpath.hp_bitxor, 2)
        self.bitand = newgeneric_hotpath(symbols.symbol(u"&"), hotpath.hp_bitand, 2)
        self.lsh = newgeneric_hotpath(symbols.symbol(u"<<"), hotpath.hp_lsh, 2)
        self.rsh = newgeneric_hotpath(symbols.symbol(u">>"), hotpath.hp_rsh, 2)
        self.ursh = newgeneric_hotpath(symbols.symbol(u">>>"), hotpath.hp_ursh, 2)
        self.cons = newgeneric_hotpath(symbols.symbol(u"::"), hotpath.hp_cons, 2)
        self.concat = newgeneric_hotpath(symbols.symbol(u"++"), hotpath.hp_concat, 2)


class Types:
    def __init__(self, symbols, traits):
        from obin.types.space import newlist, newnativedatatype as newtype, newnativetypeconstructor as newctor
        _s = symbols.symbol
        self.Bool = newtype(_s(u"Bool"), newlist([traits.Any, ]))
        self.True = newctor(_s(u"True"), self.Bool)
        self.False = newctor(_s(u"False"), self.Bool)
        self.Option = newtype(_s(u"Option"), newlist([traits.Any, ]))
        self.Nil = newctor(_s(u"Nil"), self.Option)
        self.Char = newtype(_s(u"Char"), newlist([traits.Any, ]))
        self.Int = newtype(_s(u"Int"), newlist([traits.Number, traits.Any, ]))
        self.Float = newtype(_s(u"Float"), newlist([traits.Number, traits.Any, ]))
        self.Symbol = newtype(_s(u"Symbol"), newlist([traits.Any, ]))
        self.String = newtype(_s(u"String"), newlist([traits.Any, ]))
        self.List = newtype(_s(u"List"), newlist([traits.Any, ]))
        self.Vector = newtype(_s(u"Vector"), newlist([traits.Any, ]))
        self.Tuple = newtype(_s(u"Tuple"), newlist([traits.Any, ]))
        self.Map = newtype(_s(u"Map"), newlist([traits.Any, ]))
        self.Function = newtype(_s(u"Function"), newlist([traits.Callable, traits.Any, ]))
        self.Generic = newtype(_s(u"Generic"), newlist([traits.Callable, traits.Any, ]))
        self.Method = newtype(_s(u"Method"), newlist([traits.Callable, traits.Any, ]))
        self.NativeFunction = newtype(_s(u"NativeFunction"), newlist([traits.Callable, traits.Any, ]))
        self.Fiber = newtype(_s(u"Fiber"), newlist([traits.Callable, traits.Any, ]))
        self.Trait = newtype(_s(u"Trait"), newlist([traits.Any, ]))
        self.Datatype = newtype(_s(u"Datatype"), newlist([traits.Any, ]))
        self.TVar = newtype(_s(u"TVar"), newlist([traits.Any, ]))
        self.Env = newtype(_s(u"Env"), newlist([traits.Any, ]))


class Traits:
    def __init__(self, symbols):
        from obin.types.space import newtrait
        self.Any = newtrait(symbols.symbol(u"Any"))
        self.Number = newtrait(symbols.symbol(u"Number"))
        self.Callable = newtrait(symbols.symbol(u"Callable"))
        self.Collection = newtrait(symbols.symbol(u"Collection"))
        self.Seq = newtrait(symbols.symbol(u"Seq"))
        self.Indexed = newtrait(symbols.symbol(u"Indexed"))

class Std:
    def __init__(self, symbols):
        self.traits = Traits(symbols)
        self.types = Types(symbols, self.traits)
        self.generics = Generics(symbols)
