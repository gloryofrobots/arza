# ---------------AUTOGENERATED---------------------
from obin.runtime.routine import complete_native_routine
from obin.builtins.generics import operations
from obin.types import plist, tupl, string
@complete_native_routine
def builtin_uplus_n(process, routine):
    arg0 = routine.get_arg(0)

    return operations.uplus_n(process,arg0)


@complete_native_routine
def builtin_uminus_i(process, routine):
    arg0 = routine.get_arg(0)

    return operations.uminus_i(process,arg0)


@complete_native_routine
def builtin_uminus_f(process, routine):
    arg0 = routine.get_arg(0)

    return operations.uminus_f(process,arg0)


@complete_native_routine
def builtin_uminus_n(process, routine):
    arg0 = routine.get_arg(0)

    return operations.uminus_n(process,arg0)


@complete_native_routine
def builtin_not_w(process, routine):
    arg0 = routine.get_arg(0)

    return operations.not_w(process,arg0)


@complete_native_routine
def builtin_eq_w(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.eq_w(process,arg0, arg1)


@complete_native_routine
def builtin_noteq_w(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.noteq_w(process,arg0, arg1)


@complete_native_routine
def builtin_in_w(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.in_w(process,arg0, arg1)


@complete_native_routine
def builtin_notin_w(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.notin_w(process,arg0, arg1)


@complete_native_routine
def builtin_add_i_i(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.add_i_i(process,arg0, arg1)


@complete_native_routine
def builtin_add_f_f(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.add_f_f(process,arg0, arg1)


@complete_native_routine
def builtin_add_n_n(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.add_n_n(process,arg0, arg1)


@complete_native_routine
def builtin_sub_i_i(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.sub_i_i(process,arg0, arg1)


@complete_native_routine
def builtin_sub_f_f(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.sub_f_f(process,arg0, arg1)


@complete_native_routine
def builtin_sub_n_n(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.sub_n_n(process,arg0, arg1)


@complete_native_routine
def builtin_mult_i_i(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.mult_i_i(process,arg0, arg1)


@complete_native_routine
def builtin_mult_f_f(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.mult_f_f(process,arg0, arg1)


@complete_native_routine
def builtin_mult_n_n(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.mult_n_n(process,arg0, arg1)


@complete_native_routine
def builtin_div_i_i(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.div_i_i(process,arg0, arg1)


@complete_native_routine
def builtin_div_f_f(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.div_f_f(process,arg0, arg1)


@complete_native_routine
def builtin_div_n_n(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.div_n_n(process,arg0, arg1)


@complete_native_routine
def builtin_mod_f_f(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.mod_f_f(process,arg0, arg1)


@complete_native_routine
def builtin_mod_n_n(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.mod_n_n(process,arg0, arg1)


@complete_native_routine
def builtin_compare_gt_i_i(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.compare_gt_i_i(process,arg0, arg1)


@complete_native_routine
def builtin_compare_gt_f_f(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.compare_gt_f_f(process,arg0, arg1)


@complete_native_routine
def builtin_compare_gt_n_n(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.compare_gt_n_n(process,arg0, arg1)


@complete_native_routine
def builtin_compare_ge_i_i(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.compare_ge_i_i(process,arg0, arg1)


@complete_native_routine
def builtin_compare_ge_f_f(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.compare_ge_f_f(process,arg0, arg1)


@complete_native_routine
def builtin_compare_ge_n_n(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.compare_ge_n_n(process,arg0, arg1)


@complete_native_routine
def builtin_compare_le_i_i(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.compare_le_i_i(process,arg0, arg1)


@complete_native_routine
def builtin_compare_le_f_f(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.compare_le_f_f(process,arg0, arg1)


@complete_native_routine
def builtin_compare_le_n_n(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.compare_le_n_n(process,arg0, arg1)


@complete_native_routine
def builtin_compare_lt_i_i(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.compare_lt_i_i(process,arg0, arg1)


@complete_native_routine
def builtin_compare_lt_f_f(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.compare_lt_f_f(process,arg0, arg1)


@complete_native_routine
def builtin_compare_lt_n_n(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.compare_lt_n_n(process,arg0, arg1)


@complete_native_routine
def builtin_bitnot_i(process, routine):
    arg0 = routine.get_arg(0)

    return operations.bitnot_i(process,arg0)


@complete_native_routine
def builtin_bitor_i_i(process, routine):
    arg0 = routine.get_arg(0)

    return operations.bitor_i_i(process,arg0)


@complete_native_routine
def builtin_bitxor_i_i(process, routine):
    arg0 = routine.get_arg(0)

    return operations.bitxor_i_i(process,arg0)


@complete_native_routine
def builtin_bitand_i_i(process, routine):
    arg0 = routine.get_arg(0)

    return operations.bitand_i_i(process,arg0)


@complete_native_routine
def builtin_lsh_i_i(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.lsh_i_i(process,arg0, arg1)


@complete_native_routine
def builtin_rsh_i_i(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.rsh_i_i(process,arg0, arg1)


@complete_native_routine
def builtin_ursh_i_i(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return operations.ursh_i_i(process,arg0, arg1)


@complete_native_routine
def builtin_cons(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return plist.cons(arg0, arg1)


@complete_native_routine
def builtin_concat(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return plist.concat(arg0, arg1)


@complete_native_routine
def builtin_concat(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return string.concat(arg0, arg1)


@complete_native_routine
def builtin_concat(process, routine):
    arg0 = routine.get_arg(0)
    arg1 = routine.get_arg(1)

    return tupl.concat(arg0, arg1)
