from obin.types import api
from obin.types import space


def setup(process, module, stdlib):
    _install(process, module, stdlib)
    _specify(process, module, stdlib)


def _install(process, module, stdlib):
    generics = stdlib.generics
    # ---------------AUTOGENERATED---------------------
    api.put(module, generics.add.name, generics.add)
    api.put(module, generics.sub.name, generics.sub)
    api.put(module, generics.mul.name, generics.mul)
    api.put(module, generics.div.name, generics.div)
    api.put(module, generics.mod.name, generics.mod)
    api.put(module, generics.uplus.name, generics.uplus)
    api.put(module, generics.uminus.name, generics.uminus)
    api.put(module, generics.not_.name, generics.not_)
    api.put(module, generics.eq.name, generics.eq)
    api.put(module, generics.ne.name, generics.ne)
    api.put(module, generics.compare.name, generics.compare)
    api.put(module, generics.in_.name, generics.in_)
    api.put(module, generics.notin.name, generics.notin)
    api.put(module, generics.gt.name, generics.gt)
    api.put(module, generics.ge.name, generics.ge)
    api.put(module, generics.le.name, generics.le)
    api.put(module, generics.lt.name, generics.lt)
    api.put(module, generics.bitnot.name, generics.bitnot)
    api.put(module, generics.bitor.name, generics.bitor)
    api.put(module, generics.bitxor.name, generics.bitxor)
    api.put(module, generics.bitand.name, generics.bitand)
    api.put(module, generics.lsh.name, generics.lsh)
    api.put(module, generics.rsh.name, generics.rsh)
    api.put(module, generics.ursh.name, generics.ursh)
    api.put(module, generics.as_.name, generics.as_)
    api.put(module, generics.kindof.name, generics.kindof)
    api.put(module, generics.is_.name, generics.is_)
    api.put(module, generics.isnot.name, generics.isnot)
    api.put(module, generics.isa.name, generics.isa)
    api.put(module, generics.nota.name, generics.nota)
    api.put(module, generics.len.name, generics.len)
    api.put(module, generics.str.name, generics.str)
    api.put(module, generics.list.name, generics.list)


def _specify(process, module, stdlib):
    import obin.builtins.internals.wrappers as wrappers
    from obin.types.dispatch.generic import specify_single
    from obin.types.space import newtuple, newnativefunc, newsymbol
    generics = stdlib.generics
    traits = stdlib.traits

    # ---------------AUTOGENERATED---------------------

    specify_single(process, generics.add,
                   newtuple([traits.Integer, traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"add_i_i"), wrappers.builtin_add_i_i, 2))

    specify_single(process, generics.add,
                   newtuple([traits.Float, traits.Float, ]),
                   newnativefunc(newsymbol(process, u"add_f_f"), wrappers.builtin_add_f_f, 2))

    specify_single(process, generics.add,
                   newtuple([traits.Number, traits.Number, ]),
                   newnativefunc(newsymbol(process, u"add_n_n"), wrappers.builtin_add_n_n, 2))

    specify_single(process, generics.sub,
                   newtuple([traits.Integer, traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"sub_i_i"), wrappers.builtin_sub_i_i, 2))

    specify_single(process, generics.sub,
                   newtuple([traits.Float, traits.Float, ]),
                   newnativefunc(newsymbol(process, u"sub_f_f"), wrappers.builtin_sub_f_f, 2))

    specify_single(process, generics.sub,
                   newtuple([traits.Number, traits.Number, ]),
                   newnativefunc(newsymbol(process, u"sub_n_n"), wrappers.builtin_sub_n_n, 2))

    specify_single(process, generics.mul,
                   newtuple([traits.Integer, traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"mult_i_i"), wrappers.builtin_mult_i_i, 2))

    specify_single(process, generics.mul,
                   newtuple([traits.Float, traits.Float, ]),
                   newnativefunc(newsymbol(process, u"mult_f_f"), wrappers.builtin_mult_f_f, 2))

    specify_single(process, generics.mul,
                   newtuple([traits.Number, traits.Number, ]),
                   newnativefunc(newsymbol(process, u"mult_n_n"), wrappers.builtin_mult_n_n, 2))

    specify_single(process, generics.div,
                   newtuple([traits.Integer, traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"div_i_i"), wrappers.builtin_div_i_i, 2))

    specify_single(process, generics.div,
                   newtuple([traits.Float, traits.Float, ]),
                   newnativefunc(newsymbol(process, u"div_f_f"), wrappers.builtin_div_f_f, 2))

    specify_single(process, generics.div,
                   newtuple([traits.Number, traits.Number, ]),
                   newnativefunc(newsymbol(process, u"div_n_n"), wrappers.builtin_div_n_n, 2))

    specify_single(process, generics.mod,
                   newtuple([traits.Float, traits.Float, ]),
                   newnativefunc(newsymbol(process, u"mod_f_f"), wrappers.builtin_mod_f_f, 2))

    specify_single(process, generics.mod,
                   newtuple([traits.Number, traits.Number, ]),
                   newnativefunc(newsymbol(process, u"mod_n_n"), wrappers.builtin_mod_n_n, 2))

    specify_single(process, generics.uplus,
                   newtuple([traits.Number, ]),
                   newnativefunc(newsymbol(process, u"uplus_n"), wrappers.builtin_uplus_n, 1))

    specify_single(process, generics.uminus,
                   newtuple([traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"uminus_i"), wrappers.builtin_uminus_i, 1))

    specify_single(process, generics.uminus,
                   newtuple([traits.Float, ]),
                   newnativefunc(newsymbol(process, u"uminus_f"), wrappers.builtin_uminus_f, 1))

    specify_single(process, generics.uminus,
                   newtuple([traits.Number, ]),
                   newnativefunc(newsymbol(process, u"uminus_n"), wrappers.builtin_uminus_n, 1))

    specify_single(process, generics.not_,
                   newtuple([traits.Any, ]),
                   newnativefunc(newsymbol(process, u"not_w"), wrappers.builtin_not_w, 1))

    specify_single(process, generics.eq,
                   newtuple([traits.Any, traits.Any, ]),
                   newnativefunc(newsymbol(process, u"eq_w"), wrappers.builtin_eq_w, 2))

    specify_single(process, generics.ne,
                   newtuple([traits.Any, traits.Any, ]),
                   newnativefunc(newsymbol(process, u"noteq_w"), wrappers.builtin_noteq_w, 2))

    specify_single(process, generics.in_,
                   newtuple([traits.Any, traits.Any, ]),
                   newnativefunc(newsymbol(process, u"in_w"), wrappers.builtin_in_w, 2))

    specify_single(process, generics.notin,
                   newtuple([traits.Any, traits.Any, ]),
                   newnativefunc(newsymbol(process, u"notin_w"), wrappers.builtin_notin_w, 2))

    specify_single(process, generics.gt,
                   newtuple([traits.Integer, traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"compare_gt_i_i"), wrappers.builtin_compare_gt_i_i, 2))

    specify_single(process, generics.gt,
                   newtuple([traits.Float, traits.Float, ]),
                   newnativefunc(newsymbol(process, u"compare_gt_f_f"), wrappers.builtin_compare_gt_f_f, 2))

    specify_single(process, generics.gt,
                   newtuple([traits.Number, traits.Number, ]),
                   newnativefunc(newsymbol(process, u"compare_gt_n_n"), wrappers.builtin_compare_gt_n_n, 2))

    specify_single(process, generics.ge,
                   newtuple([traits.Integer, traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"compare_ge_i_i"), wrappers.builtin_compare_ge_i_i, 2))

    specify_single(process, generics.ge,
                   newtuple([traits.Float, traits.Float, ]),
                   newnativefunc(newsymbol(process, u"compare_ge_f_f"), wrappers.builtin_compare_ge_f_f, 2))

    specify_single(process, generics.ge,
                   newtuple([traits.Number, traits.Number, ]),
                   newnativefunc(newsymbol(process, u"compare_ge_n_n"), wrappers.builtin_compare_ge_n_n, 2))

    specify_single(process, generics.le,
                   newtuple([traits.Integer, traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"compare_le_i_i"), wrappers.builtin_compare_le_i_i, 2))

    specify_single(process, generics.le,
                   newtuple([traits.Float, traits.Float, ]),
                   newnativefunc(newsymbol(process, u"compare_le_f_f"), wrappers.builtin_compare_le_f_f, 2))

    specify_single(process, generics.le,
                   newtuple([traits.Number, traits.Number, ]),
                   newnativefunc(newsymbol(process, u"compare_le_n_n"), wrappers.builtin_compare_le_n_n, 2))

    specify_single(process, generics.lt,
                   newtuple([traits.Integer, traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"compare_lt_i_i"), wrappers.builtin_compare_lt_i_i, 2))

    specify_single(process, generics.lt,
                   newtuple([traits.Float, traits.Float, ]),
                   newnativefunc(newsymbol(process, u"compare_lt_f_f"), wrappers.builtin_compare_lt_f_f, 2))

    specify_single(process, generics.lt,
                   newtuple([traits.Number, traits.Number, ]),
                   newnativefunc(newsymbol(process, u"compare_lt_n_n"), wrappers.builtin_compare_lt_n_n, 2))

    specify_single(process, generics.bitnot,
                   newtuple([traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"bitnot_i"), wrappers.builtin_bitnot_i, 1))

    specify_single(process, generics.bitor,
                   newtuple([traits.Integer, traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"bitor_i_i"), wrappers.builtin_bitor_i_i, 2))

    specify_single(process, generics.bitxor,
                   newtuple([traits.Integer, traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"bitxor_i_i"), wrappers.builtin_bitxor_i_i, 2))

    specify_single(process, generics.bitand,
                   newtuple([traits.Integer, traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"bitand_i_i"), wrappers.builtin_bitand_i_i, 2))

    specify_single(process, generics.lsh,
                   newtuple([traits.Integer, traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"lsh_i_i"), wrappers.builtin_lsh_i_i, 2))

    specify_single(process, generics.rsh,
                   newtuple([traits.Integer, traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"rsh_i_i"), wrappers.builtin_rsh_i_i, 2))

    specify_single(process, generics.ursh,
                   newtuple([traits.Integer, traits.Integer, ]),
                   newnativefunc(newsymbol(process, u"ursh_i_i"), wrappers.builtin_ursh_i_i, 2))

    specify_single(process, generics.as_,
                   newtuple([traits.Any, traits.Any, ]),
                   newnativefunc(newsymbol(process, u"as_w_w"), wrappers.builtin_as_w_w, 2))

    specify_single(process, generics.kindof,
                   newtuple([traits.Any, traits.Any, ]),
                   newnativefunc(newsymbol(process, u"kindof_w_w"), wrappers.builtin_kindof_w_w, 2))

    specify_single(process, generics.is_,
                   newtuple([traits.Any, traits.Any, ]),
                   newnativefunc(newsymbol(process, u"is_w_w"), wrappers.builtin_is_w_w, 2))

    specify_single(process, generics.isnot,
                   newtuple([traits.Any, traits.Any, ]),
                   newnativefunc(newsymbol(process, u"isnot_w_w"), wrappers.builtin_isnot_w_w, 2))

    specify_single(process, generics.isa,
                   newtuple([traits.Any, traits.Any, ]),
                   newnativefunc(newsymbol(process, u"isa_w_w"), wrappers.builtin_isa_w_w, 2))

    specify_single(process, generics.nota,
                   newtuple([traits.Any, traits.Any, ]),
                   newnativefunc(newsymbol(process, u"nota_w_w"), wrappers.builtin_nota_w_w, 2))

    specify_single(process, generics.len,
                   newtuple([traits.Any, ]),
                   newnativefunc(newsymbol(process, u"len_w"), wrappers.builtin_len_w, 1))

    specify_single(process, generics.str,
                   newtuple([traits.Any, ]),
                   newnativefunc(newsymbol(process, u"str_w"), wrappers.builtin_str_w, 1))

    specify_single(process, generics.list,
                   newtuple([traits.Tuple, ]),
                   newnativefunc(newsymbol(process, u"plist_tuple"), wrappers.builtin_plist_tuple, 1))
