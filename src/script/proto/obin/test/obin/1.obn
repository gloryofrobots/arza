load tvar
load lib_az.abc.module_ab as ab
load lib_az.efg.module_e as e

trait (A, B, C, D)
trait G
trait G1
module m1
    module m3
        func f_3() -> "f_3" end
    end

    func f_1() -> "f_1" end

    generic g_1(self of Integer) ->
        if self < 10
            "< 10"
        elif self == 10
            "== 10"
        else
            "> 10"
        end
    end
end

module m2
    func f_2() -> "f_2" end
end

generic _and_
    case (t of True, f of True) ->
        true
    case (t of Boolean, f of Boolean) ->
        false
end


specify _and_ (i of Integer, i of Float) ->
    false
end

specify _and_
    case (i of String, i of Integer) ->
        true
end

trait Animal
trait Human
trait Wolf
trait Bacteria
trait Alice
trait Insectoid
trait MegaPihar
trait Galvanizator

generic `-=-=-=`(self of Animal) ->
    print("I am animal", self.name)
end
//
specify `-=-=-=`(self of Human) ->
    print("I am nice human",self.name, self.surname)
end

func main() ->
    print("IN MAIN NOW")
    x = ab.f_ab(312)
    x = e.f_e(x)

    v1 = tvar.create(:IAmTVar)
    print(v1)
    {gen_ab, f_ab, f_ab_2, CONST=const} = ab

    print(A,B,C,D,G)
    print(gen_ab, f_ab, f_ab_2, const)
    print(m1, m2, m1.m3)
    print(m1.f_1(), m1.m3.f_3(), m2.f_2())
    print(m1.g_1(12))

    func test_eq(str, val, expected) ->
        print("test -> ","'" + str + "'", val, val == expected)
        if val != expected
            throw "Test error"
        end
    end

    x = 1
    test_eq("x = 1", x, 1)

    x = "Hello"
    test_eq("x = 'Hello'", x, "Hello")

    x = 42.234433444
    test_eq("x = 42.234433444", x, 42.234433444)

    x = (1, "Hello", 35.44555)
    print(x)
    print(x[1])

    x = (42,)
    print(x)

    x = (1,2, ["Alice", "Bob", (45,), 54.000000001])
    print(x)

    x = {name= "XXX"}
    print(x.name)

    print((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Bob"})

    x = true
    print(x)

    x = false
    print(x)

    x = { name="X", age=42.24 }
    print(x)

    x = 1
    y = 0
    print("x = ", x, "y = ", y)

    print("x or y", x or y)

    print("x and y", x and y)
    print("not y", not y)
    print("~ y", ~ y)
    print("~ y", ~ y)


    print("x | y", x | y)
    print("x & y", x & y)
    print("x ^ y", x ^ y)


    print("true when 5 > 4 else false", true when 5 > 4 else false)
    print("x is y", x is y)
    print("x isnot y", x isnot y)
    print("5 > 5", 5 > 5)
    print("5 >= 3", 5 >= 3)
    print("5 < 4", 5 < 4)
    print("5 <= 3", 5 <= 3)
    print("x != 6", x != 6)
    print("x == y", x == y)

    print("11 >> 43", 11 >> 43)
    print("11 << 10001", 11 << 10001)
    print("11 >>> 1001001001", 11 >>> 1001001001)
    print("x + 34", x + 34)
    print("x - 34", x - 34)
    print("x * 34", x * 34)
    print("x / 45", x / 45)
    print("x % 32", x % 32)


    x = `+`(1,2)
    print(x)
    x = `+`(1.0,2.0)
    print(x)
    x = `+`(1,2.0)
    print(x)

    A = [1,2,3,4,5,6]
    print(length(A))

    A = [0, 1, 2, x]
    print(x,"in",A, x in A)

    ////////////////////////////////////////////////////////////////////////////

    print(_and_(true, true))

    print(_and_(true, false), _and_(false, true),  _and_(true, true))

    print(_and_(1, 1.0), _and_("hhh", 1))

    ////////////////////////////////////////////////////////////////////////////

    f1 = func (a,b,c) ->
        print(a, b, c)
    end

    f1(1,2,3)

    func f2() -> print("func() ->  end") end
    f2()

    func f3 -> print("func ->  end") end
    f3()

    func f4(a,b,c,...rest) ->
        print(a,b,c,rest)
    end

    f4(1,2,3,4,5,6)

    func f5(x, (y,z), a, b, {name=name, age=(years, month)}, ...rest) ->
        print("x",x, "(y,z)", (y,z),
                "a", a,"b",b,"{name=name, age=(years, month)}", name, years, month,"rest", rest )
    end
    f5(1, (2,3), 4,5, {name=6, age=(7,8)}, 9,10,11,12)

    ////////////////////////////////////////////////////////////////////////////
    func Human_New(name, surname) ->
        {name=name, surname=surname} isa [Human, Animal]
    end
    //
    func Wolf_New(name) ->
        {name=name} isa [Wolf, Animal]
    end

    print(Human)


    h = Human_New("Bob", "Alice")
    w = Wolf_New("Jack")
    `-=-=-=`(h)
    `-=-=-=`(w)

    print(h)


    A = [1,2,3,4,5]
    print(A)

    ///////////////////////////////////////////////////////////////////////////

    co = coroutine(
            func(yield, x) ->
                   Z = "1111"
                   _co1 = coroutine(
                        func(yield2, y) ->
                           Y = "2222"
                           func send() ->
                                X = "3333"
                                yield2(42 + y)
                           end
                           send()
                        end)

                print("x", x)
                v = _co1(x)
                t = yield(v)
                print("t", t)
                x = yield(t)
                print("x", x)
                return x
            end)

    print(co(23))
    print(co(34))
    print(co(44))

    ////////////////////////////////////////////////////////////

    func ff1(a,b,...c) ->  1 end
    print(_and_, ff1)

    x = 12


    print(
    if x == 13
        1 + 1;
    elif x == 14
        2 + 2;
    elif x == 15
        3 + 3;
    else
        4 + 4;
    end
    )


    A = (1,2,3,4,5,6)
    for x in A
        print(x) end

    x = 10
    while x > 0
        x = x - 1
        print(x) end

    // ONE LINE
    x = 12
    print(
    if x == 13; 1 + 1; elif x == 14; 2 + 2; else 4 + 4; end
    )

    x = 10
    while x > 0; x = x - 1; print(x); end

    for i in range(10,20); print(i) end

    A = (1, 2, 3, 4, 5, 6, 35, 110, 122)
    for a in A
        if a == 35
           continue
        end

        if a > 115
            if 1 < 2
                break
            end
        end
        print(a)
    end

    x = 20
    while x > 0
        x = x - 5
        if x == 10
            print("SKIP", x)
            continue
        end
        print("X", x)
    end

    print ("**************************************************************************")

    //////////////////////////////////////////////////////////////////////////

    metadata = {
        title= "Nemesis Games",
        subject= "SCIFI",
        translationsUa={title="IGRU DOLI", translator="PILIP LUN" },
        translationsEn={ titleEn=("GAMES OF NEMESIS", "NEMESIS GAMES"), translatorEn="Jhon DOU" },
        author= ("James", "Corey")
    }


    print(metadata.title, metadata.subject, metadata.translationsUa["title"], metadata.translationsUa.translator,
          metadata.translationsEn.titleEn,  metadata.translationsEn.translatorEn, metadata.author)

    print ("**************************************************************************")

    {
        title=englishTitle,
        subject,
        translationsUa={ title=localeTitle, translator },
        translationsEn={ titleEn=(localeTitleEn, origTitleEn), translatorEn },
        author=author_data
    } = metadata;

    print(englishTitle, subject, localeTitle,translator,(localeTitleEn, origTitleEn), translatorEn, author_data )

    print ("**************************************************************************")

    //print(Z, X)


    T = match (1, (23, (24, 25)))
            case (Z, (G, 1)) ->  12 + Z
            case (1, 23) ->   11
            case (1, (23, X)) ->   11
            case _ ->  nil
    end
    A = [(1,2), (2,3,4), 5, [6,7,8]]
    print(
    match A
        case [a,b,c] ->  (a, b, c)
        case [a, b] ->  (a,b)
        case (x, y, z) ->  (x, y, z)
        case [(1, X), Y, 5, [6,7, Z]] ->  (X, Y, Z)
        case _ ->  123
    end
    )

    A = {name="Bob", surname=("Alice", "Dou"), age=42}
    print(A)
    print(
    match A
        case {name="Bob2", age=42} ->  (name, age)
        case {name="Bob", surname="Alice"} ->  (name, surname)
        case {name="Bob", surname=("Alice", "Dou")} ->  (surname, name)
        case _ ->  42
    end
    )
    print(
    match A
        case {age=41, names} ->  (name, age, 0)
        case {name, age=41} ->  (name, age, 1)
        case {age=42} ->  (age, 2)
        case _ ->  42
    end
    )


    print("name" == :name)
    print(:name == "name")
    print(:`++++ ---- <> $$` == "++++ ---- <> $$")
    print("++++ ---- <> $$" == :`++++ ---- <> $$`)

    m = {name = "Alice", :surname="Bob",
            :child={
                :little_name="Sweetie",
                :toy={
                    :model="SXR 123344:44332"
                }
             }
     }
    print(m.name)
    print(m[:child][:toy][:model])
    print(m.child.toy.model)

    func error(reason) ->
        throw (:error, {reason=reason}) end

    x =
    try
        print("IN TRY")
        error(:TestError)
    catch e
        print("CATCH")
        print(e)
    finally
        print("Finally")
        42
    end

    print(x)

    //nil(1,2)
    //error(:BadAss)
    //# asds

    M = {
        line = {
            data = [1,2,3,4],
            index = 1
        },

        id = 12
    }
    print(M)
    M1 = M {
        line = M.line {
            index_2 = M.line.index + 42,
            data = [4, 3, 2, 1]
        },
        id = "ID M1"
    }
    print(M1)

    common = {height=187, weight=60}
    print(common)
    alice = common{age = 28, name="Alice"}
    bob = common{age = 29, name="Bob", height=225}
    print(alice)
    print(bob)
    print(common)


    match (1, 2, 3)
        case (A, x, A)  -> 24
        case (3, A) -> 42
    end

    L = [1,2,3,4,5]
    l1 = L{0=102, 1=103, 4=105}


    func Human_New(name, surname) ->
        {name=name, surname=surname} isa  [Human, Animal]
    end

    h = Human_New("X", "Y")

    print(kindof(h, Map))
    print(kindof(h, Bacteria))
    print(kindof(h, Human))
    print(kindof(Bacteria, Any))
    print(kindof(Bacteria, Trait))
    print(kindof(Human, Trait))


    alice = {name = "Alice", age = 42} isa Alice
    alice2 = alice isa [Insectoid, MegaPihar, Galvanizator]
    alice3 = alice2 nota Alice
    alice4 = alice2 nota [Insectoid, Galvanizator]

    print(alice, traits(alice))
    print(alice2, traits(alice2))
    print(alice3, traits(alice3))
    print(alice4, traits(alice4))


    try
        print(asdsadasda)
    catch e
        print(e)
    finally
        Galvanizator
    end
end
