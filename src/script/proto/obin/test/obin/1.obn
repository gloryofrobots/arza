load tvar
load lib_az.abc.module_ab as ab
load lib_az.efg.module_e as e

trait (A, B, C, D)
trait G
trait G1
module m1
    module m3
        func f_3() -> "f_3" end
    end

    func f_1() -> "f_1" end

    generic g_1(self of Integer) ->
        if self < 10
            "< 10"
        elif self == 10
            "== 10"
        else
            "> 10"
        end
    end
end

module m2
    func f_2() -> "f_2" end
end

func main() ->
    v1 = tvar.create(:IAmTVar)
    print(v1)
    {gen_ab, f_ab, f_ab_2, CONST=const} = ab

    print(A,B,C,D,G)
    print(gen_ab, f_ab, f_ab_2, const)
    print(m1, m2, m1.m3)
    print(m1.f_1(), m1.m3.f_3(), m2.f_2())
    print(m1.g_1(12))
    co = coroutine(
            func(yield, x) ->
                   Z = "1111"
                   _co1 = coroutine(
                        func(yield2, y) ->
                           Y = "2222"
                           func send() ->
                                X = "3333"
                                yield2(42 + y)
                           end
                           send()
                        end)

                print("x", x)
                v = _co1(x)
                t = yield(v)
                print("t", t)
                x = yield(t)
                print("x", x)
                return x
            end)

    print(co(23))
    print(co(34))
    print(co(44))
end

