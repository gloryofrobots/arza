fun range
| first of Int, last of Int ->
    if last < 0
        step = - 1
    else
        step = 1
    range first, last, step
| first of Int, last of Int, step of Int ->

    fun _range
    | N X D L when N >= 4 ->
        Y = X - D
        Z = Y - D
        W = Z - D
        _range N - 4 W - D D (W :: Z :: Y :: X :: L)
    | N X D L when N >= 2 ->
        Y = X - D
        _range N - 2 Y - D  D (Y :: X :: L)
    | 1  X  _  L ->
        X :: L
    | 0  _  _  L -> L
    ------------------------------------------

    condition
    | step > 0 and first - step <= last or step < 0 and first - step >= last ->
        n = ((last - first + step) / step) - 1
        _range(n, step * (n - 1) + first, step, [])
    | step == 0 and first == last ->
        _range 1  first  step  []
    otherwise -> throw (#InvalidRange, first, last, step)
    -------------------------------------------------
------------------------------------------------------------------------


@sig Callable _ List
def foldr
| f acc [] -> acc
| f acc [hd, ...tl] ->
    try
        f hd (foldr f acc tl)
    catch (#ReducedValue, val) ->
        val
    catch e ->
        throw e
    finally
        throw e
    ---
-----------------------------------------------------

def scanl(f of Callable, init_val, l of List) ->
    fun _scanl
    | f  acc [] -> acc::[]
    | f  acc  [hd, ...tl] -> acc :: (_scanl f  (f hd  acc) tl)
    -------------------

    try
        _scanl f, init_val, l
    catch e ->
        on_reduced(e)
    ---
----------------------------------------

sig! Callable List
def map
| f []  -> []
| f [hd, ...tl] -> f hd :: (map f tl)
------------------------------------

def conjunction l of List -> foldr (\v acc -> v and acc) true l
---

def disjunction(l of List) -> foldr (\v acc -> v or acc) false l
---

def disjunction(l of List) -> foldr fun _ v acc -> v or acc end false l
---

def any(p, l of List) ->  disjunction (map p  l)
---

def all(p, l of List) ->  conjunction (map p l)
---

def element(x, l of List) ->  any (\v -> v == x) l
---

def contains(l of List, x) ->  element x l
---
