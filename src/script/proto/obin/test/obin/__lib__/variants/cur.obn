def range
    case (first of Int, last of Int) ->
        if last < 0
            step = - 1
        else
            step = 1;
        range(first, last, step)
    ///////////////////////////////////////
    case (first of Int, last of Int, step of Int) ->
        fun _range
            case (N, X, D, L) when N >= 4 ->
                Y = X - D
                Z = Y - D
                W = Z - D
                _range(N - 4, W - D, D, W :: Z :: Y :: X :: L)
            case (N, X, D, L) when N >= 2 ->
                Y = X - D
                _range(N - 2, Y - D, D, Y :: X :: L)
            case (1, X, _, L) ->
                X :: L
            case (0, _, _, L) -> L;

        if step > 0 and first - step <= last or
            step < 0 and first - step >= last
            n = ((last - first + step) / step) - 1
            _range(n, step * (n - 1) + first, step, [])
        elif step == 0 and first == last
            _range(1, first, step, [])
        else
            throw (#InvalidRange, first, last, step)
        end
end
