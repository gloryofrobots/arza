@infix + Number:add

type Int {use PrimitiveInt}

type BigInt {use PrimitiveBigInt}

type Zero {use Int}

trait Number
    generic is_zero _  -> false
    generic add _ a
implement
    for Int
        specify add
        | self of Int, i of BigInt -> (int_to_big_int self) + i
        | self of Int, i of Int -> int_add self i

    for BigInt
        specify add
        | self of BigInt, i of Int -> add self (int_to_big_int i)
        | self of BigInt, i of BigInt -> big_int_add self i

    for Zero
        specify is_zero self of _ -> true
        specify add
        | self of Zero i of Number -> i
        | i of Number, self of Zero -> i
-----------------------------------------

///////////////////////////////////

trait Number

type Int {use PrimitiveInt} implement Number

type BigInt {use PrimitiveBigInt} implement Number

type Zero implement Number

@infix + Number:add

generic is_zero
| self of Int  -> false
| self of BigInt  -> false
| self of Zero  -> true
-------------------

generic add
| self of Int, i of BigInt -> (int_to_big_int self) + i
| self of Int, i of Int -> int_add self i
| self of BigInt, i of Int -> add self (int_to_big_int i)
| self of BigInt, i of BigInt -> big_int_add self i
| self of Zero i of Number -> i
| i of Number, self of Zero -> i
--------------------------------------------

