def assert_equal_batch(fn, ...calls) ->
    _batch(assert_equal, fn, calls);

def _batch(checker, fn, calls) ->
    for call in calls
        checker(apply(fn, call[0]), call[1])
    ;;

def fail(error) ->
    throw error;

def assert_not_equal(val1, val2) ->
    if val1 == val2
        fail([val1, "==", val2])
    else
        true
    end
end



def assert_equal
    case (val1 of Float, val2 of Float) ->
        assert_equal_float(val1, val2)
    case (val1, val2) ->
        if val1 != val2
            fail([val1, "!=", val2])
        else
            true;
end

def _abs(v) ->
    if v < 0
        -1 * v
    else
        v
    ;;

def assert_equal_float
    case (val1, val2) -> assert_equal_float(val1, val2, 0.0001)
    case (val1, val2, delta) ->
        try
            assert_true(_abs(val1) - _abs(val2) < delta)
        catch e
            fail([val1, "!=", val2])
        end
end

def assert_is(val1, val2) ->
    if val1 isnot val2
        fail([val1, "isnot", val2])
    else
        true
    ;;


def assert_true(val1) ->
    assert_is(val1, true);

def assert_false(val1) ->
    assert_is(val1, false);


def assert_throw(fn, args) ->
    try
        apply(fn, args)
        fail(["exception expected", fn])
    catch e
        e
    ;;

def assert_throw_expected(fn, args, exc) ->
    assert_equal(assert_throw(fn, args), exc);
