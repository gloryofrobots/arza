load tvar
@prefix(`-`, `__uminus__`)
@prefix(`+`, `__plus__`)
@prefix(`~`, `~`)
@infixr(`|`, `|`, 35)
@infixr(`^`, `^`, 45)
@infixr(`&`, `&`, 45)
@infixl(`<`, `<`, 50)
@infixl(`>`, `>`, 50)
@infixl(`>=`, `>=`, 50)
@infixl(`<=`, `<=`, 50)
@infixl(`==`, `==`, 50)
@infixl(`!=`, `!=`, 50)
@infixl(`<<`, `<<`, 55)
@infixl(`>>`, `>>`, 55)
@infixl(`>>>`, `>>>`, 55)
@infixl(`+`, `+`, 60)
@infixl(`-`, `-`, 60)
@infixl(`%`, `%`, 65)
@infixl(`*`, `*`, 65)
@infixl(`/`, `/`, 65)
@infixr(`::`, `::`, 70)
@infixl(`++`, `++`, 70)

//TODO FIX IT
length = ___length

//TODO
//Symbols can also be created using symbol(),
//which takes any number of arguments and creates a new symbol by concatenating their string representations together:

def coroutine(fn) ->
    (fiber1, fiber2) = spawn_fiber()

    first_call = tvar.create(false)

    fun(...args) ->
        if tvar.read(first_call) is false
            tvar.swap(first_call, true)
            activate_fiber(fiber2,
                    fun ->
                        apply(fn, concat((fiber1, ), args)) end)
        else
            apply(fiber2, args)
        end
    end
end

