// TODO REMOVE for and add support for () args
fun is_equal_batch fn ...calls ->
    _batch is_equal fn calls
---

fun _batch checker fn calls ->
    for call <- calls
        checker (apply fn call.[0])  call.[1]
    ---
---


fun fail error ->
    throw (#AffirmationError, error);
---

fun is_not_equal val1 val2 ->
    condition
    | val1 == val2 -> fail [val1, "==", val2]
    | otherwise ->  true
    ---
---

fun is_equal
| val1 of Float  val2 of Float -> is_equal_float val1 val2
| val1 val2  ->
    condition
    | val1 != val2 -> fail [val1, "!=", val2]
    | otherwise -> true
    ---
---

fun _abs v ->
    condition
    | v < 0 -> - 1 * v
    | otherwise -> v
    ---
---

fun is_equal_float
| val1 val2 ->
    is_equal_float val1, val2, 0.0001
| val1 val2 delta ->
    try
        is_true ((_abs val1) - (_abs val2)) < delta
    | e ->
        fail [val1, "!=", val2]
    ---
---

fun is_same val1 val2 ->
    condition
    | val1 `isnot` val2 -> fail [val1, "isnot", val2]
    | otherwise -> true
    ---
---

fun isnot_same val1 val2 ->
    condition
    | val1 `is` val2 -> fail [val1, "is", val2]
    | otherwise -> true
    ---
---

fun is_true val1 -> is_same val1 true
---

fun is_false val1 -> is_same val1 false
---

//apply needed tuple of arguments
// so we need to convert () to ((),)

type Success val
---

fun is_throw
| fn () -> is_throw fn [()]
| fn args ->
    match
        try
            apply fn args
            Success true
        | e ->
            e
        ---
    | _ of Success -> fail ["exception expected", fn]
    | err -> err
    ---
---

fun is_throw_expected fn args exc ->
    is_equal (is_throw fn args) exc
---
