def is_equal_batch(fn, ...calls) ->
    _batch(is_equal, fn, calls);

def _batch(checker, fn, calls) ->
    for call in calls
        checker(apply(fn, call[0]), call[1])
    ;;

def fail(error) ->
    throw (:AffirmationError, error);

def is_not_equal(val1, val2) ->
    if val1 == val2
        fail([val1, "==", val2])
    else
        true
    ;;


def is_equal
    case (val1 of Float, val2 of Float) ->
        is_equal_float(val1, val2)
    case (val1, val2) ->
        if val1 != val2
            fail([val1, "!=", val2])
        else
            true
    ;;

def _abs(v) ->
    if v < 0
        -1 * v
    else
        v
    ;;

def is_equal_float
    case (val1, val2) -> is_equal_float(val1, val2, 0.0001)
    case (val1, val2, delta) ->
        try
            is_true(_abs(val1) - _abs(val2) < delta)
        catch e
            fail([val1, "!=", val2])
     ;;

def is_same(val1, val2) ->
    if val1 isnot val2
        fail([val1, "isnot", val2])
    else
        true
    ;;

def isnot_same(val1, val2) ->
    if val1 is val2
        fail([val1, "is", val2])
    else
        true
    ;;

def is_true(val1) ->
    is_same(val1, true);

def is_false(val1) ->
    is_same(val1, false);


def is_throw(fn, args) ->
    try
        apply(fn, args)
        fail(["exception expected", fn])
    catch e
        e
    ;;

def is_throw_expected(fn, args, exc) ->
    is_equal(is_throw(fn, args), exc);
