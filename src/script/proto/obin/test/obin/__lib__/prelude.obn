//TODO FIX IT
length = ___length
//TODO
//open types
//CONTEXSTS LIKE ELA
//Symbols can also be created using symbol(),
//which takes any number of arguments and creates a new symbol by concatenating their string representations together:
// True False None
// lam

@prefix - negate
@infixl < < 50
@infixl > > 50
@infixl >= >= 50
@infixl <= <= 50
@infixl == == 50
@infixl != != 50
@infixl + + 60
@infixl - - 60
@infixl % % 65
@infixl * * 65
@infixl / / 65
@infixr :: :: 70
@infixl ++ ++ 70

//fun foo () -> 1 + 2 end

//trait Num self
//    method is_zero self
//    method add self a
//----

implement Num for Point2
    method is_zero
        | self -> self.x == 0 and self.y == 0
    method add
        | self p2 of Point2 -> Point2 (self.x + p2.x) (self.y + p2.y)
        | self v of Vec2 -> add (Vec2 self) v
---------------------------

//type Maybe val
//---------------
//
//type Maybe2 val
//    construct
//    | val
//    end
//end

//type Zero end
//
//type Point2 x y
//    construct
////    | x y
////    | x -> y = x
//    | {x, y}
//    -------------
//---------

//type Vec2 p1 p2
//    construct
//    | p1 of Point2, p2 of Point2
//    | x1 y1 x2 y2 -> p1 = Point2 x y; p2 = Point2 x2 y2;
//    | p2 @ p1
//    -----------
//


////union Option = None | Some v

//fun main () ->
//    p1 = Point2 1 2
//    v1 = Vec2 p1
//    v2 = Vec2 (Point2 2 3) (Point2 4 5)
//    v3 = add v1 v2
//------------
