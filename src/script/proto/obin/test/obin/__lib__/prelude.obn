//TODO FIX IT
length = ___length
//TODO
//TODO open types
//TODO CONTEXSTS LIKE ELA
//TODO Symbols can also be created using symbol(),
//TODO which takes any number of arguments and creates a new symbol by concatenating their string representations together:
//TODO True False None
//TODO lam
//TODO of in {literal}
//TODO SUPPORT RECURSIVE CONSTRUCTORS AT THE LEVEL OF PARSER (NOT PUSH FENV FOR SUCH CALLS)
//TODO default implementation
//TODO impls without |
// TODO trait for

// TODO error here 2 % 0

@prefix - negate
@infixl < < 50
@infixl > > 50
@infixl >= >= 50
@infixl <= <= 50
@infixl == == 50
@infixl != != 50
@infixl + + 60
@infixl - - 60
@infixl % % 65
@infixl * * 65
@infixl / / 65
@infixr :: :: 70
@infixl ++ ++ 70

//trait Equal x
//    method eq x y -> not (ne x y)
//    method === x y
//    method ====== x y
//    method ne x y -> not (eq x y)
//    method ===== x y
//---
//
//
//trait Add x
//    method add x y
//    method sub x y
// --------------------------------------------------
//
//
//trait Order x
//    method le x y -> (cmp x y) != GT
//    method lt x y -> (cmp x y) == LT
//    method ge x y -> (cmp x y) != LT
//    method gt x y -> (cmp x y) == GT
//    method cmp x y ->
//        cond
//        | x == x -> EQ
//        | x <= y -> LT
//        | else -> GT
//        ---
//
//    method max x y ->
//        cond
//        | x <= y -> y
//        | else -> y
//        ----
//
//    method min x y ->
//        cond
//        | x <= y -> x
//        | else -> y
//        -------
//-----
//fun foo () -> 1 + 2 end

//fun main () ->
//    p1 = Point2 1 2
//    v1 = Vec2 p1
//    v2 = Vec2 (Point2 2 3) (Point2 4 5)
//    v3 = add v1 v2
//------------
