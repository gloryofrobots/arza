//import lib_az:efg:module_f
@prefix(`-`, `__uminus__`)
@prefix(`+`, `__plus__`)
@prefix(`~`, `~`)
//@infixr(`|`, `|`, 35)
@infixr(`^`, `^`, 45)
@infixr(`&`, `&`, 45)
@infixl(`<`, `<`, 50)
@infixl(`>`, `>`, 50)
@infixl(`>=`, `>=`, 50)
@infixl(`<=`, `<=`, 50)
@infixl(`==`, `==`, 50)
@infixl(`!=`, `!=`, 50)
@infixl(`<<`, `<<`, 55)
@infixl(`>>`, `>>`, 55)
@infixl(`>>>`, `>>>`, 55)
@infixl(`+`, `+`, 60)
@infixl(`-`, `-`, 60)
@infixl(`%`, `%`, 65)
@infixl(`*`, `*`, 65)
@infixl(`/`, `/`, 65)
@infixr(`::`, `::`, 70)
@infixl(`++`, `++`, 70)

//TODO FIX IT
//length = ___length

//TODO
//Symbols can also be created using symbol(),
//which takes any number of arguments and creates a new symbol by concatenating their string representations together:


def main _ ->
    [1,2,3,4, (foo 1 2 3), 5]
---


//def map
//| f [] -> []
//| f [hd, ...tl] -> f hd :: (map f tl)
//-------------------------------------
//    match (1,2,3)
//    | (x, y, z) when z == 2 -> #first
//    | (x, y, z) when z == 3 and y == 3 -> #second
//    | (x, y, z) when z == 3 and y == 2 and x == 3 -> #third
//    | (x, y, z) when z == 3 and y == 2 and x == 1 and A == 2 -> #fourth
//    | (x, y, z) when z == 3 and y == 2 and x == 1 and not A is true and greater_then_ten 9 -> #fifth
//    | (x, y, z) when z == 3 and y == 2 and x == 1 and A is true or greater_then_ten 11 -> #sixth
//    | _ -> 12
//    -------------------------------------------------------------------------------------------------
