load testit
//load tests.test_base
//load tests.test_co
//load tests.test_destruct
//load tests.test_exception
//load tests.test_def
//load tests.test_generic
//load tests.test_match
//load tests.test_modify
//load tests.test_module
//load tests.test_trait

//def fact
//    case (0) -> 1
//    case (n) -> n * fact(n - 1);
//
//def func1
//    case (1,2,3,4,5,var0, var1, var2, ...var4) -> (var0, var1, var2, var4)
//    case ({key1, var1 @ key2, key3=25}, [var2, :second, var3 @ :third, ...var4]) -> (var1, var2, var3, var4)
//    case (var6, var7) -> var6 + var7
//    case (42) -> "Main question answer"
//    case (_) -> :nothing;

def func2
    case (a,b,c) -> (:first, a, b, c)
    case (a, b) -> (:second, a, b)
    case (a) -> (:third, a)
    case () -> (:fourth)
    case () -> (:fourth)
end

def main() ->
    {assert_equal, assert_equal_batch} = testit
    assert_equal_batch(
              func2,
              ((1,2,3), (:first, 1,2,3)),
              ((4,5), (:second, 4,5)),
              ((6,), (:third, 6))
    )
    assert_equal(func2(), :fourth)
//    assert_equal(func1(1,2,3,4,5,6,7,8,9,10,11),
//                    (6, 7, 8, (9, 10, 11)))
//    assert_equal(
//        func1({key1=:key1, key2=:key2, key3=25}, [:first, :second, :third, 4,5,6,7])
//        ,(:key2, :first, :third, [4, 5, 6, 7]))
//
//    assert_equal(fact(7), 5040)
      assert_equal_batch
//    test_base.test()
//    test_co.test()
//    test_destruct.test()
//    test_exception.test()
//    test_def.test()
//    test_generic.test()
//    test_match.test()
//    test_modify.test()
//    test_module.test()
//    test_trait.test()
;
