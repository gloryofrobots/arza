import affirm

fun test() ->
    affirm:is_equal false false
    affirm:is_equal true true
    affirm:is_not_equal true false
    affirm:is_not_equal false true
    affirm:is_equal (not false) true
    affirm:is_equal (not true) false
    affirm:is_true true and true
    affirm:is_false false and true
    affirm:is_false false and false
    affirm:is_false true and false
    affirm:is_true true or false
    affirm:is_true false or true
    affirm:is_false false or false
    affirm:is_same false false
    affirm:is_same true true
//
    //only true and false can be used in boolean operators
    affirm:is_throw (fun t_or | x -> 1 or 0 end) ()
    affirm:is_throw_expected (fun t_or | x -> 1 or 0 end) () (#NotImplementedError, (#_tobool_, 1))

    affirm:is_throw lam x -> 1 and 0; ()
    affirm:is_throw lam x -> not 0; ()
    affirm:is_throw lam x -> not {}; ()
    affirm:is_throw lam x -> not ""; ()
    affirm:is_throw lam x -> not []; ()
    affirm:is_throw lam x -> not (); ()
    affirm:is_throw lam x -> not 1.2; ()
    affirm:is_throw lam x -> not #symbol; ()

    x = 0
    y = 1
    affirm:is_false x is y
    affirm:is_true x isnot y
end

