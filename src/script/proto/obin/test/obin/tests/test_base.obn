import affirm

fun test () ->
    t1 = (1, "Hello", 35.44555)
    affirm:is_equal t1, (1, "Hello", 35.44555)
    affirm:is_equal t1.[0] 1
    affirm:is_equal t1.[1] "Hello"
    affirm:is_equal t1.[2] 35.44555
    affirm:is_equal (1, "Hello", 35.44555).[2],  35.44555
    affirm:is_equal (1,2, ["Alice", "Bob", (45,), 54.000000001]).[2] ["Alice", "Bob", (45,), 54.000000001]

    affirm:is_equal (1,2, ["Alice", "Bob", (45,), 54.000000001]).[2] ["Alice", "Bob", (45,), 54.000000001]

    m1 = {name="XXX"}
    affirm:is_equal {name="XXX"}.name "XXX"
    affirm:is_equal m1.name "XXX"
    affirm:is_not_equal m1.name, "YYY"

    t2 = ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Bob"})

    affirm:is_equal t2 ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Bob"})
    affirm:is_not_equal t2 ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Alice"})
    affirm:is_equal t2 t2

    affirm:is_true true if 5 > 4 else false
    affirm:is_false true if 5 < 4 else false
    affirm:is_false true if 5 == 4 else false
    affirm:is_equal (42 * 2 if 13 == 12 else 12 * 2 if 13 == 14 else 1) 1

    a2_4 = #four
    a2 = [0, 1, 2, a2_4]
    affirm:is_true #four in a2
    affirm:is_true a2_4 in a2

    affirm:is_equal "name" #name
    affirm:is_equal #name "name"
    affirm:is_equal #"++++ ---- <> $$" "++++ ---- <> $$"
    affirm:is_equal "++++ ---- <> $$" #"++++ ---- <> $$"

    x = 12
    affirm:is_equal condition
                    | x == 13 -> 1 + 1
                    | x == 14 -> 2 + 2
                    | x == 15 -> 3 + 3
                    | otherwise -> 4 + 4
                    ---,
                    8


    A = (1,2,3,4,5,6)
    l = []
    for x in A
        l = x :: l
    ---
    affirm:is_equal l [6,5,4,3,2,1]

    for x1 in range 10 20; l = x1 :: l end
    affirm:is_equal l [19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 6, 5, 4, 3, 2, 1]

    A = (1, 2, 3, 4, 5, 6, 35, 110, 122)
    l1 = []
    for a in A
        when a == 35
           continue
        ---

        when a > 115
            when 1 < 2
                break
            ---
        ---
        l1 = a :: l1
    ---

    affirm:is_equal l1 [110, 6, 5, 4, 3, 2, 1]
end

