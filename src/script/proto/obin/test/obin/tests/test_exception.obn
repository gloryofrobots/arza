import affirm

fun test () ->
    fun error reason ->
        throw (#error, {reason=reason}) end

    fun error2 reason ->
        lambda x -> error reason; ()
    end


    e1 =
    try
        try
            1/0
        | e1 ->
            throw e1
        ---
    | e2 ->
        try
            error(#LifeSucks)
        | e3 ->
            //result
            e3
        ---
    ---
    affirm:is_equal e1 (#error, {reason=#LifeSucks})

    //////////////////////////////////////////////////////////////

    affirm:is_equal (
        try
            try
                1/0
            | e1 ->
                //result
                e1
            ---
        | e2 ->
            try
                error(#LifeSucks)
            | e3 ->
                e3
            ---
        end) (#ZeroDivisionError, (1, 0))


    ///////////////////////////////////////////

    affirm:is_equal (
        try
            try
                1/0
            | e1 ->
                e1
            | finally ->
                //result
                (#Finally, e1)
            ---
        | e2 ->
            try
                error(#LifeSucks)
            | e3 ->
                e3
            ---
        end) (#Finally, (#ZeroDivisionError, (1, 0)))


    ///////////////////////////////////////////

    affirm:is_equal (
        try
            try
                1/0
            | e1 ->
                e1
            | finally ->
                error2(#Finally)
            ----------
        | e2 ->
            try
                error(#Catch)
            | e3 ->
                42
            | finally ->
                //result
                (e2, e3)
            -------------
        end) ((#error, {reason=#Finally}), (#error, {reason=#Catch}))

    ///////////////////////////////////////////

    affirm:is_throw_expected (
        fun | () ->
            try
                try
                    1/0
                | e1 ->
                    e1
                | finally ->
                    error2(#Finally)
                ---
            | e2 ->
                try
                    error(#Catch)
                | e3 ->
                    42
                | finally ->
                    //uncatched
                    throw (e2, e3)
                ---
            ---
        end) () ( (#error, {reason=#Finally}), (#error, {reason=#Catch}) )

    /////////////////////////////////////////////

    affirm:is_throw_expected(
        fun
        | arg1 arg2 ->
            try
                1/0
            | e ->
                throw (arg1, arg2)
            | finally ->
                throw e
            ---
        end) (33, 22) (33, 22)

    affirm:is_equal try throw (1,2,"ERROR")
                    | err @ (1, y, 3) -> #first
                    |(1,2, "ERROR@") -> #second
                    | err @ (1, 2, x) -> #third
                    | finally -> (#fourth, err, x)
                    -------------------------------,
                    (#fourth, (1, 2, "ERROR"), "ERROR")
--------------------------------------------------------------
