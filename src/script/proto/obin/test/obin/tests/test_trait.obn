import affirm

type Zero
--------

type Point2 x y
    construct
    | {x, y}
    | (x, y)
    | x -> y = x
    | x y
    -------------
-----------------

trait Add self
    method is_zero self
    method add self a
    method !! self
--------------------


implement Add for Point2
    method is_zero
        | self -> self.x == 0 and self.y == 0
    method add
        | self p2 of Point2 -> Point2 (self.x + p2.x) (self.y + p2.y)
        | self i of Int -> Point2 (self.x + i) (self.y + i)
-----------------------------------------------------

implement Eq for Point2
    method ==
        | self other -> self.x == other.x and self.y == other.y
    method !=
        | self other -> not (self == other)
--------------------------------------------------

// TODO error here 2 % 0
fun test () ->
    p = Point2 0 1
    p1 = Point2 42
    print (Point2 0 1) (Point2 42) (Point2 {x=33, y=34})
    print (add p 4)
    print (add p p1)
    print p == p1
    print p == p
    print p == (Point2 0 1)
--------------------------------------------------
