from jinja2 import Template, Environment
# env = Environment(trim_blocks=True)

def render(body, data):
    tpl = Template(body, trim_blocks=True, lstrip_blocks=True)
    return tpl.render(data)

def trait(name, varname, methods):
    t = dict(name=name, varname =varname, methods=methods)
    for m in methods:
        m["trait"] = t
    return t


def method(name, funcname, signature, hotpath):
    return dict(name=name, funcname=funcname, signature=signature, hotpath=hotpath)



TRAITS = [
    trait("Any", "self", [
        
    ]),


     trait("Eq", "self", [
           method("eq", "==", ["self", "other"], "hp_eq"),
           method("ne", "!=", ["self", "other"], "hp_ne"),
        ]),


    trait("Ord", "self", [
            method("gt", ">", ["self", "other"], "hp_gt"),
            method("ge", ">=", ["self", "other"], "hp_ge"),
            method("le", "<=", ["self", "other"], "hp_le"),
            method("lt", "<", ["self", "other"], "hp_lt"),
            method("compare", "compare", ["self", "other"], None),
        ]),


    trait("Num", "num", [
            method("negate",  "negate", ["num"], "hp_uminus"),
            method("add", "+", ["num", "other"], "hp_add"),
            method("sub", "-", ["num", "other"], "hp_sub"),
            method("mul", "*", ["num", "other"], "hp_mul"),
            method("div", "/", ["num", "other"], "hp_div"),
             method("mod", "mod", ["num", "other"], "hp_mod"),
        ]),

   
    trait("Collection", "self", [
           method("in_", "in", ["other", "self"], "hp_in_"),
           method("notin", "notin", ["other", "self"], "hp_notin"),
        ]),

    trait("Seq", "self", [
           method("cons", "::", ["other", "self"], "hp_cons"),
           method("concat", "++", ["self", "other"], "hp_concat"),
        ]),

    trait("Callable", "self", [
        
    ]),
    
    trait("Indexed", "self", [
        
    ]),
]


def trait_declarations():
    print "        # ---------------AUTOGENERATED---------------------"
    TPL = '        self.{{name}} = newtrait(_s(u"{{name}}"), _s(u"{{varname}}"))'
    for T in TRAITS:
        print render(TPL, T)


def put_traits():
    print "    # ---------------AUTOGENERATED---------------------"
    TPL = "    api.put(module, traits.{{name}}.name, traits.{{name}})"
    for T in TRAITS:
        print render(TPL, T)

def method_declaration():
    print "        # ---------------AUTOGENERATED---------------------"
    TPL = """        self.{{name}} = {%- if True -%}
    {% if  hotpath  is not none -%} 
        newmethod_hotpath(_s(u"{{name}}"), traits.{{trait.name}},_l([{% for sig in signature %}_s(u"{{sig}}"),{% endfor %}]), hp.{{hotpath}})
    {%- else -%} 
        newmethod(_s(u"{{name}}"), traits.{{trait.name}}, _l([{% for sig in signature %}_s(u"{{sig}}"),{% endfor %}])){% endif %}
    {%- endif %}
    """
    for T in TRAITS:
        if len(T["methods"]):
            print "        # %s" % T["name"]
        for M in T["methods"]:
            print render(TPL, M)

def put_methods():
    print "    # ---------------AUTOGENERATED---------------------"
    TPL = "    api.put(module, methods.{{name}}.name, methods.{{name}})"
    for T in TRAITS:
        if len(T["methods"]):
            print "    # %s" % T["name"]
        for M in T["methods"]:
            print render(TPL, M)

put_traits()
put_methods()
# trait_declarations()

# method_declaration()
        