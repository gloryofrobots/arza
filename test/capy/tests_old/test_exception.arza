import affirm

fun error(reason) = throw (#error, {reason=reason})

fun error2(reason) = (() -> error(reason))()


fun test_1 () =
    let e1 =
        try
            try
                1/0
            catch e2 =
                throw e2
        catch e3 =
            try
                error(#LifeSucks)
            catch e4 =
                e4
    in
        affirm:is_equal(e1, (#error, {reason=#LifeSucks}))



fun test_2 () =
    affirm:is_equal(
        try
            (try
                1/0
            catch e1 =
                //result
                e1
            )
        catch e2 =
            (try
                error(#LifeSucks)
            catch e3 =
                e3
            )
        ,
        ZeroDivisionError((1, 0))
    )


fun test_3 () =
    affirm:is_equal(
        try
            (try
                1/0
            catch e1 =
                e1
            finally
                error2(#Finally)
            )
        catch e2 =
            (try
                error(#Catch)
            catch e3 =
                42
            finally
                (e2, e3)
            )
        ,
        ((#error, {reason=#Finally}), (#error, {reason=#Catch}))
    )



fun test_4() =
    affirm:is_throw_expected (
        () ->
            try
                (try
                    1/0
                catch e1 =
                    e1
                finally
                    error2(#Finally)
                )
            catch e2 =
                (try
                    error(#Catch)
                catch e3 =
                    42
                finally
                    //uncatched
                    throw (e2, e3)
                )
        ,
        (),
        ( (#error, {reason=#Finally}), (#error, {reason=#Catch}) )
    )


fun test_5() =
    affirm:is_throw_expected(
        (arg1, arg2) ->
            try
                1/0
            catch e =
                throw (arg1, arg2)
            finally
                throw e
        ,
        (33, 22),
        (33, 22)
    )


fun test_6() =
    affirm:is_equal( try
                        throw (1,2,"ERROR")
                     catch
                        | (1, y, 3) as err = #first
                        | (1,2, "ERROR@") = #second
                        | (1, 2, x) as err = #third
                     finally
                        (#fourth, err, x)
                     ,
                     (#fourth, (1, 2, "ERROR"), "ERROR")
    )


fun test () =
    test_1()
    test_2()
    test_3()
    test_4()
    test_5()
    test_6()
