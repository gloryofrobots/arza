include arza:lang:_process

fun wait_while_working(pid) =
    if is_finished(pid) then True
    elif is_waiting(pid) then False
    else wait_while_working(pid)

fun wait_for(procs of List) =
    let
        fun _loop(_procs, _results)
            | ([], results) =
//                PL(">>finished", results, _procs)
                results
            | (tl::hd, results) =
//                PL(">>working", results, _procs)
//                PL(tl, is_finished(tl))
                if is_finished(tl) then
                    let
                        res = result(tl)
                    in
//                        PL(">>proc end", results, hd)
                        _loop(hd, results.{(tl) = res})
                else
                    _loop(procs, results)
    in _loop(procs, {})


fun coro(fn) =
    let
        proc1 = self()
        proc2 = create()

        fun make_chan(pid) =
            fun (...args) =
//                PL(#PROCS, pid, [proc1, proc2])
                if is_finished(pid) then
//                    PL(#FINISHED, result(pid))
                    throw CoroutineEmpty(result(pid))
                else
                    match args
                        | () = pid ! ()
                        | (m) = pid ! m
                    receive msg = msg
        chan1 = make_chan(proc2)
        chan2 = make_chan(proc1)

        fun wrapper(...args) =
            let
                (res =
                    (try
                        fn(...args)
                    catch e = e
                    )
                )
            in
                proc1 ! res
//                PL(#WRAP_END, mailbox(proc1), mailbox(proc2))
                res

        fun _coro(...args) =
//            PL(mailbox(proc1), mailbox(proc2))
            if is_idle(proc2) then
                start(proc2, wrapper, (chan2,) ++ args)
//                wait_while_working(proc2)
                receive msg = msg
            else
//                PL(#CHAN1, args)
                chan1(...args)
    in
        _coro
