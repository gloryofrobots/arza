import io
import affirm
import seq
import list
import array
import string
import process
//import tests
//import tests:test_process


fun coro(fn) =
    let
        proc1 = self()
        proc2 = process:create()

        fun make_chan(pid) =
            fun (...args) =
//                io:print(pid)
                if process:is_finished(pid) then
//                    io:print("FINISHED", process:result(pid))
                    process:result(pid)
                else
                    match args
                        | () = pid ! ()
                        | (m) = pid ! m
                    receive msg = msg

        chan1 = make_chan(proc2)
        chan2 = make_chan(proc1)
    in
        process:start(proc2, fn, (chan2,))
        chan1


fun main() =
    let
        c = coro((fun(yield) =
            (let
                x = yield(1)
                y = yield(2)
            in
                yield(x + 10)
//                PL(#first)
                yield(y + 10)
//                PL(#second)
            )
        ))
    in
        io:print .. c(1)
        io:print .. c(2)
        io:print .. c(3)
        io:print .. c(#last)
        io:print .. c()
        io:print .. c(#endtest)

    #endprogram
//    test_process:test()
//    tests:run()
