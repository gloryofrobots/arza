import io
import affirm
import seq
//import tests
//
//type N(a, b)
//    init (self, a, b) =
//        self.{a=a, b=b}
//
//
//type T (...N, x, y)
//    init (self, a, x) =
//        super(N, self, a, 42).{x=x, y=42}
//
//type T1(x, y)
//    init(self, x, y) =
//        self.{x=x, y=y}

fun add_y(t) = add_field(t, #y)

fun add_field ((fields, _init) as typedata, field) =
    if not elem(field, fields) then
        (append(field, fields), _init)
    else
        typedata

fun init_field_with((fields, _init), field, value, fn) =
    let
        fun _wrap(...args) =
            let
                data = _init(...args)
            in
                data.{(field) = fn(@, value)}
    in
        (fields, _wrap)
fun init_field((fields, _init), field, value) =
    let
        fun _wrap(...args) =
            let
                data = _init(...args)
            in
                data.{(field) = value}
    in
        (fields, _wrap)

@add_field(#z)
@add_y
type XYZ(x)

@add_field(#c)
@add_field(#b)
@add_field(#a)
type ABC()


@init_field(#b, #b)
@init_field_with(0, #c, (x, y) -> x ++ y)
@add_field(#b)
type V(a)
    init (self, a) = self.{a=a}


fun main() =
    PL(XYZ(1, 2, 3))
    PL(ABC(1, 2, 3))
    PL(ABC(1, 2, 3))
    PL(V(#a))
//    PL(T(1, 2))
//    let
//        t = T(1, 2)
////        t1 = t.{x=3}
//    in
//        PL(put(#x, 1, t))
////        io:print(t1)

//    io:print(T(24))
//    io:print(T2(1,2,3,4,5))
//    tests:run()
    #endprogram

