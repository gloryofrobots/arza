import seq
import string
import list
import lazy
import io

fun print_doors doors ->
    (seq:foreach ((i, s) => io:print ("Door " ++ str i ++ " is " ++ s))
                 (seq:zip (list:range 1 ((len doors) + 1)) doors))

// optimized one pass version
fun hundred_doors_1 () ->
    (seq:map fun _namer i ->
                if i ** 0.5 `mod` 1 == 0 then #open
                else #closed
             end (list:range 1 101))

// iterative erlang style version
fun hundred_doors_2() ->
    fun toggle
        | #closed -> #open
        | #open -> #closed

    fun _loop
        | [] L N I when N == 101 -> seq:reverse L
        | [] L N I -> _loop (seq:reverse L) [] (N + 1) 1
        | H::T L N I ->
             H2 = match I `mod` N with
                    | 0 -> toggle(H)
                    | _ -> H

             _loop T (H2::L) N (I + 1)
    _loop (list:replicate 100 #closed) [] 1 1


fun hundred_doors_3 () ->
    numbers = list:range 1 101
    fun toggle
        | #closed -> #open
        | #open -> #closed

    fun toggle_every k doors ->
        fun toggle_k n door ->
            if n `mod` k == 0 then toggle door
            else door

        seq:zipwith toggle_k numbers doors

    seq:foldl toggle_every (list:replicate 100 #closed) numbers


fun hundred_doors_3_lazy () ->
    numbers = range 1 101
    fun toggle
        | #closed -> #open
        | #open -> #closed

    fun toggle_every k doors ->
        fun toggle_k n door ->
            if n `mod` k == 0 then toggle door
            else door

        lazy:zipwith toggle_k numbers doors

    seq:list (lazy:foldl toggle_every (list:replicate 100 #closed) numbers)


fun run () ->
    io:p "Optimized one pass"
    io:p (hundred_doors_1 ())

    io:p "Unoptimized iterative erlang style"
    io:p (hundred_doors_2 ())

    io:p "Unoptimized iterative using seq"
    io:p (hundred_doors_3 ())

    io:p "Unoptimized iterative using lazy seq"
    io:p (hundred_doors_3_lazy ())
