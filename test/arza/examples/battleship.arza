import io
import seq
import string
import affirm

// This is simple battleship game
// All ships have 1x1 size and they don't move throughout course of the game
// game sim is just random shooting without memory

type Ship(id, hp, pos)

def str({id, hp, pos} of Ship) =
    string:all("<Ship id=", id, " hp=", hp, " pos=", pos, ">")


type Game(cols, rows, ships, _id)
    init(game, cols, rows) =
        game.{
            rows = rows,
            cols = cols,
            ships=[],
            _id=0
        }

def str({rows, cols, ships} of Game) =
    string:all(
        "<Game (",
        rows,
        ", ",
        cols,
        ") ",
        if not is_empty(ships) then "ships: \n...." else "",
        string:join("\n....", ships),
        " >"
    )

fun is_valid_pos({rows, cols}, (x, y) as pos) =
    x >= 0 and x < cols and y >= 0 and y < rows

fun add_ship(game, pos) =
    let new_id = game._id + 1
    let ship = Ship(new_id, 2, pos)
    game.{
        _id = new_id,
        ships = ship::@
    }



fun atpos({ships}, ship_pos) =
    seq:find_with(
        ships,
        None,
        ship -> ship_pos == ship.pos
    )

fun update_ship(game, newship) =
    game.{
        ships = seq:map(
            game.ships,
            (fun(ship) =
                (if ship.id == newship.id then
                    newship
                else
                    ship))
        )
    }

fun fire({rows, cols} as game, ship) =
    let
        x = randi(0, rows)
        y = randi(0, cols)
        fire_pos = (x, y)

    if fire_pos == ship.pos then
        //retry
        fire(game, ship)
    else
        fire_at(game, ship, fire_pos)

fun fire_at({rows, cols, ships} as game, ship, fire_pos) =
    let enemy = atpos(game, fire_pos)
    match enemy
        | enemy of Ship =
            update_ship(game, enemy.{hp = @ - 1})
        | None =
            game

fun turn({rows, cols, ships} as game) =
    seq:foldl(
       ships,
       fun (ship, new_game) =
           fire(new_game, ship),
       game
       )

fun checkgame(game) =
     let (alive, dead) = seq:partition(game.ships, fun({hp}) = hp > 0 )
     match alive
         | [] = (game, (#DRAW, "All dead"))
         | x::[] = (game, (#WINNER, x))
         | _ = None

fun run(game, count) when count > 0
    | (game, 0) = (game, (#DRAW, "Time is out"))
    | (game, count_turns) =
        let game1 = turn(game)
        match checkgame(game1)
            | None = run(game1, count_turns - 1)
            | result = result



fun random_game() =
    let
        (game, result) = Game(4, 4)
                 |> add_ship(_, (3,1))
                 |> add_ship(_, (0,0))
                 |> run(_, 100)
    io:p(#GAME, game)
    io:p(#RESULT, result)


fun test() =
    fun test_game() =
        let game = Game(4, 4)
                 |> add_ship(_, (3,1))
                 |> add_ship(_, (0,0))
        let ship1 = atpos(game, (3, 1))
        let ship2 = atpos(game, (0, 0))
        (game, ship1, ship2)

    let
        (game, ship1, ship2) = test_game()
    in
        let
            (game1, result) = game
                |> fire_at(_, ship1, ship2.pos)
                |> fire_at(_, ship2, ship1.pos)
                |> fire_at(_, ship1, ship2.pos)
                |> fire_at(_, ship2, ship1.pos)
                |> checkgame(_)
        in
            affirm:is_equal(result.0, #DRAW)

    let
        (game, ship1, ship2) = test_game()
    in
        let
            (game1, (label, winner)) = game
                |> fire_at(_, ship1, ship2.pos)
                |> fire_at(_, ship2, ship1.pos)
                |> fire_at(_, ship1, ship2.pos)
                |> checkgame(_)
        in
            affirm:is_equal(label, #WINNER)
            affirm:is_equal(winner.id, ship1.id)
