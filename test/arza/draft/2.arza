object P
    s:String
    i:Int32

    __init__(s) = self.s = s
    name() = self.s

class List[T]
    init() =
        self.a = []:T

class Empty:
    pass

class List:
    __init__(head, tail):
        self.head = head
        self.tail = tail


    cons(val):
        List(val, self)

let l = List(1, Empty)




class A is P
    s:String
    x:Int
    y:Int


    __init__(self, x, y) =
        self.x = x
        self.y = y

    receive
        | {: x, y :} = 1
        | [: 2, 4 :] = 1

    call(x of Int, y of Int) = x + y
    call(x of String, y of String) = x + y

def A.__receive__(x of Int, y of Int) = x + y

def (x of Int) + (y of Int) = x + y
def (x of Int) - (y of Int) = x + y

p = P:()

fun Vec2(x, y, z) =
    include Num
    type(x=x, y=y, z=z)

fun logcall(fn, message) =
    fun(...args) =
        io:print(message, args)
        fn(...args)


@logcall(#calling)
fun f1(x, y, z) = x + y + z


fun wait_for(procs of List) =
    let fun _loop(_procs, _results)
            | ([], results) =
//                PL(">>finished", results, _procs)
                results
            | (tl::hd, results) =
//                PL(">>working", results, _procs)
//                PL(tl, is_finished(tl))
                if is_finished(tl) then
                    let
                        res = result(tl)
                    in
//                        PL(">>proc end", results, hd)
                        _loop(hd, results.{(tl) = res})
                else
                    _loop(procs, results)
    in _loop(procs, {})

process p(x, y) =
    receive
        | 1 = 2
        | x = 1
    x = 1
    y = 2
    fun f () =
        receive
            | 1 = 2
            | x = 1
    f()

fun f1(x, y, {x or 1, y or 4, z})

&&d.s1.s2
%d.s1.s2

%(d.s1.s2)
$(d.s1.s2)

##(d.s1.s2)



d = {
    s1 = {
        s2 = {
            x = 1,
            s3 = {
                y = 2,
                s4 ={
                    z = 3
                }
            }
        }
    },
    a = 0
}
d1 = d.{
    s1 = d.s1.{
        s2 = d.s1.s2.{
            x = d.s1.s2.x + 1,
            s3=d.s1.s2.s3.{
                y = d.s1.s2.s3.y + 1,
                s4 = d.s1.s2.s3.s4.{
                        z = d.s1.s2.s3.s4.z + 1,
                        xyz = d.s1.s2.x + d.s1.s2.s3.y + d.s1.s2.s3.s4.z
                }

            }
        }
    }
}

d1 = d.{
    a = @ + 1,
    s1.s2.x = @ + 1,
    s1.s2.s3 = @.{
        y = @ + 1,
        s4 = @.
    }
}

d1 = d.{
    a = @ + 1,
    s1.s2 = @.{
        x = @ + 1,
        s3 = @.{
            y = @ + 1,
            s4 = @.{
                z = @ + 1,
                s5 = @.{
                    z = @ + 2
                },
                xyz = d.s1.s2.x + d.s1.s2.s3.y + d.s1.s2.s3.s4.z
            }
        }
    }
}

d1 = d.{
    a = @ + 1,
    s1.s2 = @.{
        x = @ + 1,
        s3 = @.{
            y = @ + 1,
            s4 = @.{
                z = @ + 1,
                s5 = @.{
                    z = @ + 2
                },
                xyz = d.s1.s2.x + d.s1.s2.s3.y + d.s1.s2.s3.s4.z
            }
        }
    }
}

d1 = d.{
    a.{ @ + 1 },
    s1.s2.{
        x.{ @ + 1 },
        s3.{
            y.{@ + 1},
            s4.{
                z.{@ + 1},
                s5 = @.{
                    z.{@ + 2}
                },
                xyz.{d.s1.s2.x + d.s1.s2.s3.y + d.s1.s2.s3.s4.z}
            }
        }
    }
}


