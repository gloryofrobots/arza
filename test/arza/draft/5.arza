module component
    module observe
        interface Emitter
            emit(`self, signal, data)
            register(`self, signal)
        

        interface Observable 
            use Emitter(emit)
            use Emitter without (register)
            //all funcs
            // use Emitter
            connect(`self, signal, observer)

           
    module controller
        interface Request 
             get_route(r)
             get_data(r)
        
        interface Response 
            send(r, data)
        
        interface Controller(Observable)
            dispatch(c, r)
            send(c, r)


        module base
            type Request(route, data) 

            extend Request
                   with controller.Request
                        def get_route(r) = r.route
                        def get_data(r) = r.data
              
                   
            type Controller(route, data, observers) 

            trait TController(Controller)
                def dispatch(self, r of Request) = emit(self, get_route(r))
                def send(self, r of Response) = send_response(r)

            extend Controller
                with TController
                    def emit(self, signal, data) = 42
                    def connect(self, signal, observer) = 42
            
      module sockjs
            type Controller(use base.Controller, sockjs)

            extend Controller
                   with base.TController
                        def emit(self, signal, data) = 42
                        def connect(self, signal, observer) = 42