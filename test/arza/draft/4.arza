
var (x, y, z) = import("x.y.z")

func add3(x, y, z) {
    return x + y + z
}

type T {
    x = 1
    y = 2
    z = 3
    var(n, z, x)
    n = nil
    z = nil
    x = nil
}

type X:
    use T (a as n, b as t, c)
    use T (a as n) hiding (a, b, c)
    provide(t)
    provide(z)

    fun f(a, b, c) = a

    init(self, other) =
        self.x = x
        self.y = y

(fun trait_x(T1)
    (def T1.add3 func (x, y, z)
        return x + y + z
    )
)

fun trait_x(T1) {
    def T1.add3 func (x, y, z){
        return x + y + z
    }
}

class XYZ(X):
    init(x, y, z):
        super(x)
        self.z = z




