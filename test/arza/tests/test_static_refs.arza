// Test for static refs catched by compiler
// for example if you use builtin function len
// reference to function for your scope will be created during compile time

import affirm

fun test_local_overwrite(x) =
    let
        fun len(x) = x - 1000

        fun f1(x) =
            let fun f2(x) = len(x) + len(x)
            in f2(x)
    in f1(x)

fun test_local_overwrite_2(x) =
    let
        fun f1(x) =
            let
                fun len(x) = x - 100
                fun f2(x) = len(x) + len(x)
            in f2(x)
    in f1(x)

fun test_use_static_and_fail(x) =
    let
        fun f1(x) =
            let fun f2(x) = len(x) + len(x)
            in f2(x)
    in f1(x)


// TODO FIX IT
fun test_use_static_single_pass(x) =
    let
        fun f1(x) =
            let
                fun f2(x) = len(x) + len(x)
                fun len(x) = x + 100
            in f2(x)
    in f1(x)


fun test () =
(
    affirm:is_equal(test_local_overwrite(1), -1998)
    affirm:is_equal(test_local_overwrite_2(1), -198)

    affirm:is_throw_expected_cb(
               x -> test_use_static_and_fail(x),
               [1],
               x -> match x
                    | e of MethodNotImplementedError = True
                    | _ = False

    )

// TODO FIX IT
//    affirm:is_equal(test_use_static_single_pass(1), 202)
)
