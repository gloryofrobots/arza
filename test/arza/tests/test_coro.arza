import coro
import affirm
import io
import seq
import tuple
import list

fun test_simple () =
    let co =
        coro:spawn(
             (yield, x) ->
                (let _co1 =
                    coro:spawn(
                         (yield2, y) ->
                            let
                                (fun send() = yield2(42 + y))
                            in  send()
                    )
                in
                    affirm:is_equal(x, 23)

                    (let
                        x1 = yield(_co1(x))
                        x2 = yield(x1)
                    in
                        affirm:is_equal(x1, 34)
                        affirm:is_equal(x2, 44)
                        x2
                    )
                )
        )
    in
        affirm:is_equal(co(23), 65)
        affirm:is_equal(co(34), 34)
        affirm:is_equal(co(44), 44)


fun test_ref() =
    let
        v = coro:ref(2)
    in
        affirm:is_equal(&v, 2)
        affirm:is_equal(&v, 2)
        affirm:is_equal(&v, 2)
        v := 3
        affirm:is_equal(&v, 3)
        affirm:is_equal(&v, 3)
        affirm:is_equal(&v, 3)


fun test_basic () =
    let co =
        coro:spawn(
            fun(yield, q) =
                (let
                    x = yield(q + 1)
                    y = yield(1 + x)
                    z = yield(1 + y)
                in
                    x + y + z
                )
        )
    in
        let
            a = co(10)
            b = co(a)
            c = co(b)
            d = co(c)
        in
            affirm:is_equal((a,b,c,d), (11, 12, 13, 36))


fun enum_from(num) =
    let co = coro:spawn(
        fun(yield, _from) =
            (let
                (fun _looper(num) =
                   yield(num)
                   _looper(num + 1)
                )
            in
                yield(_from)
                _looper(_from)
            )
        )
    in
        co(num)
        co


fun enum_from_2(num) =
    coro:loop(
        //first function remembers looper
        (looper) ->
             //second function sends data to looper each iteration
             num -> looper(num + 1)
        ,
        num - 1
    )


fun enum_from_to(_from, _to) when _from < _to =
       coro:loop_reduce(
            (fun (looper) =
                (fun (num1, num2) =
                    (if num1 < num2 then
                        looper(num1 + 1, num2)
                    else
                        num2 + 1
                    )
                )
            ),
            _from - 1,
            _to - 2
        )


fun test_seq (enum) =
    let
        numbers = enum(10)
        ys =
            coro:take(10,
                coro:map(x -> (x, str(x)),
                    coro:drop(3,
                         coro:filter(odd, numbers))))

        x1::x2::xs = numbers
    in
        affirm:is_equal(
            ys,
            [(17, "17"), (19, "19"), (21, "21"), (23, "23"), (25, "25"), (27, "27"), (29, "29"), (31, "31"), (33, "33"), (35, "35")]
        )
        affirm:is_equal(x1, 36)
        affirm:is_equal(x2, 37)

    let
        numbers = enum(0)
        ys = numbers
                |> coro:scanl .. `+` .. 0
                |> coro:take .. 10

    in
        affirm:is_equal(ys, [0, 1, 3, 6, 10, 15, 21, 28, 36, 45])

    let
        ys = enum(0)
                |> coro:intersperse .. 42
                |> coro:map .. (`+` .. 1)
                |> coro:take .. 10

        ys1 = enum(0)
                |> coro:map .. (`+` .. 1)
                |> coro:intersperse .. 42
                |> coro:take .. 10

    in
        affirm:is_equal(ys, [1, 43, 2, 43, 3, 43, 4, 43, 5, 43])
        affirm:is_equal(ys1, [1, 42, 2, 42, 3, 42, 4, 42, 5, 42])

    let x = enum(0) |> coro:nth .. 5
    in affirm:is_equal(x, 4)

    let ys = enum(0) |> coro:take_while .. (x -> x < 20)
    in affirm:is_equal .. ys .. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]

    let ys = enum(0)
            |> coro:drop_while .. (x -> x < 20)
            |> coro:take .. 5

    in affirm:is_equal .. ys .. [21, 22, 23, 24, 25]


fun test_enum() =
    let
        numbers = enum_from_2(10)
        x::x1::x2::xs = numbers
    in
        affirm:is_equal((x,x1,x2), (10, 11, 12))

        affirm:is_equal(
            seq:map(x ->
                     let x::xs = numbers
                     in (x)
                    ,list:range(0, 10)
            ),
            [13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
        )
    let
        numbers = enum_from_to(0, 10)
        l = coro:to_list(numbers)
    in
        affirm:is_equal(l, [0,1,2,3,4,5,6,7,8,9])

    let sum = seq:foldl(`+`, 0, enum_from_to(0, 10))
    in affirm:is_equal(sum, 45)

    let
        fun en (num) =
            let
                co = coro:spawn(
                        let
                            (fun __en(yield) = num)
                        in __en
                    )
            in
                co

        es1 = en(42)
        es2 = en(24)
        es3 = coro:to_list(coro:zip(es1, es2))
    in
        affirm:is_equal .. es3 .. [(42, 24)]

    let
        ns1 = enum_from_to(10, 15)
        ns2 = enum_from_to(20, 23)
        ns3 = coro:to_list(coro:zip(ns1, ns2))

        rs1 = enum_from_to(10, 11)
        rs2 = enum_from_to(20, 30)
        rs3 = coro:to_list(coro:zip(rs1, rs2))
    in
        affirm:is_equal .. rs3 .. [(10, 20)]
        affirm:is_equal .. ns3 .. [(10, 20), (11, 21), (12, 22)]

    let
        ns1 = enum_from_to(10, 15)
        ns2 = enum_from_to(20, 23)
        ns3 = coro:to_list(coro:zipwith((x,y) -> (x+42, y+42), ns1, ns2))

        rs1 = enum_from_to(10, 11)
        rs2 = enum_from_to(20, 30)
        rs3 = coro:to_list(coro:zipwith((x,y) -> (x+42, y+42), rs1, rs2))
    in
        affirm:is_equal .. rs3 .. [(52, 62)]
        affirm:is_equal .. ns3 .. [(52, 62), (53, 63), (54, 64)]


fun test () =
    test_basic()
    test_simple()
    test_seq(enum_from)
    test_seq(enum_from_2)
    test_ref()
    test_enum()
