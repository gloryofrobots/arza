import affirm
import io

fun add1(fn, v) =
    fun (x, ...args) =
        fn(x+v, ...args)

fun add2(fn, v1, v2) =
    fun (x, y) =
        fn(x+v1, y+v2)

interface I =
    fun add(I, y)
    fun sub(I, y)

@@add1(10)
@@add2(0.1, 0.2)
def add(x of Int, y of Int) = x + y

def sub(x of Int, y of Int) =  x - y

@@add1(10)
def+(super) sub(x of Int, y of Int) =  super(x, y) + super(x, y)


trait Add(T) for Float =
    @@add1(0.1)
    @@add1(0.01)
    def add(x of T, y of T) = x + y

    @@add2(0.001, 0.0001)
    def+ (super) add(x of T, y of T) = super(x, y) * -1


fun test_simple() =
    let
        @@add1(10)
        @@add2(0.1, 0.2)
        fun f(x, y) = x + y
    in
        affirm:is_equal_all(f(1,2), add(1,2), 13.3)
        affirm:is_equal(sub(100, 1), 218)
        affirm:is_equal(add(1.0, 2.0), -3.1111)


fun test() =
    test_simple()

