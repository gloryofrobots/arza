import affirm
import io

type V(x,y)

fun test_match() =
    // records are tuples or maps
    let
        vec = V(1,2)
    in
        affirm:is_equal(
            (match vec
                | (1, 2) = #one
                | (a, b) = #two
                | V(x, y) = #three
            ),
            #three
        )
        affirm:is_equal((x, y), (1, 2))

    let
        vec = V(1,2)
    in
        affirm:is_equal(
            (match vec
                | (1, 2) = #one
                | (a, b) = #two
                | V{x=3, y} = #three
                | V{x, y=2} = #four
            ),
            #four
        )
        affirm:is_equal((x, y), (1, 2))


    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        match Eq
            | interface Eq = 1
            | x = 2
        , 1
    )

    affirm:is_equal(
        match Int
            | type Int = 2
            | x = 1
        , 2
    )

    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        (match [1,2,3]
            | [a, b, c as B2] as B1 = (B1, B2, a, b, c)
            | _ = 42),
        ([1, 2, 3], 3, 1, 2, 3)
    )

    affirm:is_equal(B1, [1, 2, 3])
    affirm:is_equal(B2, 3)

    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        (match [1,2,3]
            | [1 as B3, 2, 4] = (#res1, B3)
            | [1 as B3, 2, 3] = (#res2, B3)),
        (#res2, 1)
    )

    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        (match 42
            | 2 as B4 = (#result1, B4)
            | 42 as B4 = (#result2, B4)),
        (#result2, 42)
    )

    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        match {genre = "XXX", actress="Lily", age=25}
            | {genre, "actress"="Lily" as LilyName, age=13} as Result = (Result, genre, 42, LilyName)
            | {genre, "actress"="Lily" as LilyName2, age=25} as Result = (Result, genre, "OLOLO", LilyName2, age)
            | _ =  42,
        ({age = 25, actress = "Lily", genre = "XXX"}, "XXX", "OLOLO", "Lily", 25)
    )

    affirm:is_equal(LilyName2, "Lily")
    affirm:is_equal(Result, {age = 25, actress = "Lily", genre = "XXX"})
    affirm:is_throw(() -> LilyName, ())

    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        match (1, (23, (24, 25)))
            | (Z, (G, 1)) = 12 + Z
            | (1, 23) =  12
            | (1, (23, X)) = (#third, X)
            | _ =  #fourth
        ,
        (#third, (24, 25))
    )

    affirm:is_throw(() -> Z, ())

    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        match [(1,2), (2,3,4), 5, [6,7,8]]
            | [a1,b1,c1] =  (a1, b1, c1)
            | [a1, b1] =  (a1, b1)
            | (x1, y1, 5) =  (x1, y1)
            | [(1, X1), Y1, 5, [6,7, Z1]] =  (X1, Y1, Z1)
            | _ =  123
        ,
        (2, (2, 3, 4), 8)
    )

    affirm:is_throw(() -> [a1, b1, c1, x1, y1], ())

    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        match {name="Bob", surname=("Alice", "Dou"), age=42}
            | {name="Bob", surname="Alice"} =  (name, surname)
            | {name="Bob2", age=42} =  (name, age)
            | {name="Bob", surname=("Alice", "Dou"), age=42} =  (surname, name, age + 100)
            | _ =  42
        ,
        ((#Alice, #Dou), #Bob, 142)
    )


    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        match {name="Bob", surname=("Alice", "Dou"), age=42}
            | {age=41, names} =  (name, age, 0)
            | {name, age=42} =  (name, age, 1)
            | {age=42} =  (age, 2)
            | _ =  42
        ,
        ("Bob", 42, 1)
    )

    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        match (1, 2, 1)
            | (A, x, A)  = (#first, A)
            | (A, x, B)  = (#second, A, B)
            | (3, A) = #third
        ,
        (#first, 1)
    )

    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        match (1, 2, 2)
            | (A, x, A)  = (#first, A)
            | (A, x, B)  = (#second, A, B)
        ,
        (#second, 1, 2)
    )

    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        match 42
            | N1 of String  = ("Is String", N1)
            | N1 of Int  = ("Is Integer", N1)
        ,
        ("Is Integer", 42)
    )


    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        match (1,2,3,4,5)
            | (a, b, c, ...rest) = rest
            | _ = 42
        ,
        (4, 5)
    )

    ///////////////////////////////////////////////////////////////
    // this is error prone code, currently branches not merged because
    //distinction goes  variable names and a1 != b1
    //FIXME
    match (1,2)
        | a1 = a1.0
        | b1 = a1.1

    //////////////////////////////////////////////////////

    let err = MatchError(42)
    in affirm:is_equal(
            try
                (match 42
                    | 23 = #first
                    | 13 = #second)
            catch exc =
                exc
            finally
                [exc, exc, exc]
            ,
            [err, err, err]
      )

    let
        fun greater_then_ten(v) = v > 10
        A = False
    in
        affirm:is_equal(
            match (1,2,3)
                | (x, y, z) when z == 2 = #first
                | (x, y, z) when z == 3 and y == 3 = #second
                | (x, y, z) when z == 3 and y == 2 and x == 3 = #third
                | (x, y, z) when z == 3 and y == 2 and x == 1 and A == 2 = #fourth
                | (x, y, z) when z == 3 and y == 2 and x == 1 and not (A `is` True) and greater_then_ten(9) = #fifth
                | (x, y, z) when z == 3 and y == 2 and x == 1 and A `is` True or greater_then_ten(11) = #sixth
                | _ = 12

            , #sixth
        )

        affirm:is_equal_batch(
            fun
                | (x, y, z) when z == 2 = #first
                | (x, y, z) when z == 3 and y == 3 = #second
                | (x, y, z) when z == 3 and y == 2 and x == 3 = #third
                | (x, y, z) when z == 3 and y == 2 and x == 1 and (x + y == 6 or True) = #fourth
                | (x, y, z) when z == 3 and y == 2 and x == 2 or (A `is` True or greater_then_ten(11)) = #fifth
                | (_, _, _) = 12
            ,
            ([1,2,2], #first),
            ([1,3,3], #second),
            ([3,2,3], #third),
            ([1,2,3], #fourth),
            ([2,2,3], #fifth)
        )


    //////////////////////////////////////////////////////

    affirm:is_equal (
        match [1,2,3,4]
            | 1::2::3::4::[] = #ok
            | x::xs = (x, xs)
        ,
        #ok
    )

    //////////////////////////////////////////////////////

    affirm:is_equal(
        match {x=1, y="OLOLO"}
            | {x of String, y of Int} = #first
            | {x of Int, y="OL" of String} = #second
            | {x of Int, y="OLOLO" of String} = #third
        ,
        #third
    )

    affirm:is_equal(
        match 1
            | x of Int when 2 == 1 = #first
            | x of Int = #second
            | x of Int when 3 == 2 = #third
        ,
        #second
    )

fun test_destruct () =
    let x::xs = [1,2,3,4,5]
    in
        affirm:is_equal(x, 1)
        affirm:is_equal(xs, [2,3,4,5])

    let (x,y,z) = (1,2,3)
    in affirm:is_equal((x,y,z), (1,2,3))

    // tuples can't be matched on lists
    affirm:is_throw(() -> let (a,b,c,d) = [4,5,6,7] in (), ())
    affirm:is_throw(() -> let [a,b,c] = (1,2,3) in (), ())

    ///////////////////////////////////////////

    let
        metadata = {
            title= "Nemesis Games",
            subject= "SCIFI",
            translationsUa={title="IGRU DOLI", translator="PILIP LUN" },
            translationsEn={ titleEn=("GAMES OF NEMESIS", "NEMESIS GAMES"), translatorEn="Jhon DOU" },
            author= ("James", "Corey")
        }
    in
        affirm:is_equal (
                    (metadata.title, metadata.subject, metadata.translationsUa.["title"],
                     metadata.translationsUa.translator, metadata.translationsEn.titleEn,
                     metadata.translationsEn.translatorEn, metadata.author),
                    ("Nemesis Games", "SCIFI", "IGRU DOLI", "PILIP LUN",
                        ("GAMES OF NEMESIS", "NEMESIS GAMES"), "Jhon DOU", ("James", "Corey"))
        )


        let
            {
                // symbol as key helps avoiding binding to unnecessary title name
                #title=englishTitle,
                subject,
                translationsUa={ #title=localeTitle, translator },
                translationsEn={ titleEn=(localeTitleEn, origTitleEn), translatorEn },
                author=author_data
            } = metadata
        in
            affirm:is_equal(
                    (englishTitle, subject, localeTitle, translator,(localeTitleEn, origTitleEn),
                        translatorEn, author_data),
                    ("Nemesis Games", "SCIFI", "IGRU DOLI", "PILIP LUN",
                        ("GAMES OF NEMESIS", "NEMESIS GAMES"), "Jhon DOU", ("James", "Corey"))
            )
    let
        {a=[x,y,...z], b="I am B" as B, c of Float, d={e=(x,y,...zz)} as D} =
            {a=[1,2,3,4,5], b="I am B", c=3.14, d={e=(1,2,3,4,5)}}
    in
        affirm:is_equal(
            (a, B, D, e, x, y, z, zz),
            ([1,2,3,4,5], "I am B", {e=(1,2,3,4,5)}, (1,2,3,4,5), 1, 2, [3,4,5], (3,4,5))
        )

fun test () =
    test_destruct()
    test_match()
