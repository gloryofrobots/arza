import affirm
import io
from io import (print)



fun test_base_expressions() =
    let
        tup1 = (1, "Hello", 35.44555)
    in
        affirm:is_equal(
           tup1, (1, "Hello", 35.44555)
        )

        affirm:is_equal(tup1.{0}, 1)

        affirm:is_equal(tup1.{1}, "Hello")
        affirm:is_equal(tup1.2, 35.44555)

    affirm:is_equal((1, "Hello", 35.44555).2, 35.44555)

    affirm:is_equal(
        (1,2, ["Alice", "Bob", (45,), 54.000000001]).2, ["Alice", "Bob", (45,), 54.000000001]
    )

    affirm:is_equal (
        (1, 2, ["Alice", "Bob", (45,), 54.000000001]).2, ["Alice", "Bob", (45,), 54.000000001]
    )

    let m1 = {name="XXX"} in
        affirm:is_equal({name="XXX"}.name, "XXX")
        affirm:is_equal(m1.name, "XXX")
        affirm:is_not_equal(m1.name, "YYY")

    let
        t2 = ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Bob"})
    in
        affirm:is_equal(
            t2, ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Bob"})
        )

        affirm:is_not_equal(
            t2, ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Alice"})
        )

        affirm:is_equal(t2, t2)

    affirm:is_true(if 5 > 4 then True else False)
    affirm:is_false(if 5 < 4 then True else False)
    affirm:is_false(if 5 == 4 then True else False)
    affirm:is_equal((if 13 == 12 then 42 * 2 else (if 13 == 14 then 12 * 2 else 1)), 1)

    let
        a2_4 = #four
        a2 = [0, 1, 2, a2_4]
    in
        affirm:is_true(#four `elem` a2)
        affirm:is_true(a2_4 `elem` a2)

    affirm:is_equal("name", #name)
    affirm:is_equal(#name, "name")
    affirm:is_equal(#"++++ ---- <> $$", "++++ ---- <> $$")
    affirm:is_equal("++++ ---- <> $$", #"++++ ---- <> $$")

    let x = 12
    in
        affirm:is_equal(if x == 13 then 1 + 1
                        elif x == 14 then 2 + 2
                        elif x == 15 then 3 + 3
                        else 4 + 4,
                        8)

fun test_call_syntax () =
    let
        fun id(x) = x
        fun sum_list_3 ([x,y,z]) = x + y + z
        fun sum(x, y) = x + y

        // NEVER WRITE SUCH CODE
        V53 =
            sum(1,
                  sum_list_3(
                    [id(1),
                     id(id(2)),
                     id(id(id(3)))
                    ])) +
            sum(10,
                sum_list_3(
                    [
                        //call
                        (x -> x)(11),

                        // complicated call
                         (fun | x = x) ((x -> x)(12)),

                        // even more complicated call
                        (fun (x) = x)(
                            (x -> x)(
                                (x -> x)(13)
                            )
                          )
                    ]))

    in affirm:is_equal(V53, 53)


fun test_small_functions_syntax() =
    let fun f1
        | 0 = 1
        | 1 = 2
        | 2 = 3

    in affirm:is_equal(f1(0), 1)

    let fun f2(a) | 0 = 1
                  | 1 = 2
                  | 2 = 3
    in affirm:is_equal(f2(0), 1)

    let fun f3(a, b, c) | (0, 1, c) = c
    in affirm:is_equal(f3(0, 1, 42), 42)

    let fun f4 (()) = ((()))
    in affirm:is_equal( f4(()), () )

    let fun f5() = ( (42,43,44) )
    in affirm:is_equal(f5(), (42,43,44))

    let fun f6(a, b, c) = ((a, b, c) -> 42) (a, b, c)
    in affirm:is_equal(f6(1, 2, 3), 42)

fun test_whitespaces_in_expressions() =
    let l = (x, y, z) -> 42
    in affirm:is_equal(l(1, 2, 3), 42)

    let l1 = (x, y, z) -> 42
    in affirm:is_equal(l1(1, 2, 3), 42)

    let l2 =
        fun
            | ([hd::tl], (1,2,3), {x=2, y=3}) = 24
            | (_, y, z) = 23

    in affirm:is_equal(
        l2([[1,2]], (1,2,3), {x=2, y=3}),
        24
    )

    affirm:is_equal (
        (fun | ([hd::tl], (1,2,3), {x=2, y=3}) = 24
             | (_, y, z) = 23)(
                [[1,2]], (1,2,3), {x=2, y=3}),
        24
    )

    affirm:is_equal((x -> x + 1)(34), 35)

    affirm:is_equal(
         (fun
            | (1, 2, 3) = 11
            | (2, 4, 5) = 22) (
                    1,
                        2,

                         3),  11)
    let T = (1, 2, (fun | 1 = 25
                        | 2 = 13), 25)

    in affirm:is_equal(T.2(2), 13)

    let
        T1 = (1,
              (fun | 5 = 25
                  | 6 = 45),
              (fun
                 | 5 = 25
                 | 6 = 45),
              (fun x = 25),
              25)
    in
        affirm:is_equal(T1.1(5), 25)
        affirm:is_equal(T1.2(5), 25)
        affirm:is_equal(T1.3(5), 25)


    let T4 =
        (1
         ,2,
            3)

    in affirm:is_equal(T4, (1,2,3))

    let
        T5 =
            (1
            , (fun | 5 = 25
                   | 6 = 45
              )
            , (fun
                | 5 = 25
                | 6 = 45
              )
            // call
            , (x -> x) (
                          45)
            )
    in
        affirm:is_equal(T5.1(6), 45)
        affirm:is_equal(T5.2(6), 45)
        affirm:is_equal(T5.3, 45)


    let T6 =
        (1,
   2,
3
)
    in affirm:is_equal(T6, (1,2,3))


    let T7 =
        // evaluates to expression
        (
            // call here
            (x -> x)(
                (
                    fun (x) = 1,
                     3,
                     1,
                     4,
                     5
                )
            )
        )
    in affirm:is_equal(T7.0(12313123), 1)

    let M1 =
        {x=1,
 x=2,

 l= fun
        | (1, 2) = 1
        | (2, 3) = 2,
    n = 1
    }
    in
        affirm:is_equal(M1.x, 1)
        affirm:is_equal(M1.l(2, 3), 2)


fun test_conditions() =
    let I1 =
            if 2 == 2 then
                2
            else
                4


    in affirm:is_equal(I1, 2)

    let I2 =
        if 2 == 1 then
                              2
        elif 3 == 4 then
            3
        elif {x=1, y=2} == (1,2,3) then 4
        else 5


    in affirm:is_equal(I2, 5)

    let MT1 = (match (1,2,3) | (x,y,z) = 2 | _ = 1) in affirm:is_equal(MT1, 2)

    let MT2 = match (1,2,3)
                | (x,y,z) = 2
                | _ = 1

    in affirm:is_equal(MT2, 2)

    let MT3 =
        match fun (x) = x
            | Y = Y((fun (a,b) = a + b)(1 + 1, 2 + 2))
            | _ = 2

    in affirm:is_equal(MT3, 6)

    let MT4 = match
                if 2 == 1 then 2
                else 3
            | 2 = 3
            | 3 = 2

    in affirm:is_equal(MT4, 2)

    affirm:is_equal(match 1 | 1 = 4, 4)
    affirm:is_equal(match 1 | x = 4, 4)

    affirm:is_equal(
        match
            if 0 == 1 then
                1
            else
                (~fun (x, y) = x + y)(
                    3
                 )(
                    4
                 )
            | 6 = 3
            | 7 = 42,
        42
     )

    affirm:is_equal(if 1 == 1 then 1 else 2, 1)

fun test_operators_and_newlines() =
    let x =   1
            + 2
            + 3
            + 4
        y = x
            + 3
                + 2 +
        5
    in
        affirm:is_equal(x, 10)
        affirm:is_equal(y, 20)

fun test_let() =
    let (fun _f(x, y) =
            (let
                x = 11
                y = 12
            in
                affirm:is_equal(x, 11)
                affirm:is_equal(y, 12)
            )

        )
    in
        _f (1,2)

        let x = 111 in affirm:is_equal(x, 111)

        let x = 1111
            y = 2222
        in affirm:is_equal(x, 1111) affirm:is_equal(y, 2222)

        let x = 222
            y = 333 in  affirm:is_equal(x, 222)
                        affirm:is_equal(y, 333)
        let x = 444
            y = 555
        in affirm:is_equal(x, 444); affirm:is_equal(y, 555)

        let v = let x = 1 y = 2 in x + y
        in affirm:is_equal(v, 3)


fun test_ambidextra_operators () =
    let
        two = 2
        one = 1
        f = (...args) -> args
    in
        affirm:is_equal_all(
            (2-1), (two-one), (2-one), (two-1), 1
        )

        affirm:is_equal_all(
            (2 - 1), (two - one), (2 - one), (two - 1), 1
        )

        affirm:is_equal_all (
            (2-
                -1), (two-

                -one), (2- -one), (two- -1), 3
        )

        affirm:is_equal_all (
            (2- - 1), (two-
                -
                 one), (2-
                 - one), (two- - 1), 3
        )

        affirm:is_equal_all (
            (2 - - 1), (two - - one), (2 - - one), (two - - 1), 3
        )

        affirm:is_equal_all (
           identity(-1), identity(-one), -1
        )

        affirm:is_equal (
            //Lparen before 42 performs as  infix operator because both expressions are on the same line
            (
                (x->x-1)(42)
            ),
            41
        )

        affirm:is_equal (
            //Lparen before 42 performs as  prefix operator because  expressions are on the different lines
            (fun () =
                (x->x-1)
                (42)
            )(),
            42
        )

        affirm:is_equal_all (
            f(-1, -2, -1, -2), f(-one, -two, -one, -two), (-1, -2, -1, -2)
        )


fun test_modify() =
    let
        M = {
            line = {
                data = [1,2,3,4],
                index = 1
            },

            id = 12
        }

        M1 = M.{
            line = M.line.{
                index_2 = M.line.index + 42,
                data = [4, 3, 2, 1]
            },
            id = "ID M1"
        }

    in
        affirm:is_equal(M, {line = {index = 1, data = [1, 2, 3, 4]}, id = 12})
        affirm:is_equal(M1, {line = {index = 1, index_2 = 43, data = [4, 3, 2, 1]}, id = "ID M1"})

    let
        common = {height=187, weight=60}
        alice = common.{age = 28, name="Alice"}
        bob = common.{age = 29, name="Bob", height=225}
    in
        affirm:is_equal(common, {weight = 60, height = 187})
        affirm:is_equal(alice, {name = "Alice", weight = 60, age = 28, height = 187})
        affirm:is_equal(bob, {name = "Bob", weight = 60, age = 29, height = 225})

    let l1 = [1,2,3,4,5].{0=102, 1=103, 4=105}
    in affirm:is_equal(l1, [102, 103, 3, 4, 105])


fun test_unpack() =
    let
        fun f(...args) = args
        a = [1,2,3,4]
        b = [5,6,7]
        c = [8,9]
        x = 0
        y = 124
        z = 455
        w = 12
    in
        affirm:is_equal(f(x, y, z, ...a, ...b, w), apply(f, [x, y, z] ++ to_seq(a)  ++ to_seq(b) ++ [w]))
        affirm:is_equal(f(...a), apply(f, to_seq(a)))
        affirm:is_equal(f(...a, x, ...b), apply(f, to_seq(a) ++ [x] ++ to_seq(b)))
        affirm:is_equal(f(x, ...b), apply(f, [x] ++ to_seq(b)))

    let
        fun f1(x, y, z) =
            x + y + z

        fun f2(x, y, z, w, t, r) =
            x + y + z + w + t + r

        fun f3(x, y, z) =
            f1(..._)

        fun f4(x, y, z) =
            f1(..._) + f2(..._, ...[x + 3, y + 4, z + 5])
    in
        affirm:is_equal .. f1(1, 2, 3)  .. 6
        affirm:is_equal .. f4(1, 2, 3)  .. 30

fun test () =
//    print("TESTING REST BASIC EXPRESSIONS")
    test_base_expressions()
//    print("TESTING WHITESPACES IN EXPRESSIONS")
    test_whitespaces_in_expressions()
//    print("TESTING CONDITIONS")
    test_conditions()
//    print("TESTING CALL SYNTAX")
    test_call_syntax()
//    print("TESTING OPERATORS AND NEWLINES")
    test_operators_and_newlines()
//    print("TESTING ELEMENTAL FUNCTIONS")
    test_small_functions_syntax()
//    print("TESTING LET IN")
    test_let()
//    print("TESTING AMBIDEXTRA OPERATORS")
    test_ambidextra_operators()
//    print("TESTING MODIFY OPERATORS")
    test_modify()
//    print("TESTING UNPACKING SEQUENCES IN FUNCTION CALL")
    test_unpack()
