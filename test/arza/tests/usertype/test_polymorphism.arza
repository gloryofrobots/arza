import affirm

type
    L(l)
    None
    Some(val)

generic eq(self, other)

use L as T in
    def len(self of T) = len(self.l)

    def is_empty(self of T) = is_empty(self.l)

    def first(self of T) = self

    def rest(self of T) = self


def eq (self of Some, val of Some) = val == None
def eq (self of Some, _) = False

//extend Some with
//(
//    def eq
//        | (self, val of Some) = val == None
//        | (self, _) = False
//)

def eq (self of None, {val} of Some) = val == None
def eq (self of None, _ of None) = True

//extend None with
//(
//    def eq
//        | (self, {val} of Some) = val == None
//        | (self, _ of None) = True
//)

fun test () =
    let
        s = Some(None)
    in
        affirm:is_true(None `eq` s)
        affirm:is_false(s `eq` None)


    let
        l1 = L([1,2,3,4,5])
    in
        affirm:is_equal(
            match l1
                | [] = #empty
                | e = #not_empty
            ,
            #not_empty
        )
