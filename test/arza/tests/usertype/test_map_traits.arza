import affirm
import io

type EQ
type GT
type LT
type Val(v)
type Val2(v)

generic
    eq(x, y)
    ne(x, y)
    le(x, y)
    lt(x, y)
    ge(x, y)
    gt(x, y)
    cmp(x, y)
    max(x, y)
    min(x, y)

let
    Equal =
    {
        (eq) = (x, y) -> not ne(x, y),
        (ne) = (x, y) -> not eq(x, y)
    }

    Order =
    {
        (le) = (x, y) -> cmp(x, y) != GT,
        (lt) = (x, y) -> cmp(x, y) == LT,
        (ge) = (x, y) -> cmp(x, y) != LT,
        (gt) = (x, y) -> cmp(x, y) == GT,


        (cmp) = (x, y) ->
            (if eq(x, x) then EQ
            elif le(x, y) then LT
            else GT),

        (max) = (x, y) ->
            (if x `le` y then y
            else  y),

        (min) = (x, y) ->
            (if x `le` y then x
            else  y)
    }


trait (T) for Val =
    def ne(x of T, y) as Equal.[ne]
    def eq(v1 of T, v2) = v1.v == v2.v

trait (T) for Val2 =
    def eq(x of T, y) as Equal.[eq]
    def ne(v1 of T, v2) = v1.v != v2.v

trait (T) for Val =
    def le(x of T, y) as Order.[le]
    def ge(x of T, y) as Order.[ge]
    def lt(x of T, y) as Order.[lt]
    def gt(x of T, y) as Order.[gt]
    def max(x of T, y) as Order.[max]
    def min(x of T, y) as Order.[min]

    def cmp(self of T, other) =
        if self.v == other.v then EQ
        elif self.v <= other.v then LT
        else GT

trait (T) for Val2 =
    def cmp(x of T, y) as Order.[cmp]
    def ge(x of T, y) as Order.[ge]
    def lt(x of T, y) as Order.[lt]
    def gt(x of T, y) as Order.[gt]
    def max(x of T, y) as Order.[max]
    def min(x of T, y) as Order.[min]

    def le(self of T, other) = self.v <= other.v

fun test () =
    let
        v1_1 = Val(1)
        v1_2 = Val(1)
        v1_3 = Val(2)

        v2_1 = Val2(1)
        v2_2 = Val2(1)
        v2_3 = Val2(2)
    in
        affirm:is_true(eq(v1_1, v1_2))
        affirm:is_false(ne(v1_1, v1_2))
        affirm:is_false(eq(v1_3, v1_2))
        affirm:is_false(eq(v1_2, v1_3))

        affirm:is_true(eq(v2_1, v2_2))
        affirm:is_false(ne(v2_1, v2_2))
        affirm:is_false(eq(v2_3, v2_2))
        affirm:is_false(eq(v2_2, v2_3))

        affirm:is_true(eq(v1_1, v2_2))
        affirm:is_false(ne(v2_1, v1_2))
        affirm:is_false(eq(v1_3, v2_2))
        affirm:is_false(eq(v1_2, v2_3))

        affirm:is_false(lt(v1_3, v1_3))
        affirm:is_true(le(v1_3, v1_3))
        affirm:is_false(gt(v1_3, v1_3))
        affirm:is_true(ge(v1_3, v1_3))

        affirm:is_false(lt(v2_3, v2_3))
        affirm:is_true(le(v2_3, v2_3))
        affirm:is_false(gt(v2_3, v2_3))
        affirm:is_true(ge(v2_3, v2_3))
