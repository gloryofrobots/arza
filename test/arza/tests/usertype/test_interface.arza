import seq
import affirm
import io

type
    T1(v1, v2)
    T2(v1, v2, v3)
    T3(v1)

generic to_list(x)

interface Listable (to_list)

use
    (T1, T2) as T
in
    //Seq iface
    def first(self of T) = first(to_list(self))
    def rest(self of T) = rest(to_list(self))

    //not enough for Sliceable
    def drop(count, self of T) = seq:drop(count, to_list(self))
    def take(count, self of T) = seq:take(count, to_list(self))


def to_list(self of T1) = [self.v1, self.v2]

use T2 as T in
    def to_list(self of T) = [self.v1, self.v2]
    def slice(_from, _to, self of T) = slice(_from, _to, to_list(self))

describe (T1, T2) as (Listable, Seq)
describe T2 as Sliceable

fun test () =
    let
        t1 = T1(11, 23)
        t2 = T2(
                fst(take(1, t1)),
                23,
                45
             )
    in
        affirm:is_true(kindof(t1, Seq))
        affirm:is_true(kindof(t1, Listable))
        affirm:is_true(kindof(t1, T1))
        affirm:is_false(kindof(t1, Sliceable))

        ///////////////////////////////////////////

        affirm:is_equal(take(2, t1), take(2, t2))
        affirm:is_equal(first(t1), first(t2))

        affirm:is_equal(first(rest(t1)), first(rest(t2)))

        affirm:is_true(kindof(t2, Seq))
        affirm:is_true(kindof(t2, Listable))
        affirm:is_true(kindof(t2, T2))
        affirm:is_true(kindof(t2, Sliceable))
