import affirm
import process
import process:state


fun test_simple() =
    let
        fun ping(n, pong_pid, store) =
            if n == 0 then
                pong_pid ! #finished
                store
            else
                pong_pid ! (#ping, self())
                receive #pong =
                        ping(n-1, pong_pid, #pong :: store)

        fun pong(store) =
            receive
                | #finished =
                    store
                    throw ValueError(store)

                | (#ping, ping_pid) =
                    ping_pid!#pong
                    pong(#ping :: store)

        pong_pid = spawn .. pong .. ([],)
        _ = process:set_error_print_enabled(pong_pid, False)
        ping_pid = spawn .. ping .. (3, pong_pid, [])
        result = process:wait_for([pong_pid, ping_pid])
    in
        affirm:is_equal(result.[ping_pid], [#pong, #pong, #pong])
        affirm:is_equal(result.[pong_pid], ValueError([#ping, #ping, #ping]))

fun test_coro() =
    let
        fun test1() =
            let
                c = process:coro(fun(yield, start) =
                    (let
                        x = yield(start)
                    in
                        yield(x)
                    )
                )
                c1 = process:coro((yield) -> #zero)
            in
                affirm:is_equal .. c1() .. #zero
                affirm:is_throw(c1, ())

                affirm:is_equal .. c(#first) .. #first
                affirm:is_equal .. c(#second) .. #second
                affirm:is_equal .. c(#last) .. #last
                affirm:is_throw(c, ())
                affirm:is_throw(c, ())

        fun test2() =
            let
                c = process:coro(fun(yield) = throw 1)
            in
                affirm:is_equal .. c() .. 1
                affirm:is_throw(c, ())
    in
        test1()
        test2()

fun test_state() =
    let s = state:new({x=1, y=2})
    s:={x=10, y=20}
    affirm:is_equal(&s, {x=10, y=20})
    s.{x=1, z=30}
    affirm:is_equal(&s, {x=1, y=20, z=30})
    put(s, #z, 3)
    affirm:is_equal(s.z, 3)
    affirm:is_equal(len(s), 3)
    put(s, #a, 4)
    affirm:is_true(s `has` #a)
    affirm:is_true(s `has` #x)
    affirm:is_true(s `has` #z)
    affirm:is_false(s `has` #b)
    s:=[]
    affirm:is_equal(len(s), 0)
    s:=(1,2,3,4)
    affirm:is_equal(len(s), 4)
    affirm:is_equal(&s, (1,2,3,4))
    #endprogram

fun test() =
    test_coro()
    test_simple()
