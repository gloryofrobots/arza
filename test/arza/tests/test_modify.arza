import affirm
import seq

fun test_map() =
    let
        d = {
            y = 2,
            s1 = {
                (True) = False,
                s2 = {
                    x = 1,
                    s3 = {
                        a = 10
                    }
                }
            }
        }
        d1 = d.{
             s1.True = not @,
             s1.s2.x = @ + 1,
             s1.s2 = @.{
                x=42,
                z=24
             },
             s1.s2 = @.{
                s3 = @.{
                    a = @ - 30,
                    b = 20
                }
             },
             s1.s2.x = @ - 66,
             y = (@ +
                  @/2.0*@ *
                  seq:reduce(`+`, [@, @, @])
                  ) + `*`(@, @)
        }
    in
        affirm:is_equal(d1, {y=18.0, s1={s2={z=24, x=-24, s3={b=20, a=-20}}, (True)=True}})

fun test_list() =
    let
        d =[
            [0,1,2],
            3,
            4,
            [5,6,7, [8, 9, [10]]]]
        d1 = d.{
            0 = seq:map((x) -> x * x, @),
            1 = @ * @,
            2 = @,
            (3).(3) = @.{
                0 = @ * 8,
                1 = @ * 9
            },
            (3).(3).((fun () = 2)()).0 = ((x) -> @ * x)(4.2)
        }
    in
        affirm:is_equal(d1, [[0, 1, 4], 9, 4, [5, 6, 7, [64, 81, [42.0]]]])

fun test_lenses() =
    let
        d = {
            s1 = {
                s2 = {
                    x = 1,
                    y = 2
                }
            }
        }
        l1 = lense(d, (fun(source) = source.s1.s2),
                     (fun(value, source) = source.{s1.s2 = value}))
        l2 = l1.{x = 0, z = 4}
        l3 = l2.{a=42}
        l4 = l1 <- {a=1, b=2, c=3}
        l5 = l1({w=15, t=16})
    in
        affirm:is_equal([!l4, l4.a, l4.b, l4.c], [{s1={s2={b=2, c=3, a=1}}}, 1, 2, 3 ])
        affirm:is_equal([!l3, l3.a], [{s1={s2={z=4, x=0, y=2, a=42}}}, 42])
        affirm:is_equal(!l2, {s1={s2={z=4, x=0, y=2}}})
        affirm:is_equal(!l1, {s1={s2={x=1, y=2}}})
        affirm:is_equal(!!l3, {z=4, x=0, y=2, a=42})
        affirm:is_equal(!!l5, {w=15, t=16})
        affirm:is_equal(l5(), {w=15, t=16})

fun test() =
    test_map()
    test_list()
    test_lenses()


