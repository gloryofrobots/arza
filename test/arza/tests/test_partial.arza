import affirm
import list
import seq

fun add(x, y) = x + y
fun mul(x, y) = x * y

fun one () = 1

fun test_holes () =
    let
        fun add3(x, y, z) = x + y + z
        add3_0 = add3(_, 42, 24)
        add3_1 = add3(42, _, 24)
        add3_2 = add3(42, 24, _)
        add3_1_2 = add3(42, _, _)
        _add3 = add3(_, _, _)
    in
       affirm:is_equal_all(
            add3_0(1024),
            add3_1(1024),
            add3_2(1024),
            add3(_, 42, 24)(1024),
            1090
            )


    let fun negate(x) =  -x
    in affirm:is_equal(negate(_)(2), -2)

    affirm:is_equal((x -> -2 * x)(2.3), -4.6)

    let fun pi() = 3.14
    in affirm:is_throw(
            () -> pi(_)(),
            ()
       )

    let fun f(x, y, z) = x - y + z
    in
        affirm:is_equal .. (f(_, 2, 4)(6)) .. 8
        affirm:is_equal(f(2, _, 4)(6), 0)
        affirm:is_equal(f(2, 4, _)(6), 4)

        affirm:is_equal(f(2, _, _)(4, 6), 4)
        affirm:is_equal( f(_, _, 4)(2, 6), 0 )

        affirm:is_equal( f(_, 2, _)(4, 6), 8 )

fun test_partial() =
    affirm:is_equal( ~`-`(1)(2), (-1) )

    affirm:is_equal(
                partial(flip, `-`, 1)(2),
                1
    )
    affirm:is_equal(
                ~flip(`-`, 1)(2),
                1
    )
    let add1 = ~add(1)
    in
        affirm:is_equal(add1(2), 3)
        affirm:is_equal(~add(1)(2), 3)

fun test_composition() =
    let
        add1_mul2 =  ~add(1) >>  ~mul(2)
        mul2_add1 = partial(add, 1) << partial(mul, 2)
        add_1_twice = twice(~add(1))
    in
        affirm:is_equal(add1_mul2(4), 10)
        affirm:is_equal(mul2_add1(4), 9)
        affirm:is_equal(add_1_twice(9), 11)


fun test_point_free() =
    let
        fun foldr
            | ([], acc, f) = acc
            | (hd::tl, acc, f) = f(hd, foldr(tl, acc, f))

        sum = foldr(_, 0, `+`)
    in
        affirm:is_equal(sum([1,2,3,4,5]), 15)


    //let fn = f . g . h than to write let fn x = f (g (h x)).

    let
        fun add (x,y) =
            x + y

        fun neg(x) =
            -x

        fun addmul(x,y,z) =
            (x + y) * z

        anm = add(_, 2) >> neg(_) >> addmul(_, 1, 2)
        anm_r = add(_, 2) << neg(_) << addmul(_, 1, 2)
    in
        affirm:is_equal(anm(1), -4)
        affirm:is_equal(anm_r(1), -2)



fun test_pipe() =
    let
        l = list:range(0, 10)
    in
        affirm:is_equal (
            l |> seq:filter(even, _),
            [0, 2, 4, 6, 8]
        )

        affirm:is_equal(
            l |> seq:filter .. even
              |> seq:map .. (`+` .. 1),
             [1, 3, 5, 7, 9]
        )

        affirm:is_equal (
            l |> seq:filter(even, _)
              |> seq:map(`+` .. 1, _)
              |> seq:map(flip .. `-` .. 2, _),
            [-1, 1, 3, 5, 7]
        )

        affirm:is_equal(
            l |> seq:filter .. (even)
              |> seq:map .. (`+` .. 1)
              |> seq:map .. (flip .. `-` .. 2),
            [-1, 1, 3, 5, 7]
        )

        affirm:is_equal(
            l |> seq:filter(even, _)
              |> seq:map(`+`(1, _), _)
              |> seq:map(flip(`-`, 2, _), _),
            [-1, 1, 3, 5, 7]
        )

        let
            square = (x -> x * x)
            triple = `*` .. 3
        in
            affirm:is_equal (
                l |> seq:filter(even, _)
                  |> seq:map(`+` .. 1, _)
                  |> seq:map(flip .. `-` .. 2, _)
                  |> seq:map(triple >> square, _),
                [9, 9, 81, 225, 441]
            )

            affirm:is_equal (
                 (seq:filter(even, _)
                     >> seq:map(`+`(1, _), _)
                     >> seq:map(flip(`-`, 2, _), _)
                     >> seq:map(triple >> square, _))(l),
                 [9, 9, 81, 225, 441]
            )

            affirm:is_equal (
                l |> seq:filter(even, _)
                  >> ~seq:map(`+` .. 1)
                  >> seq:map(flip(`-`, 2, _), _)
                  >> ~seq:map(triple >> square),
                [9, 9, 81, 225, 441]
            )

fun test () =
    test_holes()
    test_partial()
    test_composition()
    test_point_free()
    test_pipe()
