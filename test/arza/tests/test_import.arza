import affirm
import tests:lib_az:abc:module_ab as ab
import tests:lib_az:efg:module_e as e
//
////unqualified names f_ab,f_ab_2,const
include tests:lib_az:abc:module_ab (f_ab, f_ab_2, CONST as const)
//
////ab2:f_ab
import tests:lib_az:abc:module_ab as ab2 (f_ab, f_ab_2)
//
////module_ab:f_ab, module_ab:f_ab_2
import tests:lib_az:abc:module_ab (f_ab, f_ab_2)
//
////all exported names imported
include tests:lib_az:efg:module_e

//ab_3_f_ab
include tests:lib_az:abc:module_ab  (f_ab as ab_3_f_ab)
//importing same names dont cause errors because names are equal
include tests:lib_az:abc:module_ab hiding (CONST)
//ab5:f_ab_2 only
import tests:lib_az:abc:module_ab as ab5 hiding (f_ab, CONST)

// binding funcs from two modules to same name
import tests:lib_az:abc:ts:module_s as s
import tests:lib_az:abc:ts:module_t as s

fun test() =
    affirm:is_true(f_ab == f_ab)
    affirm:is_true(ab2:f_ab == ab2:f_ab)
    affirm:is_true(ab2:f_ab == f_ab)
    affirm:is_true(ab2:f_ab == ab_3_f_ab)

    affirm:is_true(f_ab_2 == module_ab:f_ab_2)
    affirm:is_true(f_ab_2 == ab2:f_ab_2)

    affirm:is_equal(ab:f_ab_2(32, 10), 42)
    affirm:is_equal(ab:f_ab(42), 126)
    affirm:is_equal(e:f_e(f_ab(100)), -758)

    affirm:is_equal(s:t(), #T)
    affirm:is_equal(s:s(), #S)
