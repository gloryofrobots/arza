import affirm

type Val(val)

interface Pos =
    pos(Pos)

interface Neg =
    neg(Neg)

interface Abs is (Pos, Neg) =
    abs(Abs)

def neg(v of Val) = -v.val
def pos(v of Val) = v.val

def abs(v of Neg) = -42
def abs(v of Pos) = 42
def abs(v of Val) =
    if v.val < 0 then
        -v.val
    else
        v.val

def +(v1 of Int, v2 of Val) = abs(v2) + v1
def +(v1 of Int, v2 of Abs) = abs(v2) + v1
def +(v1 of Int, v2 of Pos) = 42
def +(v1 of Int, v2 of Neg) = -42

def +(v1 of Abs, v2 of Int) = abs(v1) + v2 + 100
//def +(v1 of Val, v2 of Int) = abs(v1) + v2

fun test() =
    let
        v1 = Val(-1)
    in
        affirm:is_true(Val `isimplemented` Abs)
        affirm:is_true(Val `isimplemented` Pos)
        affirm:is_true(Val `isimplemented` Neg)
        affirm:is_equal(abs(v1), 1)
        affirm:is_equal(1 + v1, 2)
        affirm:is_equal(v1 + 1, 102)
