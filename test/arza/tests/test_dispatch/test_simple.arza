import io
import affirm
import generics

/////////////////////////////////////////////

interface I =
    f1(x of I, y of I, z of I)
    f2(x of I, y of I)
    f6 (x of I, y of I, z of I, a of I, b of I,  c of I)

def f1 (x of Any, y, z) = #any
def f1 (x of Int, y, z) = #int
def f1 (x of Seq, y, z) = #seq

fun test_unary () =
    affirm:is_equal(f1(0, {}, Tuple), #int)
    affirm:is_equal(f1(1 :: 2 :: 3 :: [], 42, ()), #seq)
    affirm:is_equal(f1({}, 42, ()), #any)

def f2 (x of Int, y of Float) = #int_float
def f2 (x of Int, y of Int) = #int_int
def f2 (x of Float, y of Int) = #float_int
def f2 (x of Float, y of Float) = #float_float
def f2 (x of Int, y of Seq) = #int_seq
def f2 (x of Indexed, y of Seq) = #indexed_seq
def f2 (x of Any, y of Any) = #any_any
def f2 (x of Any, y of Seq) = #any_seq
def f2 (x of Int, y of Any) = #int_any

fun test_binary () =
    affirm:is_equal(f2(1, 0.1), #int_float)
    affirm:is_equal(f2(0.2, 0.1), #float_float)
    affirm:is_equal(f2(0.654, 1), #float_int)
    affirm:is_equal(f2(1, 1), #int_int)

    affirm:is_equal(f2((), []), #indexed_seq)
    affirm:is_equal(f2(0, []), #int_seq)

    affirm:is_equal(f2({}, {}), #any_any)
    affirm:is_equal(f2(f2, Any), #any_any)
    affirm:is_equal(f2({}, []), #any_seq)
    affirm:is_equal(f2(42, #any), #int_any)

////////////////////////////////////////////////////


def f6 (x, y of Int, z of Float, a, b, c of String) = #int_float_string
def f6 (x, y, z, a, b, c of String) = #any_any_string
def f6 (x, y of String, z, a, b, c of String) = #string_any_string


fun test_triple() =
    affirm:is_equal(f6([], 0, 0.1, [], [], "string"), #int_float_string)
    affirm:is_equal(f6([], "string1", 0.1, [], [], "string1"), #string_any_string)
    affirm:is_equal(f6([], [], 0.1, [], [], "string1"), #any_any_string)

////////////////////////////////////////////////////////

interface F =
    f(v1 of F, v2 of F)

//def f(v of Int) when v != 1 = 3
def f (v1 of Int, v2 of Int)
    | (2, 2) = 3
    | (2, 1) = 2
    | (v1 of Int, 1) = 1
    | (_, _) = 42

fun test_declaration_order() =
    affirm:is_equal([f(1, 1), f(2, 1), f(2, 2), f(3, 3)], [1, 2, 3, 42])

fun test() =
    test_unary()
    test_binary()
    test_triple()
    test_declaration_order()


