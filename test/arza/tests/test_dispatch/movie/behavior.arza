import io

interface Actor(I) =
    encounter(movie, I, I)
    kickass(movie, I, I)
    run_away(movie, I, I)
    scream(movie, I)
    sadly_die(movie, I)
    interact(movie, I, event)
    get_name(I)

interface Named =
    use get_name(actor of Named)

interface ActionActor(I) =
    use encounter(movie, actor1 of I, actor2 of I)

trait TNamed(T of ActionActor) =
    def get_name({name} of T) = name

trait TStr(T of Named) =
    def str(a of T) =  "<Actor:" ++ get_name(a) ++ ">"
    def repr(a of T) =  "<Actor:" ++ get_name(a) ++ ">"


def kickass(movie, actor1 of ActionActor, actor2 of ActionActor) =
    interact(movie, actor1, (#KICKASS, actor2)) |>
    sadly_die(_, actor2)


fun process_event(actor, event) =
    let (msg, objects) =
        match event
        | (tag, data) = (actor.lang.[tag], data)
        | tag of Symbol = (actor.lang.[tag], ())
    in (actor, msg, objects)


def interact(movie, actor of Any, event) = process_event(actor, event) :: movie


def sadly_die(movie, b of ActionActor) =
    interact(movie, b, #DIE)
