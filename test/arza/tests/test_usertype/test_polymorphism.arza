import affirm

type L(l)
type Nil
type Some(val)

interface =
    eq(self, other)

trait(T) for L =
    def len(self of T) = len(self.l)

    def is_empty(self of T) = is_empty(self.l)

    def first(self of T) = self

    def rest(self of T) = self


def eq (self of Some, val of Some) = val == Nil
def eq (self of Some, _) = False


def eq (self of Nil, {val} of Some) = val == Nil
def eq (self of Nil, _ of Nil) = True


fun test () =
    let
        s = Some(Nil)
    in
        affirm:is_true(Nil `eq` s)
        affirm:is_false(s `eq` Nil)


    let
        l1 = L([1,2,3,4,5])
    in
        affirm:is_equal(
            match l1
                | [] = #empty
                | e = #not_empty
            ,
            #not_empty
        )
