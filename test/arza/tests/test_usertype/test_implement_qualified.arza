import affirm
import tests:test_usertype:types
import tests:test_usertype:types as stuff

prefix(++-+*++, ++-+*++, 70)
infixl (+--, +--, 50)

interface =
    ++-+*++(this)
    +--(v1, v2)

type X(x)

def types:test_method_1(a1 of X, a2 of X, this of X) = a1.x + a2.x + this.x
def types:test_method_2(a1, this of X, a2) = a1.x + a2.x + this.x
def types:test_method_3(this of X, a1, a2) = a1.x + a2.x + this.x
def types:test_method_4(this of X) = this.x

def +--(x1 of X, x2 of X) = x1.x + x2.x

def ++-+*++(this of stuff:TestType) = this.val

trait (T) for stuff:TestType =
    def types:test_method_1(a1 of stuff:TestType, a2 of stuff:TestType, this of T) = a1.val + a2.val + this.val
    def types:test_method_2(a1, this of T, a2) = a1.val + a2.val + this.val
    def types:test_method_3(this of T, a1, a2) = a1.val + a2.val + this.val
    def types:test_method_4(this of T) = this.val

fun test () =
    let
        x = X(42)
        x_2 = X(-42)
    in
        affirm:is_equal(x +-- x_2, 0)
        affirm:is_equal(stuff:test_method_1(x_2, x, x), 42)
        affirm:is_equal(stuff:test_method_2(x, x_2, x), 42)
        affirm:is_equal(stuff:test_method_3(x, x, x_2), 42)
        affirm:is_equal(stuff:test_method_4(x), 42)

    let
        t = stuff:TestType(42)
        t_2 = stuff:TestType(-42)
    in
        affirm:is_equal(stuff:test_method_1(t_2, t, t), 42)
        affirm:is_equal(stuff:test_method_2(t, t_2, t), 42)
        affirm:is_equal(stuff:test_method_3(t, t, t_2), 42)
        affirm:is_equal(stuff:test_method_4(t), 42)
        affirm:is_equal(++-+*++(t), 42)
