import seq
import affirm
import io

type T1(v1, v2)
type T2(v1, v2, v3)
type T3(v1)

interface Listable(I) =
    to_list(I)

trait(T) for [T1, T2] =
    //Seq iface
    def first(this of T) = first(to_list(this))
    def rest(this of T) = rest(to_list(this))

    //not enough for Slice
    def drop(this of T, count) = seq:drop(count, to_list(this))
    def take(this of T, count) = seq:take(count, to_list(this))


def to_list(this of T1) = [this.v1, this.v2]

trait(T) for T2 =
    def to_list(this of T) = [this.v1, this.v2]
    def slice(this of T, _from, _to) = slice(to_list(this), _from, _to)

describe (T1, T2) as (Listable, Seq)
describe T2 as Slice

////////////////////////////////////////////////////////////////////////////////////////

interface E =
    e(E, E)

type X(x)

def e(x of X, y of Int) = x.x + y
def e(x of X, y of X) = x.x + y.x

fun test_multiple_args() =
    let
        x1 = X(1)
        x2 = X(2)
    affirm:is_true(isimplemented(X, E))
    affirm:is_equal(e(x1, 1), 2)
    affirm:is_equal(e(x1, x2), 3)

////////////////////////////////////////////////////////////////////////////////////////

fun test () =
    test_multiple_args()

    let
        t1 = T1(11, 23)
        t2 = T2(
                fst(take(t1, 1)),
                23,
                45
             )
    in
        affirm:is_true(kindof(t1, Seq))
        affirm:is_true(kindof(t1, Listable))
        affirm:is_true(kindof(t1, T1))
        affirm:is_false(kindof(t1, Slice))

        ///////////////////////////////////////////

        affirm:is_equal(take(t1, 2), take(t2, 2))
        affirm:is_equal(first(t1), first(t2))

        affirm:is_equal(first(rest(t1)), first(rest(t2)))

        affirm:is_true(kindof(t2, Seq))
        affirm:is_true(kindof(t2, Listable))
        affirm:is_true(kindof(t2, T2))
        affirm:is_true(kindof(t2, Slice))
