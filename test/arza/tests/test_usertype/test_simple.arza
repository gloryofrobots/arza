import affirm

interface =
    add(self, a)
    val(self)

type Zero
type Vec2(p1, p2)
type Point2(x, y)
type Some(val)
type Nil


trait(T) for Point2 =
    def add (self of T, p2 of Point2) = Point2(self.x + p2.x, self.y + p2.y)
    def add (self of T, i of Int) = Point2(self.x + i, self.y + i)
    def add (self of T, v of Vec2) = add(Vec2(self, self), v)

    def == (self of T, other of Point2) =
            self.x == other.x and self.y == other.y

    def != (self of T, other of Point2) = not (self == other)


trait(T) for Vec2 =
    def add (self of T, v of Vec2) =
        Vec2(
            add(self.p1, v.p1),
            add(self.p2, v.p2)
        )

    def add(self of T, i of Int) = Vec2 (add(self.p1, i), add(self.p2, i))
    def add(self of T, p of Point2) = Vec2 (add(self.p1, p), add(self.p2, p))

    def == (self of T, other of Vec2) = (self.p1 == other.p1) and (self.p2 == other.p2)

    def != (self of T, other) = not (self == other)


def val(self of Some) = self.val
def val(self of Nil) = self


fun test () =
    let
        p = Point2(0, 1)
        p1 = Point2(42, 42)
    in
        affirm:is_true(p == p)
        affirm:is_true(p == Point2(0, 1))
        affirm:is_false(p == p1)
        affirm:is_equal(p.0, p.x)
        affirm:is_equal(p.1, p.y)
        affirm:is_equal(p, Point2(0, 1))


    let
        v1 = Vec2(Point2(0, 1), Point2(2, 3))
        v2 = Vec2(Point2(10, 11), Point2(12, 13))
    in
        affirm:is_equal(add(v1, v2), Vec2(Point2(10, 12), Point2(14, 16)))
        // This is more clear
//        affirm:is_equal (add v1 v2) (Vec2 (Point2 10 12)  (Point2 14 16))

    let
        some = Some(11)
        none = Nil
    in
        affirm:is_equal(val(some), 11)
        affirm:is_equal(val(none), Nil)
