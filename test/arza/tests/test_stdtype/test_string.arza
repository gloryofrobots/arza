import io
import string
import affirm

fun test () =
    affirm:is_equal("AAA" ++ #BBB, "AAABBB")
    affirm:is_equal(#AAA ++ #BBB, #AAABBB)
    affirm:is_equal(#AAA ++ "BBB", "AAABBB")

    affirm:is_equal(("AAA" ++ "BBB" ++ "CCC"), "AAABBBCCC")
    affirm:is_equal(prepend('A', "BBB"), "ABBB")
    affirm:is_equal(append('A', "BBB"), "BBBA")
    affirm:is_equal(cons('A', "BBB"), "BBBA")
    affirm:is_equal(to_seq("ABCDEFG"), ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
    affirm:is_equal(slice("ABCDEFGH", 2, 6), "CDEF")
    affirm:is_equal(drop("ABCDEFGH", 2), "CDEFGH")
    affirm:is_equal(take("ABCDEFGH", 2), "AB")
    affirm:is_equal(string:reverse("ABCDEFGH"), "HGFEDCBA")

    affirm:is_equal(string:split("x", "AxBxAxCxAx"), ["A", "B", "A", "C", "A", ""])
    affirm:is_equal(string:split("xy-1", "Axy-1Fxy-1Exy-1Dxy-1CBAAAA"), ["A", "F", "E", "D", "CBAAAA"])
    affirm:is_equal(string:split("x", "x1x2x3x4x5"), ["", "1", "2", "3", "4", "5"])

    affirm:is_equal(string:join(["x", "y", "1", "Z", "V"], ""), "xy1ZV")
    affirm:is_equal(string:join(["x", "y", "1", "Z", "V"], "<><>"), "x<><>y<><>1<><>Z<><>V")

    affirm:is_equal(
        string:join_cast([1,2, ["1", 2,3,4], (1,2,"ABC")], "---"),
        """1---2---[1, 2, 3, 4]---(1, 2, ABC)"""
    )

    affirm:is_elem(str({x=1, y=2}), ["{x=1, y=2}", "{y=2, x=1}"])
    affirm:is_equal(str({x=1}), "{x=1}")
    affirm:is_equal(str({}), "{}")

    affirm:is_equal(str((1,2,3,4)), "(1, 2, 3, 4)")
    affirm:is_equal(str((1,)), "(1,)")
    affirm:is_equal(str(()), "()")
    affirm:is_equal(str([1,2,3,4]), "[1, 2, 3, 4]")
    affirm:is_equal(str([1]), "[1]")
    affirm:is_equal(str([]), "[]")
