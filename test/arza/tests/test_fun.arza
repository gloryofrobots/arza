import affirm
import list
import seq


// SYNTAX
fun ++++/() = 42
fun ++>>(x, y) = 42
fun ++-+(x, y) = 42
fun ++---^--^(x, y)
    | (x, y) = 42


// compiler single pass problem example
//    I decided not to optimize it.
//    [fun length(x) = 1 + length(x - 1) when x > 0 else 0 ]
//    fun Y(y) = length(y)
//    Y(3)

fun test_recursive() =
    let fun f(list)
        | x::xs =
             affirm:is_equal(list, list:range_to(5))
             f(xs)
        | [] = ()

    in f(list:range_to(5))

    let fun f2(list) =
        let _list = list
            fun f2(l)
                | x::xs =
                    affirm:is_equal(list, _list)
                    f2(xs)
                | [] = ()

        in f2(list)

    in f2(list:range_to(5))

fun test_simple () =
    let
        fun f_s (x, y, ...rest) = (x + y, rest)
        fun f_s2 (x, y, ...rest) when x > 10 = (x + y, rest)
        fun f_s3 (w, {y, z=10}, [a,b,c, ...tl], x::xs, ...rest)
            when c == 42 and y == True =
                {w=w, y=y, z=z, a=a, b=b, c=c, tl=tl, x=x, xs=xs, rest=rest}

    in
        affirm:is_equal(f_s(2, 3, 4, 5, 6), (5, (4, 5, 6)))
        affirm:is_equal(f_s2(12, 3, 4, 5, 6), (15, (4, 5, 6)))
        affirm:is_equal(
            f_s3(
                #w,
                {n=12, y=True, z=10},
                [40, 41, 42, 43, 44, 45],
                list:range(100, 110),
                #a, #b, #c, #d, #e, #f, #g, #h, #k, #l, #m, #n, #o, #p
            ),
            {z=10, xs=[101, 102, 103, 104, 105, 106, 107, 108, 109],
             x=100, y=True, w=#w, tl=[43, 44, 45],
             rest=("a", "b", "c", "d", "e", "f", "g", "h", "k", "l", "m", "n", "o", "p"),
             b=41, c=42, a=40}
        )


fun test_case () =
    let
        fun f_c1
            | (a, b, c) = a + b + c

        fun f_c2
            | (a of Bool, b of String, c) = #first
            | (a of Bool, b, c) = #second
            | (a, b, c) = #third

        fun f_c3
            | (0, 1, c) when c < 0 =  #first
            | (a of Bool, b of String, c) = #second
            | (a of Bool, b, c) when b + c == 40 = #third
    in
        affirm:is_equal(f_c1(1, 2, 3), 6)

        affirm:is_equal(f_c2(False, "", 42), #first)
        affirm:is_equal(f_c2(False, 42, 42), #second)
        affirm:is_equal(f_c2(42, 42, 42), #third)

        affirm:is_equal(f_c3(0, 1, -3), #first)
        affirm:is_equal(f_c3(False, "hello", 42), #second)
        affirm:is_equal(f_c3(False, 19, 21), #third)


fun test_base () =
    let func_0 = fun (a, b, c) = (a, b, c)
    in affirm:is_equal(func_0(1, 2, 3), (1,2,3))
    //call fun expression
    affirm:is_equal(
        (fun (a,b,c) = (c, b, a))(1,2,3),
        (3,2,1)
    )

    affirm:is_equal(
        ((a,b,c) -> (c, b, a))(1,2,3),
        (3,2,1)
    )

    //////////////////////////////////////////////////////////////////////////

    let fun f4(a, b, c, ...rest) = [a, b, c, rest]
    in affirm:is_equal(f4(1, 2, 3, 4, 5, 6),  [1, 2, 3, (4, 5, 6)])

    //////////////////////////////////////////////////////////////////////////

    let fun f5 (a1, a2, a3, a4, a5, ...rest)
        | (x, (y,z), a, b, {name=name, age=(years, month)}, _) =
            (x, y, z, a, b, name, years, month, rest)

    in affirm:is_equal(
        f5(1, (2,3), 4, 5,  {name=6, age=(7,8)}, 9, 10, 11, 12),
        (1, 2, 3, 4, 5, 6, 7, 8, (9, 10, 11, 12))
    )

    //////////////////////////////////////////////////////////////////////////

    let
        fun fact(n)
            | 0 = 1
            | n = n * fact (n - 1)
    in
        affirm:is_equal(fact(7), 5040)
        affirm:is_equal(fact(0), 1)

    let
        fun func1(a1, a2, a3, a4, a5, a6, a7, a8, ...a9)
            | (1, 2, 3, 4, 5, var0, var1, var2, var4) = (var0, var1, var2, var4)
            | (_, _, _, _, _, _, _, {key1, var1 @ key2, key3=25},  ([var2, #second, var3 @ #third, ...var4])) =
                (var1, var2, var3, var4)

    in
        affirm:is_equal(func1(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), (6, 7, 8, (9, 10, 11)))

        affirm:is_equal(
                func1(42, 42, 42, 42, 42, 42, 42, {key1=#key1, key2=#key2, key3=25},
                         [#first, #second, #third, 4,5,6,7]),
                (#key2, #first, #third, [4, 5, 6, 7])
        )

    affirm:is_equal(
        apply(
            () -> #empty,
            ()
        ),
        #empty
    )

    affirm:is_equal(
            (() -> #empty)(...())
        ,
        #empty
    )
    let fun func3(arg)
        | 1 = #first
        | 42 = #second
        // previous cases are tuples of 1 argument, so single () will cause error
        | (()) = #third

    in affirm:is_equal_batch(
        func3,
        ([1], #first),
        ([42], #second),
        ([()], #third)
    )

    let
        // when possible function compiles
        // into destructive assignment automaton instead of more complicated pattern matching graph
        //destruct func
        fun fn_simple(arg1, arg2, ...rest) = (arg1, arg2, rest)
        //case func
        fun fn_case(arg1, arg2 of Int,  ...rest) = (arg1, arg2, rest)
    in affirm:is_equal(fn_simple(0, 1, 4, 5, 6), fn_case(0, 1, 4, 5, 6))

    ////////////////////////////////////////////////////
    let
        //destruct func
        fun fn_simple1(a1, a2, a3, ...a4)
            | (arg1, arg2, {key1, key2}, rest) = (arg1, arg2, key1, key2, rest)

        //case func
        fun fn_case1(arg1, arg2, a3, ...rest)
            | (_,  _, { var1 @ key1=2, key2} of Map, _) = (arg1, arg2, var1, key2, rest)

        //case func 2
        fun fn_case2(arg1, arg2, a3 of Map, ...rest) =
            let { var1 @ key1=2, key2} = a3
            in (arg1, arg2, var1, key2, rest)

    in
        affirm:is_equal(
            fn_simple1(0, 1, {key1=2, key2=3}, 4, 5, 6),
            fn_case1(0, 1, {key1=2, key2=3}, 4, 5, 6)
        )
        affirm:is_equal(
            fn_simple1(0, 1, {key1=2, key2=3}, 4, 5, 6),
            fn_case2(0, 1, {key1=2, key2=3}, 4, 5, 6)
        )

    ////////////////////////////////////////////////////

    //tuple args here
    affirm:is_equal(
            (((x,y),) -> x + y)((2, 3)),
            5
    )

    ////////////////////////////////////////////////////
    let
        fun fn_fail(arg)
            | 1 = #one
            | 2 = #two
            | 3 = #three
            | 4 = #four
    in
        affirm:is_equal_batch(
                            fn_fail,
                            ([1], #one),
                            ([2], #two),
                            ([3], #three),
                            ([4], #four)
        )

        affirm:is_throw(fn_fail, [5])
        affirm:is_throw_expected(fn_fail, [0], (#FunctionArgumentsMatchError, (0,)))
        affirm:is_equal(
                    try fn_fail("I am string")
                    catch exc = [exc, exc, exc]
                    ,
                    [(#FunctionArgumentsMatchError, ("I am string",)),
                     (#FunctionArgumentsMatchError, ("I am string",)),
                     (#FunctionArgumentsMatchError,("I am string",))]
        )

    ////////////////////////////////////////////////
    //Empty args first
    affirm:is_equal_batch(
                    fun | ((), ()) = 42
                        | (x, y) = x + y
                    ,
                    [[1,2], 3],
                    [[(), ()], 42]
    )

    ////////////////////////////////////////////////

    affirm:is_equal((fun () = 42)(), 42)
    affirm:is_equal((() -> 42)(), 42)

    ////////////////////////////////////////////////
    let
        fun f2() = 42
        fun add(x, y) = x + y + f2()
        f1 = (x, y) -> add(x, y)
    in
        affirm:is_equal(f1(1, 2), 45)

    ////////////////////////////////////////////////
    let
        fun f3 (x, l)
           | (_, [a, b]) = x + a + b
        f4_1 = (x, [a, b]) -> x + a + b
    in
        affirm:is_equal(f3(1, [2, 3]), f4_1(1, [2, 3]))
        affirm:is_equal(f4_1(1, [2, 3]), 6)
        affirm:is_equal(
            (fun (x, [a,b,c,...tl], {N, Z}) =
                (x + a + b + c + N + Z) :: tl)(
                    1,  [1, 1, 1, 33,33,33], {N=1, Z = 1}
                 )
            ,
            [6, 33, 33, 33]
       )

fun test() =
    test_simple ()
    test_case ()
    test_recursive ()
    test_base()
