import arza:lang:_number
import arza:lang:_std_behavior as std_behavior
import arza:lang:_datatype as datatype


fun TEq(T) =
    def ==[T] (self, other) as std_behavior:equal
    def !=[T] (self, other) as  std_behavior:not_equal

fun TStr(T) =
    def str[T](self) as std_behavior:str
    def repr[T] (self) as std_behavior:repr

fun TRepr(T) =
    def repr[T] (self) = str(self)

fun TOrder(T) =
    def <[T] (x, y) = cmp(x, y) == LT

    def >=[T] (x, y) = cmp(x, y) != LT

    def >[T] (x, y) = cmp(x, y) == GT

fun TCmp(T) =
    def cmp[T] (x, y) =
        if x == y then EQ
        elif x <= y then LT
        else GT

fun TMinMax(T) =
    def max[T] (x, y) =
        if x <= y then y
        else x


    def min[T] (x, y) =
        if x <= y then x
        else y

fun TNum(T) =
    extend T
        def - (x of T, y) as _number:sub
        def + (x of T, y) as _number:add
        def * (x of T, y) as _number:mul
        def / (x of T, y) as _number:div
        def mod (x of T, y) as _number:mod
        def negate (x of T) as _number:negate
        def ** (x of T, y) as  _number:pow

        def <= (x of T, y) as _number:le

        TEq(T)
        TStr(T)
        TCmp(T)
        TMinMax(T)
        TOrder(T)

TNum(Float)
TNum(Int)

