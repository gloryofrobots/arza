import arza:lang:_number
import io
import behavior


derive (Eq, Displayed) for (
        Function,
        Generic,
        Partial,
        Datatype,
        Bool,
        Interface
)

//////// NUM

trait TNum(T) =
    behavior:TEq(T)
    behavior:TStr(T)

    def - (x of T, y) as _number:sub
    def + (x of T, y) as _number:add
    def * (x of T, y) as _number:mul
    def / (x of T, y) as _number:div
    def mod (x of T, y) as _number:mod
    def negate (x of T) as _number:negate
    def ** (x of T, y) as  _number:pow

    def <= (x of T, y) as _number:le

TNum(Float)
TNum(Int)

derive (LessEq) for (Float, Int)

behavior:TCmp(Int, Any)
behavior:TCmp(Float, Any)

derive (Comparable) for (Float, Int)
behavior:TMinMax(Int, Any)
behavior:TMinMax(Float, Any)

behavior:TOrder(Float, Any)
behavior:TOrder(Int, Any)

derive (Ord, Num, Pow, Eq, Displayed) for (Float, Int)