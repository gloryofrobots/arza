import arza:lang:_tuple
import string
import std
import io


trait __Tuple(T) for Tuple =
    instance std:TEq(T)

    def put (self of T, k, v) as std_behavior:put
    def del (el, self of T) as std_behavior:del
    def has (self of T, el) as std_behavior:has
    def is_empty (self of T) as std_behavior:is_empty
    def len (self of T) as std_behavior:len

    def ++ (t1 of T, t2 of T) as _tuple:concat
    def prepend(v, self of T) as _tuple:prepend
    def to_seq(self of T) as _tuple:to_list
    def slice(self of T, first, last) as _tuple:slice
    def drop(self of T, x) as _tuple:drop
    def take(self of T, x) as _tuple:take

    def index_of(el, self of T) as _tuple:index_of

    def repr(self of T) =
        if len(self) == 1 then
            "(" ++ repr(at(self, 0)) ++ ",)"
        else
            "(" ++ string:join_with(repr, to_seq(self), ", ") ++ ")"

    def str(self of T) =
        if len(self) == 1 then
            "(" ++ str(at(self, 0)) ++ ",)"
        else
            "(" ++ string:join_with(str, to_seq(self), ", ") ++ ")"


describe Tuple as (Eq, Repr,
       Len, Coll,
       Prepend, Concat, Indexed,
       ToSeq, Slice)


fun ensure_tuple
    | t of Tuple = t
    | v = (v,)


fun split
    | ((x)) = (x, ())
    | ((x, ...rest)) = (x, rest)
