import arza:lang:_tuple
import string
import std
import io


std:TEq(Tuple)
extend Tuple
    def put (self, k, v) as std_behavior:put
    def del (self, el) as std_behavior:del
    def has (self, el) as std_behavior:has
    def is_empty (self) as std_behavior:is_empty
    def len (self) as std_behavior:len

    def ++ (t1, t2) as _tuple:concat
    def prepend(self, v) as _tuple:prepend
    def append(self, v) as _tuple:append
    def to_seq(self) as _tuple:to_list
    def slice(self, first, last) as _tuple:slice
    def drop(self, x) as _tuple:drop
    def take(self, x) as _tuple:take

    def index_of(self, el) as _tuple:index_of

    def repr(self) =
        if len(self) == 1 then
            "(" ++ repr(at(self, 0)) ++ ",)"
        else
            "(" ++ string:join_with(", ", to_seq(self), repr) ++ ")"

    def str(self) =
        if len(self) == 1 then
            "(" ++ str(at(self, 0)) ++ ",)"
        else
            "(" ++ string:join_with(", ", to_seq(self), str) ++ ")"


fun ensure_tuple
    | tuple = t
    | v = (v,)


fun split
    | ((x)) = (x, ())
    | ((x, ...rest)) = (x, rest)
