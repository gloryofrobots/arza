fun f
    | (x, y, z) {
        1 + 1
        2 + 2
    }
    | {x=y, z=t} {
        match {y=0, b=6}
            | {y=0, b=6} = 1
            | {y=0, b=6} {
                1
            }

        1 + 2
        2 + 2
    }
    | x = 1
    | y = 2

fun f
    | (x, y, z) = (
        1 + 1
        2 + 2
    )
    | {x=y, z=t} = (
        match {y=0, b=6}
            | {y=0, b=6} = 1
            | {y=0, b=6} =
                ( f(2)
                  1 + 1 )
        1 + 2
        2 + 2
    )
    | x = 1
    | y = 2

fun f
    | (x, y, z) =
        1 + 1
        2 + 2

    | {x=y, z=t} =
        match {y=0, b=6}
            | {y=0, b=6} = 1
            | {y=0, b=6} =
                ( f(2)
                  1 + 1 )
        end
        1 + 2
        2 + 2
    | x = 1
    | y = 2
end



affirm:is_equal (add v1 v2) (Vec2 (Point2 10 12)  (Point2 14 16))

(affirm:is_equal
    (fun (x y) =
        print x y
        z = x + sqrt x
        transpose x y (sum (x,y,z))
    )
    (Vec2
        (Point2 10 12)
        (Point2 14 16)))

(fun filter(predicate coll) =
    (fun _wrap(yield) =
        (fun _filter
            | (p []) = empty(coll)
            | (p x::xs) =
                (if p x then
                    yield x
                    (io.print
                        (match x
                            | 0 = #null
                            | 1 = #one
                            | (a, b, c) = a + b + c
                        )
                    )
                    _filter p xs
                else
                    io.print x
                    _filter p xs
                )
        )
        _filter predicate coll
    )
    coroutine _wrap
)

(fun loop (...a) =
        (init_fn, args) = tuple:split a
        (co = spawn
            (fun (yield) =
                (fn = init_fn
                    (fun (...args) =
                        apply yield args
                        apply fn args
                    )
                )
                yield ()
                apply fn args
            )
        )
   co ()
   co
)


(fun var (v) =
    co = (coroutine
            (fun (yield v) =
                (fun loop(v) =
                    msg = yield v
                    (match msg
                        | #Read = loop(v)
                        | (#Write, new_val) =
                            loop new_val
                    )
                )
            )
        )
    co v
    Var co
)

(fun nbn_1 () =
    (fun _loop (n g) =
        (if g == 1 or n < g then
           1
        else
            (seq:foldl
                (fun _folder(q res) =
                    (if q > n - g then
                        x = 0
                    else
                        x = _loop (n-g) q
                    )

                    res + x
                )
                1
                (list:range 2 g)
            )
         )
    )
    (string:join
        (seq:map
            (n => string:join_cast
               (seq:map (g => _loop n g)
                        (list:range 1 n))
               " ")
            (list:range 1 25))
         "\n")
)

(fun nbn_3 () =
    (string:join
        (seq:map
            (fun(n) => string:join_cast
               (seq:map (fun (g) =
                            (fun _loop (n g) =
                                (if g == 1 or n < g then 1
                                else
                                    (seq:foldl
                                        (fun (q res) =
                                            res + 0 if q > n - g else (_loop (n-g) q)
                                        )
                                        1
                                        (range 2 g)
                                    )
                                )
                            ) n g)
                        (range 1 n)
               )
            " "
            )
           (range 1 25)
        )
        "\n"
    )
)
