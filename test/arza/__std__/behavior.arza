import arza:lang:_std_behavior as std_behavior
from arza:lang:_datatype import (record_values, record_keys, record_index_of)

trait TEq(T) =
    def == (self of T, other) as std_behavior:equal
    def != (self of T, other) as  std_behavior:not_equal

trait TStr(T) =
    def str (self of T) as std_behavior:str
    def repr (self of T) as std_behavior:repr

trait TRecord(T) =
    def index_of (val, self of T) as record_index_of
    def keys(self of T) as record_keys
    def values(self of T) as record_values

    def put (k, v, self of T) as std_behavior:put
    def at (k, self of T) as std_behavior:at
    def del (el, self of T) as std_behavior:del
    def elem (el, self of T) as std_behavior:elem
    def len (self of T) as std_behavior:len
    def is_empty (self of T) as std_behavior:is_empty
    def cast(to_what, self of T) as std_behavior:cast

trait TRepr(T) =
    def repr (self of T) = str(self)

trait TOrder(T1, T2) =
    def < (x of T1, y of T2) = cmp(x, y) == LT

    def >= (x of T1, y of T2) = cmp(x, y) != LT

    def > (x of T1, y of T2) = cmp(x, y) == GT

trait TCmp(T1, T2) =
    def cmp (x of T1, y of T2) =
        if x == y then EQ
        elif x <= y then LT
        else GT

trait TMinMax(T1, T2) =
    def max (x of T1, y of T2) =
        if x <= y then y
        else x


    def min (x of T1, y of T2) =
        if x <= y then x
        else y

