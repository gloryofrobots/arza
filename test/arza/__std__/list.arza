import arza:lang:_list
include arza:lang:_list (head, tail)
import seq
import string
import std


fun range_to(last of Int) = range(0, last)


fun range(first of Int, last of Int) =
    let
        step =
            if last < 0 then -1
            else 1
    in range_by(first, last, step)
--------------------------------------------------


fun range_by (first of Int, last of Int, step of Int) =
    let fun _range_by
        | (N, X, D, L) when N >= 4 =
            let
                Y = X - D
                Z = Y - D
                W = Z - D
            in
                _range_by(N - 4, W - D, D, W :: Z :: Y :: X :: L)

        | (N, X, D, L) when N >= 2 =
            let Y = X - D
            in _range_by(N - 2, Y - D, D, Y :: X :: L)

        | (1, X, _, L) = X :: L

        | (0, _, _, L) = L
    --------------------------------------------------
    in
        if step > 0 and first - step <= last or
            step < 0 and first - step >= last then

            let n = ((last - first + step) / step) - 1
            in _range_by(n, (step * (n - 1) + first), step, [])

        elif step == 0 and first == last then
            _range_by(1, first, step, [])
        else
            throw (#InvalidRange, first, last, step)
--------------------------------------------------


fun replicate(count, hasent) =
    if count >= 0 then
        let fun _replicate
            | (0, _, l) = l
            | (n, x, l) = _replicate(n - 1, x, x :: l)

        in _replicate(count, hasent, [])
    else
        throw ValueError(count)
---------------------------------------------------

extend List
    def != (self, other) as std_behavior:not_equal
    def ==(self, other) = seq:equal(self, other)

    def put (self, k, v) as std_behavior:put
    def at (self, k) as std_behavior:at
    def del (self, k) as std_behavior:del
    def has (self, el) as std_behavior:has


    def repr(self) =
        "[" ++ string:join_with(", ", self, repr) ++ "]"

    def str(self) =
        "[" ++ string:join_with(", ", self, str) ++ "]"

    def first(self) = _list:head(self)

    def rest(self) = _list:tail(self)

    def cons(value, self) = _list:cons(value, self)

    def to_seq(self) = self
    def from_seq(self) = self

    def len(self) = _list:length(self)

    def is_empty(self) = _list:is_empty(self)

    def empty(self) = []

    def slice(self, first, last) as _list:slice

    def drop(self, count) as _list:drop

    def take(self, count) as _list:take

    def append(self, val) = seq:append(val, self)
--------------------------------------------------

def ++[List,List] (l1, l2) = seq:concat(l1, l2)
def ++[Tuple, List] (tuple, l) = t ++ _list:to_tuple(l)
def ++[List, Tuple] (l, tuple) = _list:to_tuple(l) ++ t
