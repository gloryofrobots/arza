//////////////////////////////////////////////////
// Lense
//////////////////////////////////////////////////

fun get_branch(l of Lense) =
    let
        {source, getter} = __unpack(l)
    in getter(source)

fun __unpack(l) =
    match downcast(l)
        | {source, getter, setter} as result = result

extend Lense
    def &(l) = downcast(l).source
    def &&(l) = get_branch(l)

    def <-(l, value) =
        let
            {source, getter, setter} = __unpack(l)
            new_source = setter(value, source)
        in L(new_source, getter, setter)

    def put(l, key, value) =
        let
            {source, getter, setter} = __unpack(l)
            branch = get_branch(l)
            new_value = put(branch, key, value)
        in
            l <- new_value

    def at(l, key) =
        let
            {source, getter, setter} = __unpack(l)
            branch = get_branch(l)
        in
            at(branch, key)

    def has(l, key) =
        let
            {source, getter, setter} = __unpack(l)
            branch = get_branch(l)
        in
            has(branch, key)

    def str(l) = str(get_branch(l))
    def repr(l) = "<Lense:" ++ str(l) ++ " >"

    def call(l, args) =
        match args
        | (value) = l <- value
        | () = &&l

