import arza:lang:_array
import string
import io
import std


std:TEq(Array)
extend Array
    def at (self, k) as std_behavior:at
    def put (self, k, v) as std_behavior:put
    def del (self, el) as std_behavior:del
    def has (self, el) as std_behavior:has
    def is_empty (self) as std_behavior:is_empty
    def len (self) as std_behavior:len

    def ++ (a1, a2) as _array:concat

    def prepend(self, v) as _array:prepend
    def append(self, v) as _array:append

    def slice(self, first, last) as _array:slice
    def drop(self, x) as _array:drop
    def take(self, x) as _array:take

    def index_of(self, el) as _array:index_of

    def repr(self) =
        if len(self) == 1 then
            "Array(" ++ repr(at(self, 0)) ++ ",)"
        else
            "Array(" ++ string:join_with(", ", to_seq(self), repr) ++ ")"

    def str(self) =
        if len(self) == 1 then
            "Array(" ++ str(at(self, 0)) ++ ",)"
        else
            "Array(" ++ string:join_with(", ", to_seq(self), str) ++ ")"

//    def cast(Seq, self) = to_seq(self)
--------------------------------------------------

type ArraySeq (arr, index, dest)
type ArraySeqEmpty (dest)

extend ArraySeq =
    def to_seq(self) = self

    def first({arr, index}) = arr.[index]

    def rest(A(arr, index, dest)) =
        let
            l = len(arr) - index
        in
            if l <= 0 then
                ArraySeqEmpty(dest)
            else
                A(arr, index + 1, dest)


    def is_empty({arr, index}) = index >= len(arr)

    def empty(self) = ArraySeqEmpty(self.dest)

    def len({arr, index}) =
        let
            l = len(arr) - index
        in
            if l < 0 then 0
            else l

    def cons(v, A(arr, index, dest)) =
        A(arr, index+1, prepend(dest, v))


--------------------------------------------------

extend ArraySeqEmpty
    def to_seq(self) = self
    def first(self) = throw EmptySeqError("ArraySequence is empty")

    def rest(self) =
        throw EmptySeqError("ArraySequence is empty")

    def empty(self) = self

    def is_empty(self) = True

    def len(self) = 0

    def cons(v, self) =
        prepend(self.dest, v)
        self

    def from_seq(self) = self.dest


--------------------------------------------------

def to_seq[Array] (self) = ArraySeq(self, 0, array())

fun map (f, arr) =
    let
        size = len(arr)
        fun _map
            | (index, result) when index >= size = result
            | (index, result) =
                _map(
                    index + 1,
                    append(result, f(arr.[index]))
                )
    in
        _map(0, array())

