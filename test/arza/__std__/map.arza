import arza:lang:_map
import string
import std
import seq

use Map as 0
in
(
    def != (self, other) as std:Behavior.[`!=`]
    def == (self, other) as std:Behavior.[`==`]
)

use Map as ...
in
(
    def put (k, v, self) as std:Behavior.[put]
    def del (el, self) as std:Behavior.[del]
    def elem (el, self) as std:Behavior.[elem]
    def is_empty (self) as std:Behavior.[is_empty]

    def repr(self) = str(self)

    def str(self) =
        let fun _joiner((fst, snd)) =
            str(fst) ++ "=" ++ repr(snd)
        in "{"
                ++ string:join_with(_joiner, to_seq(self), ", ") ++
           "}"

    def to_seq(self) = _map:to_list(self)

    def keys(self) = seq:map(at .. 0, to_seq(self))
    def values(self) = seq:map(at .. 1, to_seq(self))
)

derive (Eq, PartialEq, Str, Displayed,
       Collection, ReadOnlyCollection,
       Dict, Seqable) for Map