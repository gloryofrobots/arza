import seq

type Creature(name, health, id)
    init(self, name, health) =
        self.{name=name, health=health, id=None}


type Goblin(...Creature)
    init(self, name) =
        super(Creature, self, name, 100)

type Game(creatures, id_count)
    init(self) =
        self.{creatures = {}, id_count=0}

fun create_creature({id_count} as game, _type, ...args) =
    let creature = _type(...args).{id=id_count}
    in creature

fun add_creature(game, creature) =
    game.{
        id_count = id_count + 1,
        creatures = @.{
            (id_count) = creature.{id=id_count}
        }
    }

fun remove_creature(game, {id}) =
    io:print(id)
    game.{
        creatures = del(id, @)
    }

fun main() =
    let
        g1 = Goblin(#Grogdo)
        g2 = Goblin(#Captra)
        game = Game()
            |> add_creature(_, g2)
            |> add_creature(_, g1)
            |> remove_creature(_, g2)
    in
        io:print(game)

