import io
import affirm
import seq
import list

//import tests:test_operators

//import tests:test_dispatch
//import tests:test_expressions
//import tests:test_match
//import tests:test_exception
//import tests:test_static_refs
//import tests:test_operator_override
//import tests:test_import
//import tests:test_fun
//import tests:stdtype:test_stdtype
//import tests:usertype:test_usertype
//import tests:test_coro
//import tests:test_partial


fun log(...msgs) =
    if True then
        io:print(...msgs)
    else
        ()

fun test() =
(
    log("RUN TESTS")

//    log("TEST EXPRESSIONS")
//    test_expressions:test()
//
//    log("TEST MATCH")
//    test_match:test()
//
//    log("TEST EXCEPTION")
//    test_exception:test()
//
//    log("TEST STATIC REFS")
//    test_static_refs:test()
//
//    log("TEST IMPORT")
//    test_import:test()
//
//    log ("TEST OP OVERRIDE")
//    test_operator_override:test()
//
//    log("TEST FUN")
//    test_fun:test()
//
//    log("TEST STD TYPES")
//    test_stdtype:test()

//    log("TEST TYPES")
//    test_usertype:test()

//    log("TEST CORO")
//    test_coro:test()
////
//    log("TEST PARTIAL")
//    test_partial:test()
//
//    log "TEST OPERATORS"
//    test_operators:test()
)

type
(
    Pig(weight, coolness)
    Elephant(weight, shyness)
)

generic
(
    made (`s1, `s2)
    give_birth(`mother, `father)
)

interface
(
    FirstMade(made.0)
    SecondMade(made.1)
    FirstMother(made.0, give_birth.0)
)

def made [Pig, Elephant] (p, e) =
(
    if p.coolness - e.shyness > 0 then
        True
    else
        False
)

// TODO as
//def at [Pig]
//    | (#weight, self) = (#weight, (self as Any).weight)
//    | (#coolness, self) = (#coolness, (self as Any).coolness)
//    | (k, self) = throw KeyError(k)

import std
def at [Pig]
    | (#weight, self) = (#this_is_not_my_real_weight, std:Behavior.[at](#weight, self))
    | (key, self) = std:Behavior.[at](key, self)

def made [Elephant, Pig] as flip2(made.[[Pig, Elephant]])

fun main() =
(
    let
        p = Pig(100, 100)
        e = Elephant(1000, 90)
    in
    (
        io:print(at.[Generic])
        io:print(p.weight)
        io:print(made(p, e))
//        io:print(made(e, p))
    )
//    test()
)
