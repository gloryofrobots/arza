import lalan:lang:_tuple
import string
import std
import io

use Tuple as 0
in
(
    def != (self, other) as std:Behavior.[`!=`]
    def == (self, other) as std:Behavior.[`==`]
)

use Tuple as ...
in
(
    def put (k, v, self) as std:Behavior.[put]
    def del (el, self) as std:Behavior.[del]
    def elem (el, self) as std:Behavior.[elem]
    def len (self) as std:Behavior.[len]
    def is_empty (self) as std:Behavior.[is_empty]

    def ++ (t1, t2) as _tuple:concat
    def prepend(v, self) as _tuple:prepend
    def to_seq(self) as _tuple:to_list
    def slice(first, last, self) as _tuple:slice
    def drop(x, self) as _tuple:drop
    def take(x, self) as _tuple:take

    def index_of(el, self) as _tuple:index_of

    def repr(self) =
    (
        if len(self) == 1 then
            "(" ++ repr(at(0, self)) ++ ",)"
        else
            "(" ++ string:join_with(repr, to_seq(self), ", ") ++ ")"
    )

    def str(self) =
    (
        if len(self) == 1 then
            "(" ++ str(at(0, self)) ++ ",)"
        else
            "(" ++ string:join_with(str, to_seq(self), ", ") ++ ")"
    )
)

fun ensure_tuple
    | t of Tuple = t
    | v = (v,)

fun split
    | ((x)) = (x, ())
    | ((x, ...rest)) = (x, rest)

