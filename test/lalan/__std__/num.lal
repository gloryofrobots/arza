import std
import lalan:lang:_number
import io

extend
    Float
    Int
with
(
    def {==, !=, str, repr} from std:Behavior
    def - as _number:sub
    def + as _number:add
    def * as _number:mul
    def / as _number:div
    def mod as _number:mod
    def negate as _number:negate
    def ** as  _number:pow

    def <= as _number:le
)



//extend
//    Int
//with
//(
//    def range(first, last of Int) ->
//        range_by(first, last, 1)
//
//    def range_by(first, last of Int, step of Int) ->
//        cmp =
//            if step > 0 then `>=`
//            elif step < 0 then `<=`
//            else throw ValueError ("Step can not be zero")
//
//        fun _progression _compare x last step  ->
//            if _compare x last then
//                []
//            else
//                x ::: _progression _compare (x + step) last step
//
//
//        _progression cmp first last step
//
//    def range_from first  -> range_from_by first 1
//
//    def range_from_by first (step of Int) ->
//        fun _progression x step ->
//            x ::: _progression (x + step) step
//
//        _progression first step
//)

