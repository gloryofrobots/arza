import lalan:lang:_api
import lalan:lang:_datatype

def repr (self of Any) = str(self)

def < (x of Comparable, y) = cmp(x, y) == LT
def >= (x of Comparable, y) = cmp(x, y) != LT
def > (x of Comparable, y) = cmp(x, y) == GT

def cmp (x of LessEq, y) =
            if x == y then EQ
            elif x <= y then LT
            else GT

def max (x of LessEq, y) = if x <= y then y else x
def min (x of LessEq, y) = if x <= y then x else y


/////////////////////////////

import lalan:lang:_generic

def at (k, self of Map) as _api:at
def at (el, self of Tuple) as _api:at
def at (t, self of Generic) as _generic:get_method

/////////////////////////////////////////////

let Behavior =
{
    //Eq
    (`!=`) = (x, y) -> not (x == y),

    (`==`) = (self, other) -> _api:equal(other, self),

    (str) = (self) -> _api:to_string(self),

    (repr) = (self) -> _api:to_repr(self),

    (put) = (key, value, self) -> _api:put(key, value, self),
    (at) = (key, self) -> _api:at(key, self),
    (del) = (key, self) -> _api:del(key, self),
    (elem) = (key, self) -> _api:elem(key, self),

    (len) = (self) -> _api:length(self),
    (is_empty) = (self) -> _api:is_empty(self)
}

/////////////////////////////////

use Instance as ...
in
(
    def index_of (val, self) = _datatype:record_index_of(val, self)
    def keys(self) = _datatype:record_keys(self)
    def values(self) = _datatype:record_values(self)

    def put (k, v, self) as Behavior.[put]
    def at (k, self) as Behavior.[at]
    def del (el, self) as Behavior.[del]
    def elem (el, self) as Behavior.[elem]
    def len (self) as Behavior.[len]
    def is_empty (self) as Behavior.[is_empty]
)


use
    (Singleton,
     Function,
     Generic,
     Partial,
     Datatype,
     Bool,
     Instance,
     Env) as 0
in
(
    def != (self, other) as Behavior.[`!=`]
    def == (self, other) as Behavior.[`==`]

    def str (self) as Behavior.[str]
    def repr (self) as Behavior.[repr]
)

use Env as ...
in
(
    def put (k, v, self) as Behavior.[put]
    def at (k, self) as Behavior.[at]
    def del (el, self) as Behavior.[del]
    def elem (el, self) as Behavior.[elem]
    def len (self) as Behavior.[len]
    def is_empty (self) as Behavior.[is_empty]
)
