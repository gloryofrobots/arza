import lalan:lang:_api
import lalan:lang:_datatype

def repr [Any] (self) = str(self)

def < [Comparable] (x, y) = cmp(x, y) == LT
def >= [Comparable] (x, y) = cmp(x, y) != LT
def > [Comparable] (x, y) = cmp(x, y) == GT

def cmp [LessEq] (x, y) =
            if x == y then EQ
            elif x <= y then LT
            else GT

def max [LessEq] (x, y) = if x <= y then y else x
def min [LessEq] (x, y) = if x <= y then x else y


/////////////////////////////

import lalan:lang:_generic

def at [Generic] (v, gf) = _generic:get_method(v, gf)

/////////////////////////////////////////////

let Behavior =
{
    //Eq
    (`!=`) = (x, y) -> not (x == y),

    (`==`) = (self, other) -> _api:equal(other, self),

    (str) = (self) -> _api:to_string(self),

    (repr) = (self) -> _api:to_repr(self),

    (put) = (key, value, self) -> _api:put(key, value, self),
    (at) = (key, self) -> _api:at(key, self),
    (del) = (key, self) -> _api:del(key, self),
    (elem) = (key, self) -> _api:elem(key, self),

    (len) = (self) -> _api:length(self),
    (is_empty) = (self) -> _api:is_empty(self)
}

/////////////////////////////////

extend Instance with
(
    def index_of (val, self) = _datatype:record_index_of(val, self)
    def keys(self) = _datatype:record_keys(self)
    def values(self) = _datatype:record_values(self)
    def {==, !=, str, repr, put, at, del, elem, len, is_empty} from Behavior
)


extend
    Singleton
    Function
    Generic
    Partial
    Datatype
    Bool
with
(
    def {==, !=, str, repr} from Behavior
)


extend Env with
(
    def {==, !=, str, repr, put, at, del, elem, len, is_empty} from Behavior
)
