import lalan:lang:_api
import lalan:lang:_datatype
import seq



trait TEq [T]
(
    def != (x of T, y) = not (x == y)
    def == (self of T, other) = _api:equal(other, self)
)

trait TStr [T]
(
    def str [T] (self) = _api:to_string(self)
)

trait TRepr
(
    def repr [T] (self) = _api:to_repr(self)
)

trait TCollection [T]
(
    def put [T] (key, value, self) = _api:put(key, value, self)
    def at [T] (key, self) = _api:at(key, self)
    def del [T] (key, self) = _api:del(key, self)
    def elem [T] (key, self) = _api:elem(key, self)
)

trait TSized [T]
(
    def len [T] (self) = _api:length(self)
    def is_empty [T] (self) = _api:is_empty(self)
)

trait TIndexed (
    def index_of(self) = _datatype:record_index_of(self)
)

trait TDict (
    def keys(self) = _datatype:record_keys(self)
    def values(self) = _datatype:record_values(self)
)

///////////////////////////////////////////////////////////

extend Function (
    use derive:TStr
    use derive:TRepr
    use derive:TEq
)

extend Generic (
    use derive:TStr
    use derive:TRepr
    use derive:TEq
)

extend Partial (
    use derive:TStr
    use derive:TRepr
    use derive:TEq
)

///

extend Datatype (
    use derive:TEq
    use derive:TStr
    use derive:TRepr
)

///

extend Bool (
    use derive:TStr
    use derive:TRepr
    use derive:TEq
)

///

extend Env (
    use derive:TEq
    use derive:TStr
    use derive:TRepr
    use derive:TCollection
    use derive:TSized
)

///

extend Trait (
    use derive:TStr
    use derive:TRepr
    use derive:TEq
)
