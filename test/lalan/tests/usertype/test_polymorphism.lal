import affirm

type (
    L(l)
    None
    Some(val)
)

protocol Eq (
    eq(`self, other)
)

extend L (
    def len(self) = len(self.l)

    def is_empty(self) = is_empty(self.l)

    def first(self) = self

    def rest(self) = self
)


extend Some (
    def eq
        | (self, val of Some) = val == None
        | (self, _) = False
)

extend None (
    def eq
        | (self, {val} of Some) = val == None
        | (self, _ of None) = True
)

fun test () =
(
    let
        s = Some(None)
    in (
        affirm:is_true(None `eq` s)
        affirm:is_false(s `eq` None)
    )


    let
        l1 = L([1,2,3,4,5])
    in
        affirm:is_equal(
            match l1
                | [] = #empty
                | e = #not_empty
            ,
            #not_empty
        )
)
