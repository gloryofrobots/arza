import seq
import io
import list
import string

"""
Nine billion names of God the Integer
see https://rosettacode.org/wiki/9_billion_names_of_God_the_integer
"""

fun nbn_1 () ->
    fun _loop n g ->
        if g == 1 or n < g then
           1
        else
            (seq:foldl
                fun _folder q res ->
                    if q > n - g then
                        x = 0
                    else
                        x = _loop (n-g) q
                    ------

                    res + x
                end
                1
                (list:range 2 g))

    (string:join
        (seq:map
            (n => string:join_cast
               (seq:map (g => _loop n g)
                        (list:range 1 n))
               " ")
            (list:range 1 25))
         "\n")


//Crytic single expression
fun nbn_2 () ->
    (string:join
        (seq:map
            (n => string:join_cast
               (seq:map (g =>
                            fun _loop n g ->
                                (1 when g == 1 or n < g else
                                    (seq:foldl
                                        (q res => res + (0 when q > n - g else _loop (n-g) q))
                                        1
                                        (range 2 g)))
                            end n g) (range 1 n)) " ")
            (range 1 25))
         "\n")

fun nbn_3 () =
    string:join(
        seq:map(
            fun(n) =
                string:join_cast(
                   seq:map(
                        fun (g) =
                                let fun _loop (n, g) =
                                        if g == 1 or n < g then 1
                                        else
                                            seq:foldl(
                                                fun (q, res) =
                                                    res + 0 when q > n - g else _loop(n-g, q)
                                                ,
                                                1,
                                                list:range(2, g)
                                            )

                                in _loop(n, g)
                        ,
                        list:range(1, n)
                   ),
                   " "
                )
           ,
           list:range(1, 25)
        ),
        "\n"
    )

fun run () ->
    // io:p (nbn_1 ())
    io:p (nbn_3 ())