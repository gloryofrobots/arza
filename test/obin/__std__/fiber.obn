from obin:lang:_fiber import (spawn, activate, coroutine)
import derive

extend Fiber (
    use derive:TStr
    use derive:TRepr
    use derive:TEq
)


extend Coroutine (
    use derive:TSized (is_empty)
    def len(self) = throw NotImplementedError ("Coroutine can't define len")

    def first(self) = self()
    def rest(self) = self
    def to_seq(self) = self
    def empty(self) = []
)

///////////////////////////////////////////////////////


type Var(val)

fun var(v) =
    let co =
        coroutine(
            fun (yield, v) =
                let fun loop(v) =
                    let
                        msg = yield(v)
                    in
                        match msg
                            | #Read = loop(v)
                            | (#Write, new_val) =
                                loop(new_val)

                in loop(v)
        )

    in (
        co(v)
        Var(co)
    )

extend Var (
    use TRepr

    def !(self) = self.val(#Read)

    def :=(self, value) = self.val((#Write, value))

    def ==(self, other) = self.val == other.val

    def str(self) = "Var"
)
