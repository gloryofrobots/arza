import fiber

type Var(val)

fun var(v) =
    let co =
        fiber:coroutine(
            fun holder(yield, v) =
                let fun loop(v) =
                    let
                        msg = yield(v)
                    in
                        match msg
                            | #Read = loop(v)
                            | (#Write, new_val) =
                                loop(new_val)

                in loop(v)
        )

    in (
        co(v)
        Var(co)
    )

extend Var (
    use TRepr

    def !(self) = self.val(#Read)

    def :=(self, value) = self.val((#Write, value))

    def ==(self, other) = self.val == other.val

    def str(self) = "Var"
)
