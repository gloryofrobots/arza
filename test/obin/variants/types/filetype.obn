trait OpenedIoDevice
    generic read _
    generic close _


trait IODevice
    generic open _


union Mode =  Read | Write | Append


union Maybe = Nothing | Just value
                        construct
                            | value
                            | value1 value2 -> value = (value1, value2)
                            ----------


union List = Nil | Cons head tail of List


type File =
    File path mode
    construct
        | path mode @ #Read
        | path mode @ #Write
        | path mode @ #Append
        -----------------

implement IODevice for File
    specify open
        | self of File -> OpenedFile (fs:open_file self.path self.mode)

type ClosedFile {path, mode}
| path mode
--------------

type OpenedFile {path, mode, descriptor}
| path mode descriptor

implement OpenedIoDevice
    specify read
        | self of OpenedFile, count of Int -> fs:read_from self.descriptor count
        | self of OpenedFile  -> fs:read_all self.descriptor

    specify close
        | self of _ -> ClosedFile self.path self.mode
-------------------------------------------------------------

f = File "1.obn" #Read
fd = open f
data50 = read f 50
data = read f


