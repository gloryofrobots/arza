String must unmutable, and they must share memory
//native
str.capitalize()

    Return a copy of the string with its first character capitalized and the rest lowercased.

    For 8-bit strings, this method is locale-dependent.


//native
str.count(sub[, start[, end]])

    Return the number of non-overlapping occurrences of substring sub in the range [start, end]. Optional arguments start and end are interpreted as in slice notation.


//obin
str.endswith(suffix[, start[, end]])

    Return True if the string ends with the specified suffix, otherwise return False. suffix can also be a tuple of suffixes to look for. With optional start, test beginning at that position. With optional end, stop comparing at that position.

    Changed in version 2.5: Accept tuples as suffix.

//native
 str.find(sub[, start[, end]])
    Return the lowest index in the string where substring sub is found, such that sub is contained in the slice s[start:end]. Optional arguments start and end are interpreted as in slice notation. Return -1 if sub is not found.

//native
 str.format(*args, **kwargs)
    Perform a string formatting operation. The string on which this method is called can contain literal text or replacement fields delimited by braces {}. Each replacement field contains either the numeric index of a positional argument, or the name of a keyword argument. Returns a copy of the string where each replacement field is replaced with the string value of the corresponding argument.

//native
str.isalnum()
    Return true if all characters in the string are alphanumeric and there is at least one character, false otherwise.

    For 8-bit strings, this method is locale-dependent.

//native
str.isalpha()

    Return true if all characters in the string are alphabetic and there is at least one character, false otherwise.

    For 8-bit strings, this method is locale-dependent.

//native
str.isdigit()

    Return true if all characters in the string are digits and there is at least one character, false otherwise.

    For 8-bit strings, this method is locale-dependent.

//native
str.islower()

    Return true if all cased characters [4] in the string are lowercase and there is at least one cased character, false otherwise.

    For 8-bit strings, this method is locale-dependent.

//native
str.isspace()

    Return true if there are only whitespace characters in the string and there is at least one character, false otherwise.

    For 8-bit strings, this method is locale-dependent.

//native
str.istitle()

    Return true if the string is a titlecased string and there is at least one character, for example uppercase characters may only follow uncased characters and lowercase characters only cased ones. Return false otherwise.

    For 8-bit strings, this method is locale-dependent.

//native
str.isupper()

    Return true if all cased characters [4] in the string are uppercase and there is at least one cased character, false otherwise.

    For 8-bit strings, this method is locale-dependent.

//native
str.join(iterable)

    Return a string which is the concatenation of the strings in the iterable iterable. The separator between elements is the string providing this method.


//native
str.lower()

    Return a copy of the string with all the cased characters [4] converted to lowercase.

    For 8-bit strings, this method is locale-dependent.

//native
str.lstrip([chars])

    Return a copy of the string with leading characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing whitespace. The chars argument is not a prefix; rather, all combinations of its values are stripped:
    >>>

    >>> '   spacious   '.lstrip()
    'spacious   '
    >>> 'www.example.com'.lstrip('cmowz.')
    'example.com'

    Changed in version 2.2.2: Support for the chars argument.


//native
str.replace(old, new[, count])

    Return a copy of the string with all occurrences of substring old replaced by new. If the optional argument count is given, only the first count occurrences are replaced.

//native
str.rfind(sub[, start[, end]])

    Return the highest index in the string where substring sub is found, such that sub is contained within s[start:end]. Optional arguments start and end are interpreted as in slice notation. Return -1 on failure.


//native
 str.rstrip([chars])

    Return a copy of the string with trailing characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing whitespace. The chars argument is not a suffix; rather, all combinations of its values are stripped:


//native
str.split([sep[, maxsplit]])

    Return a list of the words in the string, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done (thus, the list will have at most maxsplit+1 elements). If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made).

    If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, '1,,2'.split(',') returns ['1', '', '2']). The sep argument may consist of multiple characters (for example, '1<>2<>3'.split('<>') returns ['1', '2', '3']). Splitting an empty string with a specified separator returns [''].

    If sep is not specified or is None, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a None separator returns [].

    For example, ' 1  2   3  '.split() returns ['1', '2', '3'], and '  1  2   3  '.split(None, 1) returns ['1', '2   3  '].

//native
str.splitlines([keepends])

    Return a list of the lines in the string, breaking at line boundaries. This method uses the universal newlines approach to splitting lines. Line breaks are not included in the resulting list unless keepends is given and true.

    For example, 'ab c\n\nde fg\rkl\r\n'.splitlines() returns ['ab c', '', 'de fg', 'kl'], while the same call with splitlines(True) returns ['ab c\n', '\n', 'de fg\r', 'kl\r\n'].

    Unlike split() when a delimiter string sep is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line.

//native
str.startswith(prefix[, start[, end]])

    Return True if string starts with the prefix, otherwise return False. prefix can also be a tuple of prefixes to look for. With optional start, test string beginning at that position. With optional end, stop comparing string at that position.

    Changed in version 2.5: Accept tuples as prefix.

//native
str.strip([chars])

    Return a copy of the string with the leading and trailing characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing whitespace. The chars argument is not a prefix or suffix; rather, all combinations of its values are stripped:
    >>>

    >>> '   spacious   '.strip()
    'spacious'
    >>> 'www.example.com'.strip('cmowz.')
    'example'

    Changed in version 2.2.2: Support for the chars argument.

//native
str.upper()

    Return a copy of the string with all the cased characters [4] converted to uppercase. Note that str.upper().isupper() might be False if s contains uncased characters or if the Unicode category of the resulting character(s) is not “Lu” (Letter, uppercase), but e.g. “Lt” (Letter, titlecase).

    For 8-bit strings, this method is locale-dependent.

//native
str.fill(char, width)

