import affirm
//import tests:test_operators

import tests:types:test_types
import tests:test_partial
import tests:test_co
import tests:test_destruct
import tests:test_exception
import tests:test_modify
import tests:test_operator_override
import tests:test_module
import tests:test_match
import tests:test_base
import tests:test_bool
import tests:test_static_refs
import tests:test_fun
import tests:test_var
import tests:datastructs:test_datastructs


fun log ...msgs ->
    if True ->
        apply print msgs
    else ->
        ()

fun test() ->
    log "RUN TESTS"

    log "TEST TYPES"
    test_types:test()
    log "TEST PARTIAL"
    test_partial:test()
    log "TEST BOOL"
    test_bool:test()
    log "TEST MATCH"
    test_match:test()
    log "TEST BASE"
    test_base:test()
    log "TEST DESTRUCT"
    test_destruct:test()
    log "TEST STATIC REFS"
    test_static_refs:test()
    log "TEST CO"
    test_co:test()
    log "TEST EXCEPTION"
    test_exception:test()
    log "TEST MODIFY"
    test_modify:test()
    log "TEST OP OVERRIDE"
    test_operator_override:test()
    log "TEST MODULE"
    test_module:test()
    log "TEST FUN"
    test_fun:test()
    log "TEST VAR"
    test_var:test()
    log "TEST DATASTRUCTS"
    test_datastructs:test()

//    log "TEST OPERATORS"
//    test_operators:test()

trait Trait1 for self
    def f1 self
    def f2 self

trait Trait2 for self
    def f3 self
    def f4 self

MixinTrait1 = {
    f1 = lam x -> 12 end,
    f2 = lam x -> 13 end
}

type Type1 val1
type Type2 val2

extend Type1
    with Trait1 = MixinTrait1
    with Trait2
//        def f3 = MixinTrait1.f1
        def f3 self -> self
        def f4 self -> self

fun main() ->
    t = Type1 42
    print (f1 t)
    print (f2 t)
    
    test()

