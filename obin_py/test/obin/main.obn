import affirm
import tests:test_operators

import tests:types:test_types
import tests:test_co
import tests:test_destruct
import tests:test_exception
import tests:test_modify
import tests:test_operator_override
import tests:test_module
import tests:test_match
import tests:test_base
import tests:test_bool
import tests:test_static_refs
import tests:test_fun
import tests:datastructs:test_datastructs

fun log ...msgs ->
    cond
    | True -> apply print msgs
    | else -> ()
    ---
---

fun test() ->
    log "RUN TESTS"

    log "TEST TYPES"
    test_types:test()
    log "TEST BOOL"
    test_bool:test()
    log "TEST DATASTRUCTS"
    test_datastructs:test()
    log "TEST MATCH"
    test_match:test()
    log "TEST BASE"
    test_base:test()
    log "TEST DESTRUCT"
    test_destruct:test()
    log "TEST STATIC REFS"
    test_static_refs:test()
    log "TEST CO"
    test_co:test()
    log "TEST EXCEPTION"
    test_exception:test()
    log "TEST MODIFY"
    test_modify:test()
    log "TEST OP OVERRIDE"
    test_operator_override:test()
    log "TEST MODULE"
    test_module:test()
    log "TEST FUN"
    test_fun:test()

    log "TEST OPERATORS"
    test_operators:test()
---


fun main () ->
//        affirm:is_equal_batch(
//            fun | x y z when z == 2 -> #first
//                | x y z when z == 3 and y == 3 -> #second
//                | x y z when z == 3 and y == 2 and x == 3 -> #third
//                | x y z when z == 3 and y == 2 and x == 1 and (x + y == 6 or True) -> #fourth
//                | _ -> 12
//            end) .
//            ([1,2,2], #first) .
//            ([1,3,3], #second) .
//            ([3,2,3], #third) .
//            ([1,2,3], #fourth)
    test()
    affirm:is_throw lam () -> throw 1;
---

//            impl.append(_t([self.methods.str,
//                            _f(_s(u""), derived.str_, 1)
//                            ]))
