import affirm
fun t1() ->
    tup1 = (1, "Hello", 35.44555)
    affirm:is_equal tup1 (1, "Hello", 35.44555)
    affirm:is_equal tup1.0 1
    affirm:is_equal tup1.1 "Hello"
    affirm:is_equal tup1.2 35.44555
    affirm:is_equal (1, "Hello", 35.44555).2   35.44555
    affirm:is_equal (1,2, ["Alice", "Bob", (45,), 54.000000001]).2 ["Alice", "Bob", (45,), 54.000000001]

    affirm:is_equal (1,2, ["Alice", "Bob", (45,), 54.000000001]).2 ["Alice", "Bob", (45,), 54.000000001]

    m1 = {name="XXX"}
    affirm:is_equal {name="XXX"}.name "XXX"
    affirm:is_equal m1.name "XXX"
    affirm:is_not_equal m1.name "YYY"

    t2 = ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Bob"})

    affirm:is_equal t2 ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Bob"})
    affirm:is_not_equal t2 ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Alice"})
    affirm:is_equal t2 t2

    affirm:is_true if 5 > 4 then True else False
    affirm:is_false if 5 < 4 then True else False
    affirm:is_false if 5 == 4 then True else False
    affirm:is_equal (if 13 == 12 then 42 * 2 else if 13 == 14 then 12 * 2 else 1 end end) 1

    a2_4 = #four
    a2 = [0, 1, 2, a2_4]
    affirm:is_true (#four `elem` a2)
    affirm:is_true (a2_4 `elem` a2)

    affirm:is_equal "name" #name
    affirm:is_equal #name "name"
    affirm:is_equal #"++++ ---- <> $$" "++++ ---- <> $$"
    affirm:is_equal "++++ ---- <> $$" #"++++ ---- <> $$"

    x = 12
    (affirm:is_equal (if x == 13 then 1 + 1
                      elif x == 14 then 2 + 2
                      elif x == 15 then 3 + 3
                      else 4 + 4 end) 8)


fun t2 () ->
    fun id x -> x
    fun sum_list_3 list
        | [x,y,z] -> x + y + z
    fun sum x y -> x + y

    V53 = (sum 1
            (sum_list_3
                [id 1,
                 id (id 2),
                 id (id (id 3))
                ])) +
        (sum 10
            (sum_list_3
                [(x => x)  11,
                 fun _ x
                    | x -> x end ((x => x)  12),
                 fun _ x ->
                    x
                 end ((x => x)  ((x => x)  13))
                ]))
    affirm:is_equal V53 53


fun t3() ->
    fun f1 a
        | 0 -> 1
        | 1 -> 2
        | 2 -> 3

    affirm:is_equal (f1 0) 1

    fun f2 a | 0 -> 1
             | 1 -> 2
             | 2 -> 3

    affirm:is_equal (f2 0) 1

    fun f3 a b c | 0 1 c -> c

    affirm:is_equal (f3 0 1 42) 42

    fun f4 (()) -> ((()))

    affirm:is_equal (f4 ()) ()

    fun f5 () -> [42,43,44]
                 (42,43,44)

    affirm:is_equal (f5 ()) (42,43,44)

    fun f6 a b c ->
        (a b c => 42) a b c

    affirm:is_equal (f6 1 2 3) 42


fun t4 () ->
    l = x y z => 42
    affirm:is_equal (l 1 2 3) 42

    l1 = (x y z => 42)
    affirm:is_equal (l1 1 2 3) 42

    l2 =
        fun _ x y z | [hd::tl] (1,2,3) {x=2, y=3} -> 24
                    | _ y z -> 23

    affirm:is_equal (l2 [[1,2]] (1,2,3) {x=2, y=3}) 24

    affirm:is_equal (
        fun _  x y z
            | [hd::tl] (1,2,3) {x=2, y=3} -> 24
            | _ y z -> 23
        end [[1,2]] (1,2,3) {x=2, y=3}) 24


    affirm:is_equal ((x => x + 1) 34) 35


    (affirm:is_equal
        ( fun _ x y z
            | 1 2 3 -> 11
            | 2 4 5 -> 22
          end
                    1
                        2

                         3)  11)
    T =
        (1,2, fun _ x | 1 -> 25
                      | 2 -> 13 end, 25)

    affirm:is_equal (T.2 2) 13

    T1 =
        (1,
         fun _ x | 5 -> 25
                 | 6 -> 45 end,
         fun _ x
            | 5 -> 25
            | 6 -> 45 end,
         fun _ x -> 25 end,
         25)

    affirm:is_equal (T1.1 5) 25
    affirm:is_equal (T1.2 5) 25
    affirm:is_equal (T1.3 5) 25

    T4 =
        (1
         ,2,
            3)

    affirm:is_equal T4 (1,2,3)

    T5 =
        (1
        , fun _ x | 5 -> 25
                  | 6 -> 45
        , fun _ x
            | 5 -> 25
            | 6 -> 45
        , (x => x)
        // WARNING PREV LAMBDA is closed by dedent and as we inside a free block expression evaluates to call
        // so third element of a tuple evaluates to (x => x) 45
        45)

    affirm:is_equal (T5.1 6) 45
    affirm:is_equal (T5.2 6) 45
    affirm:is_equal (T5.3) 45

    T10 =
        (1
        , fun _ x | 5 -> 25
                  | 6 -> 45
        , fun _ x
            | 5 -> 25
            | 6 -> 45
        , x => x
        //WARNING PREV LAMBDA is closed by dedent and as we inside a free block expression evaluates to call
        // fun _ x -> x end 45
        ,45)

    affirm:is_equal (T10.1 6) 45
    affirm:is_equal (T10.2 6) 45
    affirm:is_equal (T10.3 45) 45

    T6 =
        (1,
   2,
3
)
    affirm:is_equal T6 (1,2,3)



    affirm:is_equal (2;, 3) (2,3)

    T7 =
        (
            (x => x)
            (
                fun _ x ->
                    1
                end
                , 3
                , 1
                , 4
                , 5
            )
        )
    affirm:is_equal (T7.0 12313123) 1

    (affirm:is_equal
         (
            (fun _ x ->
                x
             end) 3
          , 1
          , 4
          , 5
        ).0  3)

    //////////////////////////////////////////////////////
    M1 =
        {x=1,
 x=2,

 l= fun _ x y
        | 1 2 -> 1
        | 2 3 -> 2 end,
    n = 1
    }

    affirm:is_equal M1.x 1
    affirm:is_equal (M1.l 2 3) 2

    I1 =
        if 2 == 2 then
            2
        else
            4


    affirm:is_equal I1 2

    I2 =
        if 2 == 1 then
                              2
        elif 3 == 4 then
            3
        elif {x=1, y=2} == (1,2,3) then 4
        else 5


    affirm:is_equal I2 5

    MT1 =
        match (1,2,3) with | (x,y,z) -> 2
                           | _ -> 1

    affirm:is_equal MT1 2

    MT2 =
        match (1,2,3)
        with | (x,y,z) -> 2
             | _ -> 1

    affirm:is_equal MT2 2

    MT3 =
        match fun _ x ->
                  1
              end
        with
            | Y ->
               (fun _ t
                    | (a,b) -> a + b end
                    (1 + 1, 2 + 2))
            | _ -> 2

    affirm:is_equal MT3 6

    MT4 =
        match if 2 == 1 then
                 2
              else
                3
              end
        with
            | 2 -> 3
            | 3 -> 2

    affirm:is_equal MT4 2

    (affirm:is_equal
        match 1 with
            | x -> 3
            | _ -> 2 end 3)

    affirm:is_equal match 1 with 1 -> 4 end 4
    (affirm:is_equal
        (match 1 with
            x -> 4
         end)  4)

    affirm:is_equal (
        match
            ((if 0 == 1 then
                1
              else
                &fun _ x y -> x + y
              end 3)
                4)
        with
            | 6 -> 3
            | 7 -> 42
        ) 42

    affirm:is_equal if 1 == 1 then 1; else 2; end 1

//    try 1; catch 1 -> 1; end
//    try 1; catch 1 ->
//        1
//
//    try 42
//    catch 3 ->#first
//
//    try 42
//    catch 3 ->#first
//
//    try 42
//    catch 3 ->#first
//    finally -> 12
//
//    try 1
//    catch 2 ->
//        11
//        try
//            3
//        catch 4 ->12
//        finally ->
//            if 6 -> 7
//            elif 7 ->
//                if 9 -> 14
//                else -> 15
//            else ->
//                try
//                    9
//                catch
//                    | 10 -> 11
//                    | 13 -> 14
//                finally ->
//                    24
//                8
//    finally ->
//        5
//    try
//        throw (1,2,"ERROR")
//    catch
//        | err @ (1, y, 3) -> #first
//        | (1,2, "ERROR@") -> #second
//        | err @ (1, 2, x) -> #third
//    finally ->
//        (#fourth, err, x)
//
//    f try 1 catch | x -> 1; | y -> 2; finally -> 4 end 42
//
//    try 1; catch
//        | x -> 1
//        | y -> 2
//    finally -> 4
//
//    try 1; catch
//        | x -> 1; | y -> 2; finally -> 4
//
//    try 1 catch | x -> 1 | y -> 2 finally -> 4
//
//
//    f try 1; catch | x -> 1; | y -> 2
//                   | y -> 2
//      finally -> 4 end .
//      42
//
//    try 1; catch
//        | x -> 1
//        | y -> 2; finally -> 4

fun t5() ->
    a = 3
    -1
    affirm:is_equal a 3

    x =   1
        + 2
        + 3
        + 4

    affirm:is_equal x 10

    y = x
            + 3
                + 2 +
        5

    affirm:is_equal y 20

fun test_let() ->
    x = 1
    y = 2
    let
        x = 11
        y = 12
    in
        affirm:is_equal x 11
        affirm:is_equal y 12

    let x = 111 in affirm:is_equal x 111

    let x = 1111; y = 2222; in affirm:is_equal x 1111; affirm:is_equal y 2222

    let x = 222
        y = 333 in affirm:is_equal x 222
                   affirm:is_equal y 333
    let x = 444
        y = 555
    in affirm:is_equal x 444
       affirm:is_equal y 555

    affirm:is_equal x 1
    affirm:is_equal y 2

    v = let x = 1; y = 2 in x + y
    affirm:is_equal v 3


fun test_ambidextra_operators () ->
    two = 2
    one = 1

    affirm:is_equal_all (2-1) (two-one) (2-one) (two-1) 1
    affirm:is_equal_all (2 - 1) (two - one) (2 - one) (two - 1) 1

    affirm:is_equal_all (2- -1) (two- -one) (2- -one) (two- -1) 3
    affirm:is_equal_all (2- - 1) (two- - one) (2- - one) (two- - 1) 3
    affirm:is_equal_all (2 - - 1) (two - - one) (2 - - one) (two - - 1) 3

    affirm:is_equal_all (identity -1) (identity -one) -1

    f = ...args => args
    affirm:is_equal_all (f -1 -2 -1 -2) (f -one -two -one -two) (-1, -2, -1, -2)


fun test () ->
    t1 ()
    t2 ()
    t3 ()
    t4()
    t5()
    test_let()
    test_ambidextra_operators()