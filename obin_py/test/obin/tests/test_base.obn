import affirm

fun test () ->
    t1 = (1, "Hello", 35.44555)
    affirm:is_equal t1 (1, "Hello", 35.44555)
    affirm:is_equal t1.0 1
    affirm:is_equal t1.1 "Hello"
    affirm:is_equal t1.2 35.44555
    affirm:is_equal (1, "Hello", 35.44555).2   35.44555
    affirm:is_equal (1,2, ["Alice", "Bob", (45,), 54.000000001]).2 ["Alice", "Bob", (45,), 54.000000001]

    affirm:is_equal (1,2, ["Alice", "Bob", (45,), 54.000000001]).2 ["Alice", "Bob", (45,), 54.000000001]

    m1 = {name="XXX"}
    affirm:is_equal {name="XXX"}.name "XXX"
    affirm:is_equal m1.name "XXX"
    affirm:is_not_equal m1.name . "YYY"

    t2 = ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Bob"})

    affirm:is_equal t2 ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Bob"})
    affirm:is_not_equal t2 ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Alice"})
    affirm:is_equal t2 t2

    affirm:is_true True in_case 5 > 4 else False
    affirm:is_false True in_case 5 < 4 else False
    affirm:is_false True in_case 5 == 4 else False
    affirm:is_equal (42 * 2 in_case 13 == 12 else 12 * 2 in_case 13 == 14 else 1) 1

    a2_4 = #four
    a2 = [0, 1, 2, a2_4]
    affirm:is_true (#four `elem` a2)
    affirm:is_true (a2_4 `elem` a2)

    affirm:is_equal "name" #name
    affirm:is_equal #name "name"
    affirm:is_equal #"++++ ---- <> $$" "++++ ---- <> $$"
    affirm:is_equal "++++ ---- <> $$" #"++++ ---- <> $$"

    x = 12
    affirm:is_equal if x == 13 -> 1 + 1
                    elif x == 14 -> 2 + 2
                    elif x == 15 -> 3 + 3
                    else -> 4 + 4 .
                    8

