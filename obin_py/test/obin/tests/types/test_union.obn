import affirm

type Maybe
    | Nothing
    | Just v


type Shape
    | X x
    | Y y
    | Point x y
    | Square width height
    | Rect left top right bottom
    | Line point1 point2
    | Empty

type Color
    | Red
    | Orange
    | Yellow
    | Green
    | Blue
    | Indigo
    | Violet

type Cars | BMW | AUDI | FORD

extend Cars
    with Sized
        def len self -> 42

fun test () ->
    m = Just 42
    n = Nothing
    affirm:is_kindof n Maybe
    affirm:is_kindof Just Maybe
    affirm:is_kindof m Maybe
    affirm:is_kindof m Just
    affirm:is_not_kindof m Nothing
    affirm:is_kindof n Nothing
    affirm:is_not_kindof n Just


    affirm:is_kindof (X 1) Shape
    affirm:is_kindof (X 1) X
    affirm:is_not_kindof (X 1) Y
    affirm:is_kindof (Point 1 2) Shape
    affirm:is_kindof (Point 1 2) Point
    affirm:is_kindof Point Shape
    affirm:is_kindof Rect Shape
    affirm:is_kindof Line Shape
    affirm:is_not_kindof Line Rect
    affirm:is_not_kindof X Y

    affirm:is_equal (range Orange Indigo) [Orange, Yellow, Green, Blue]
    affirm:is_equal (range_from Red) [Red, Orange, Yellow, Green, Blue, Indigo, Violet]
    affirm:is_equal (range_from Green) [Green, Blue, Indigo, Violet]
    affirm:is_equal (range_from Violet) [Violet]

    affirm:is_equal (len Color) 7
    affirm:is_equal (len Cars) 42
    affirm:is_equal (to_seq Color) [Red, Orange, Yellow, Green, Blue, Indigo, Violet]
    affirm:is_equal (at #Yellow Color) Yellow
    affirm:is_equal (Color.Yellow) Yellow

