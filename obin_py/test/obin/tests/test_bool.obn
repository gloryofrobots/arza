import affirm

fun test() ->
    affirm:is_equal False False
    affirm:is_equal True True
    affirm:is_not_equal True False
    affirm:is_not_equal False True
    affirm:is_equal (not False) True
    affirm:is_equal (not True) False
    affirm:is_true (True and True)
    affirm:is_false (False and True)
    affirm:is_false (False and False)
    affirm:is_false (True and False)
    affirm:is_true (True or False)
    affirm:is_true (False or True)
    affirm:is_false (False or False)
    affirm:is_same False False
    affirm:is_same True True
//
    //only True and False can be used in boolean operators
    affirm:is_throw (lam x -> 1 or 0 end) ()
    affirm:is_throw_expected (lam x -> 1 or 0 end) () (TypeError ("Bool expected", 1))

    affirm:is_throw lam x -> 1 and 0 end ()
    affirm:is_throw lam x -> not 0 end ()
    affirm:is_throw lam x -> not {} end ()
    affirm:is_throw lam x -> not "" end ()
    affirm:is_throw lam x -> not [] end ()
    affirm:is_throw lam x -> not () end ()
    affirm:is_throw lam x -> not 1.2 end ()
    affirm:is_throw lam x -> not #symbol end ()

    x = 0
    y = 1
    affirm:is_false (x `is` y)
    affirm:is_true (x `isnot` y)
end

