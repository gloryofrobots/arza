import affirm


fun test() ->
    affirm:is_equal(
        match [1,2,3] with
            | B1 @ [a, b, B2 @ c] ->  (B1, B2, a, b, c)
            | _ -> 42
        end) ([1, 2, 3], 3, 1, 2, 3)

    affirm:is_equal B1 [1, 2, 3]
    affirm:is_equal B2 3

    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        match [1,2,3] with
            | [B3 @ 1, 2, 4] -> (#res1, B3)
            | [B3 @ 1, 2, 3] -> (#res2, B3)
        end) (#res2, 1)


    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        match 42 with
            | B4 @ 2 -> (#result1, B4)
            | B4 @ 42 -> (#result2, B4)
        end) (#result2, 42)


    ////////////////////////////////////////////////////////////////

    affirm:is_equal(
        match {genre = "XXX", actress="Lily", age=25} with
            | Result @ {genre, LilyName @ "actress"="Lily", age=13} -> (Result, genre, 42, LilyName)
            | Result @ {genre, LilyName2 @ "actress"="Lily", age=25} -> (Result, genre, "OLOLO", LilyName2, age)
        //    | {genre, length} ->  (name, age, 1)
            | _ ->  42
        end) ({age = 25, actress = "Lily", genre = "XXX"}, "XXX", "OLOLO", "Lily", 25)


    affirm:is_equal LilyName2 "Lily"
    affirm:is_equal Result {age = 25, actress = "Lily", genre = "XXX"}
    affirm:is_throw lam () -> LilyName end ()

    ////////////////////////////////////////////////////////////////

    affirm:is_equal .
        match (1, (23, (24, 25))) with
            | (Z, (G, 1)) ->  12 + Z
            | (1, 23) ->   12
            | (1, (23, X)) ->  (#third, X)
            | _ ->  #fourth
        end (#third, (24, 25))

    affirm:is_throw lam () -> Z end ()

    ////////////////////////////////////////////////////////////////

    affirm:is_equal .
        match [(1,2), (2,3,4), 5, [6,7,8]] with
            | [a1,b1,c1] ->  (a1, b1, c1)
            | [a1, b1] ->  (a1, b1)
            | (x1, y1, 5) ->  (x1, y1)
            | [(1, X1), Y1, 5, [6,7, Z1]] ->  (X1, Y1, Z1)
            | _ ->  123
        end (2, (2, 3, 4), 8)

    affirm:is_throw lam () -> [a1, b1, c1, x1, y1] end ()

    ////////////////////////////////////////////////////////////////

    affirm:is_equal .
        match {name="Bob", surname=("Alice", "Dou"), age=42} with
            | {name="Bob", surname="Alice"} ->  (name, surname)
            | {name="Bob2", age=42} ->  (name, age)
            | {name="Bob", surname=("Alice", "Dou"), age=42} ->  (surname, name, age + 100)
            | _ ->  42
        end ((#Alice, #Dou), #Bob, 142)


    ////////////////////////////////////////////////////////////////

    affirm:is_equal .
        match {name="Bob", surname=("Alice", "Dou"), age=42} with
            | {age=41, names} ->  (name, age, 0)
            | {name, age=42} ->  (name, age, 1)
            | {age=42} ->  (age, 2)
            | _ ->  42
        end ("Bob", 42, 1)

    ////////////////////////////////////////////////////////////////

    affirm:is_equal .
        match (1, 2, 1) with
            | (A, x, A)  -> (#first, A)
            | (A, x, B)  -> (#second, A, B)
            | (3, A) -> #third
        end (#first, 1)

    ////////////////////////////////////////////////////////////////

    affirm:is_equal .
        match (1, 2, 2) with
            | (A, x, A)  -> (#first, A)
            | (A, x, B)  -> (#second, A, B)
        end (#second, 1, 2)

    ////////////////////////////////////////////////////////////////

    affirm:is_equal .
        match 42 with
            | N1 of String  -> ("Is String", N1)
            | N1 of Int  -> ("Is Integer", N1)
        end ("Is Integer", 42)


    ////////////////////////////////////////////////////////////////

    affirm:is_equal .
        match (1,2,3,4,5) with
            | (a,b,c,...rest) -> rest
            | _ -> 42
        end (4, 5)

    ///////////////////////////////////////////////////////////////
    // this is error prone code, currently branches not merged because
    //distinction goes with variable names and a1 != b1
    //FIXME
    match (1,2) with
        | a1 -> a1.0
        | b1 -> a1.1

    //////////////////////////////////////////////////////

    affirm:is_equal(
            try
                match 42 with
                    | 23 -> #first
                    | 13 -> #second
            catch exc ->
                exc
            finally ->
                [exc, exc, exc]
            end) [(#MatchError, 42), (#MatchError, 42), (#MatchError, 42)]

    fun greater_then_ten v -> v > 10 end

    //////////////////////////////////////////////////////
    lam () ->
        A = False
        affirm:is_equal(
            match (1,2,3) with
                | (x, y, z) when z == 2 -> #first
                | (x, y, z) when z == 3 and y == 3 -> #second
                | (x, y, z) when z == 3 and y == 2 and x == 3 -> #third
                | (x, y, z) when z == 3 and y == 2 and x == 1 and A == 2 -> #fourth
                | (x, y, z) when z == 3 and y == 2 and x == 1 and not (A `is` True) and (greater_then_ten 9) -> #fifth
                | (x, y, z) when z == 3 and y == 2 and x == 1 and A `is` True or (greater_then_ten 11) -> #sixth
                | _ -> 12
            end) #sixth
    end ()

    //////////////////////////////////////////////////////

    lam () ->
        affirm:is_equal_batch(
            fun fxyz x y z
                | x y z when z == 2 -> #first
                | x y z when z == 3 and y == 3 -> #second
                | x y z when z == 3 and y == 2 and x == 3 -> #third
                | x y z when z == 3 and y == 2 and x == 1 and (x + y == 6 or True) -> #fourth
                | x y z when z == 3 and y == 2 and x == 2 or (A `is` True or (greater_then_ten 11)) -> #fifth
                | _ _ _ -> 12
            end) .
            ([1,2,2], #first) .
            ([1,3,3], #second) .
            ([3,2,3], #third) .
            ([1,2,3], #fourth) .
            ([2,2,3], #fifth)
    end ()

    //////////////////////////////////////////////////////

    affirm:is_equal (
        match [1,2,3,4] with
            | 1::2::3::4::[] -> #ok
            | x::xs -> (x, xs)
    ) #ok

    //////////////////////////////////////////////////////

    affirm:is_equal (
        match {x=1, y="OLOLO"} with
            | {x of String, y of Int} -> #first
            | {x of Int, y="OL" of String} -> #second
            | {x of Int, y="OLOLO" of String} -> #third
    ) #third

    some = Some 11
    none = None
    fun __val self ->
        match self with
            | x of Some -> self.val
            | y of None -> y

    affirm:is_equal (__val some) 11
    affirm:is_equal (__val none) None

end


