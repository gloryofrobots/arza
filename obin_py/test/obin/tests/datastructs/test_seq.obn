import affirm
import list
import seq
import lazy

fun test_zip() ->
    l1 = [1,2,3,4,5,6,7,8,9,10]
    l2 = seq:map (&`*` 4) l1
    (affirm:is_equal (seq:zip l1 l2)
        [(1, 4), (2, 8), (3, 12), (4, 16), (5, 20), (6, 24), (7, 28), (8, 32), (9, 36), (10, 40)])

    l4 = seq:take 5 l2
    affirm:is_equal (seq:zip l1 l4) [(1, 4), (2, 8), (3, 12), (4, 16), (5, 20)]
    l6 = seq:map (&`-` 42) l1
    (affirm:is_equal (seq:zip3 l1 l2 l6)
            [(1, 4, 41), (2, 8, 40), (3, 12, 39), (4, 16, 38), (5, 20, 37),
             (6, 24, 36), (7, 28, 35), (8, 32, 34), (9, 36, 33), (10, 40, 32)])
    affirm:is_equal (seq:zip3 l1 l2 l4) [(1, 4, 4), (2, 8, 8), (3, 12, 12), (4, 16, 16), (5, 20, 20)]
    (_l1, _l2) = seq:unzip (seq:zip l1 l2)
    affirm:is_equal l1 _l1
    affirm:is_equal l2 _l2

    (__l1, __l2, __l6) = (seq:unzip3 (seq:zip3 l1 l2 l6))
    affirm:is_equal l1 __l1
    affirm:is_equal l2 __l2
    affirm:is_equal l6 __l6

    affirm:is_equal (seq:zipwith `+` (range 0 10) (range 10 100)) [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]

    (affirm:is_equal (seq:zipwith3 lam x y z -> x + y + z end
                                        (range 0 10)  (range_by 0 (-10) (-1))
                                        (range_by 100 0 (-10)))
                    [100, 90, 80, 70, 60, 50, 40, 30, 20, 10])



fun test_base () ->
    l1 = list:range 0 10
    affirm:is_equal (seq:concat [0,1,2,3,4,5] [6,7,8,9]) l1
    affirm:is_equal (seq:concat [] l1) l1
    affirm:is_equal (seq:concat l1 []) l1
    affirm:is_equal (seq:concat [] []) []
    affirm:is_equal (seq:reverse l1) [9,8,7,6,5,4,3,2,1,0]

    affirm:is_true (seq:prefix_of [1,2,3,4] [1,2,3,4,5,6])
    affirm:is_false (seq:prefix_of [0,1,2,3,4] [1,2,3,4,5,6])
    affirm:is_false (seq:prefix_of [1,2,3,4] [1,2,3,5,4,6])

    affirm:is_true (seq:suffix_of [4,5,6] [1,2,3,4,5,6])
    affirm:is_false (seq:suffix_of [3,5,6] [1,2,3,4,5,6])
    affirm:is_false (seq:suffix_of [4,5,6] [1,2,3,4,6,5])

    affirm:is_equal (seq:drop 3 l1) [3,4,5,6,7,8,9]
    affirm:is_equal (seq:map lam x -> x+1 end l1) [1,2,3,4,5,6,7,8,9,10]
    affirm:is_equal (seq:intersperse 0 l1) [0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0]
    affirm:is_equal (seq:scanl `+` 0 (list:range 1  11))  [0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55]

    affirm:is_equal (seq:last l1) 9
    affirm:is_equal (seq:init l1) [0, 1, 2, 3, 4, 5, 6, 7, 8]
    affirm:is_equal (seq:take 3 l1) [0,1,2]
    affirm:is_equal (seq:split_at 3 l1)  ([0, 1, 2], [3, 4, 5, 6, 7, 8, 9])
    affirm:is_equal (seq:take_while lam x -> x < 5 end l1) [0, 1, 2, 3, 4]
    affirm:is_equal (seq:drop_while lam x -> x < 5 end l1) [5, 6, 7, 8, 9]
    (affirm:is_equal (seq:span lam x -> x < 3 end [1,2,3,4,1,2,3,4])
                    ([1, 2], [3, 4, 1, 2, 3, 4]))

    (affirm:is_equal (seq:span lam x -> x < 9 end [1,2,3])
                    ([1, 2, 3], []))

    (affirm:is_equal (seq:span lam x -> x < 0 end [1,2,3])
                    ([], [1, 2, 3]))

    affirm:is_true (seq:conjunction [True, True, True, True])
    affirm:is_false (seq:conjunction [True, True, True, False])
    affirm:is_true (seq:all lam x -> x < 7 end  [0,1,2,3,4,5,6])
    affirm:is_false (seq:all lam x -> x < 3 end  [0,1,2,3,4,5,6])
    affirm:is_true (seq:any lam x -> x < 7 end  [0,1,2,3,4,5,6])
    affirm:is_true (seq:any lam x -> x < 3 end  [0,1,2,3,4,5,6])
    affirm:is_false (seq:any lam x -> x < -1 end  [0,1,2,3,4,5,6])

    affirm:is_equal (seq:delete 8 l1) [0,1,2,3,4,5,6,7,9]



fun test_equal() ->
    l1 = [1,2,3,4]
    l2 = [1,2,3,4]
    affirm:is_true (seq:equal l1 l2)
    affirm:is_false(seq:equal l1 [])
    affirm:is_false(seq:equal l1 [1,2,3,4,5,6])
    affirm:is_true(seq:equal l1 (1:::2:::3:::4:::lazy:LazyNil))
    affirm:is_false (seq:equal l1 (1:::2:::3:::4:::5:::lazy:LazyNil))

fun test_sort() ->
    affirm:is_equal (&seq:split <| range_by (-100) 0 (10)) ([-100, -80, -60, -40, -20], [-90, -70, -50, -30, -10])
    affirm:is_equal (seq:split [1,2,3,4,5,6,7,8,9]) ([1, 3, 5, 7, 9], [2, 4, 6, 8])

    &affirm:is_equal <| seq:sort_asc ([1, 4, 0, 0, 1, -10, -10, -25, -456, 2, 489, 128])
                     <| [-456, -25, -10, -10, 0, 0, 1, 1, 2, 4, 128, 489]


    (affirm:is_equal (seq:sort_desc ([1, 4, 0, 0, 1, -10, -10, -25, -456, 2, 489, 128]))
               [489, 128, 4, 2, 1, 1, 0, 0, -10, -10, -25, -456])

fun test_partial() ->
    ints = list:range 0 20
    input = seq:map (lam x -> (x, list:range 0 x) end) ints

    (evens,ods) = (seq:partition lam x
                                    | (x, data) ->
                                         even x
                                 end
                                 input)

    fun _transform s ->
        (seq:foldl lam item acc
                            | (x, []) acc -> (x, 0) :: acc
                            | (x, data) acc ->
                                (x, seq:reduce &`+` data) :: acc
                   end
                   []
                   s)

    ods_r = _transform ods
    evens_r = _transform evens

    result_unsorted = ods_r ++ evens_r
    (affirm:is_equal result_unsorted
                     [(19, 171), (17, 136), (15, 105), (13, 78), (11, 55), (9, 36), (7, 21), (5, 10), (3, 3), (1, 0), (18, 153), (16, 120), (14, 91), (12, 66), (10, 45), (8, 28), (6, 15), (4, 6), (2, 1), (0, 0)])
fun test() ->
    test_base ()
    test_zip ()
    test_sort ()
    test_equal ()
    test_partial ()
