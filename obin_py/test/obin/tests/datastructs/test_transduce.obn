import io
import transduce as ts
import seq
import affirm


fun test () ->
    double = x => x + x
    inc = x => x + 1
    even = x => mod x 2 == 0

    odd = &not << &even
    rev = partial ts:completing seq:reverse
    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    xf = partial ts:map inc >> partial ts:filter even
    affirm:is_equal (ts:transduce xf cons [] [1,2,3,4]) [5, 3]
    xf_fn = ts:to_fun xf cons
    affirm:is_equal (seq:foldl xf_fn [] [1,2,3,4]) [5, 3]

    affirm:is_equal (ts:into [] xf [1,2,3,4]) [5, 3]

    affirm:is_equal (ts:into [] (&ts:map double >> &ts:map inc >> &ts:filter even) [1,2,3,4]) [10, 6]

    affirm:is_equal (ts:into [] (&ts:remove even) l) [9, 7, 5, 3, 1]
    affirm:is_equal (ts:into [] (&ts:remove odd) l) [10, 8, 6, 4, 2]

    affirm:is_equal (ts:into [] (partial ts:remove odd << rev) l) [2, 4, 6, 8, 10]
    affirm:is_equal (ts:into [] (partial ts:take 8 << partial ts:remove odd << rev) l) [2, 4, 6, 8]

    affirm:is_equal (ts:into [] (&ts:take_while ((partial flip `<`) 5) << rev) l) [1, 2, 3, 4]
    affirm:is_equal  (ts:into [] (partial ts:take_nth 3 << rev) l) [1, 4, 7, 10]
    affirm:is_equal (ts:into [] (partial ts:drop 5 << rev) l) [6, 7, 8, 9, 10]

    affirm:is_equal  (ts:into [] (&ts:drop_while ((partial flip `<`) 5) << rev) l) [5, 6, 7, 8, 9, 10]

    fun _reverse val ->
        io:print #Reverse val (seq:reverse val)
        seq:reverse val

    l1 = [[1,2], [50, 60], [110, 120], [-1, -2]]

    fun _inc_seq s ->
        //io:print "GOT" s (seq:map inc s)
        seq:map inc s

    affirm:is_equal (ts:transduce (partial ts:map identity) `+` 0 l) 55
    affirm:is_equal (ts:transduce (partial ts:map inc) `+` 0 l) 65
    affirm:is_equal (ts:transduce (partial ts:map _inc_seq) (partial flip seq:concat) [] l1) [2, 3, 51, 61, 111, 121, 0, -1]



//MAP CAT IS BROKEN
//     io:print (ts:transduce (ts:mapcat _inc_seq) seq:append [] l1)
//     var reverse = function(arr) { var arr = Array.prototype.slice.call(arr, 0); arr.reverse(); return arr; }
//     var xf = t.mapcat(reverse);
//     t.into([], xf, [[3,2,1],[6,5,4]]); // [1,2,3,4,5,6]
