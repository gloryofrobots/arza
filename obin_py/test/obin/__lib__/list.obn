import obin:lang:_list
from obin:lang:_list import (tail, head)
from datatype import TypeDerived
import seq
import string

fun range (first of Int) (last of Int) ->
    step = if last < 0 then -1 else 1
    range_by first last step

fun range_by (first of Int) (last of Int) (step of Int) ->
    fun _range_by N X D L
        | N X D L when N >= 4 ->
            Y = X - D
            Z = Y - D
            W = Z - D
            _range_by (N - 4)  (W - D)  D  (W :: Z :: Y :: X :: L)

        | N X D L when N >= 2 ->
            Y = X - D
            _range_by (N - 2) (Y - D) D (Y :: X :: L)

        | 1 X _ L -> X :: L

        | 0 _ _ L -> L
    --------------------------------------------------

    if step > 0 and first - step <= last or
            step < 0 and first - step >= last then

        n = ((last - first + step) / step) - 1
        _range_by n (step * (n - 1) + first) step []

    elif step == 0 and first == last then
        _range_by 1  first step []
    else
        throw (#InvalidRange, first, last, step)
--------------------------------------------------

fun replicate count element ->
    if count >= 0 then
        fun _replicate n x result
            | 0 _ l -> l
            | n x l -> _replicate (n - 1) x (x :: l)
        -------------

        _replicate count element []
    else
        throw ValueError count
    --------------------------------
---------------------------------------------------

extend List
    with Eq
        def == self other -> seq:equal self other
    with Collection = TypeDerived
    with Str
        def str self ->
            "[" ++ string:join_with repr self ", " ++ "]"
    with Repr
    with Seq
        def first self -> _list:head self
        def rest self -> _list:tail self
    with Consable
        def cons value self -> _list:cons value self
    with Seqable
        def to_seq self -> self
    with Sized
        def len self -> _list:length
        def is_empty self -> _list:is_empty self
    with Emptiable
        def empty self -> []
    with Sliceable
        def slice first last self -> _list:slice first last self
        def drop count self -> _list:drop count self
        def take count self -> _list:take count self




