//TODO deep calls in datastructs data -> (1, record) == (1, record) NotIImplementedError in record._equal_(record)
// we need to put process in every api call it is very very big annoying job/ it is better to rewrite all interpreter in
// with this in mind

//TODO ranges sugar 1..2..1
// not now it is not very hot

//TODO proper or cases
// match x with
//    | 1 | 2 | 3 -> printfn "Found 1, 2, or 3!"
//    | a -> printfn "%d" a

//TODO syntax block with macros and custom operators
// a lot of work and i dont know how to do it exactly

//TODO ERRORS
//TODO meta
//TODO remove voids as values in datastructs
//TODO separate token streams
//TODO proper deriving for records
//TODO CHOOSE INDENT BASED OR IMPLEMENT SYNTAX FOR TYPE AND TRAITS WITHOUT END TOKEN
//TODO PATTERN_MATCH_ERRORS as ERRORS NOT TUPLES
//TODO carrying
//TODO nested block comments
//TODO single value assignment support in compiler

//TODO ast transform
//with ast transform you can add support for same syntax rules for tuples in patterns as for expressions
//and add grouping with parens for any pattern which be very logical
// and remove ridiculous code in signature parse

//TODO compile function clauses into match instead of func

//TODO MAYBE add (arg1 arg2 arg3) for fun signature
//TODO think about default values
//TODO check interesting case in test matches
//TODO remove constructs from types
//TODO make it possible to declare type in map syntax with default values
// big task. you probably needed default values for this

//TODO check precedences
//TODO replace cond with if
//TODO think about = and -> = can mean one expression and -> can mean many

//trait Any for self
////    def id self -> obin:unique_id self
////    def type_id self -> obin:type_id self
//---

//trait Range for a

//    // first..last
//    def range a last

//    // first.._
//    def range_from a

//    // first.._..step
//    def range_from_by a step

//    // _..last
//    def range_to a

//    // _..last..step
//    def range_to_by a step

//    // first..last..step
//    def range_from_to_by a last step
//---

//fun is_identical self other -> (id self) == (id other)



