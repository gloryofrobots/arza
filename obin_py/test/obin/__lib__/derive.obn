import obin:lang:_api
import obin:lang:_datatype
import seq

type TypeDerived
extend TypeDerived
    with Eq
        def == self other -> _api:equal other self
    with Str
        def str self -> _api:to_string self
    with Repr
        def repr self -> _api:to_repr self
    with Collection
        def put key value self -> _api:put key value self
        def at key self -> _api:at key self
        def del key self -> _api:del key self
        def elem key self -> _api:elem key self
    with Sized
        def len self -> _api:length self
        def is_empty self -> _api:is_empty self
    with Indexed
        def index_of self -> _datatype:record_index_of self
    with Dict
        def keys self -> _datatype:record_keys self
        def values self -> _datatype:record_values self

type UnionDerived
extend UnionDerived
    with Range
        def range _from  _to  ->
            union = _datatype:get_union _from
            if not (kindof _to union) then
                throw ValueError("Invalid type for second argument", _to)
            else
                s1 = seq:drop_while (`!=` _from) (to_seq union)
                seq:take_while (`!=` _to) s1
        def range_from _from ->
            union = _datatype:get_union _from
            s1 = seq:drop_while (`!=` _from) (to_seq union)
        def range_from_by _from _by ->
            throw NotImplementedError ("Only range from Rangeable is supported")
        def range_by _from _to _by ->
            throw NotImplementedError ("Only range from Rangeable is supported")

