prefix(-, negate)
prefix(!, not)
infixr(:=, :=, 10)
infixl(<|, <|, 15)
infixl(|>, |>, 20)
infixl(<<, <<, 25)
infixl(>>, >>, 25)
infixl(<, <, 35)
infixl(>, >, 35)
infixl(>=, >=, 35)
infixl(<=, <=, 35)
infixl(==, ==, 35)
infixl(!=, !=, 35)
infixl(++, ++, 40)
infixl(+, +, 40)
infixl(-, -, 40)
infixl(*, *, 50)
infixl(/, /, 50)


fun f2(z,m) -> 56
fun f1(y,w) -> f2()
fun f3(y,w) -> ()
fun f4(y,w) -> {}
fun f5(y,w) -> []

generic == (x, y)

generic
    != (x, y)
    + (x, y)
    first(self)
    rest(self)
    len(self)
    is_empty(self)

interface Eq (==, !=)

interface
    Seq (first, rest)
    Sized (len, is_empty)
    Dino (behavior:beast, universe:animal:giant, ==, !=, len)

trait TNotEq
    def != (x, y) -> not (x == y)

trait TSized of (Eq, Ord)
    def is_empty(self) -> len(self) == 0

trait TDino of Animal
    def behavior:beast(self) -> True

    def universe:animal:giant(self) -> io:print("I am big dino")

    def ==(self, other)
        | (self, other of Dino) -> self.name == other.name and
                                    self.length == other.length
        | (self, _) -> False

    def len(self) -> self.length

def len(self of MyList) -> len(self.__list)

def ==(self of MyList, other)
    | (self, other of MyList) -> self.__list == other.__list
    | (self, _) -> False

//error here type, not defined
def is_empty(self) -> is_empty(self.__list)

type MyList (__list)

extend MyList 
    def len(self) -> len(self.__list)
    def + (self, other)
        | (self, _) ->  MyList(x,y)
        | (self, other of MyList) -> MyList(self.__list + other.__list)

    trait DummyTrait (method1, ==, !=, ++, --)
    trait TNotEq
    trait TSized (is_empty)

    // define generics without trait
    def first(self) -> first(self.__list)
    def rest(self) -> rest(self.__list)


type Shape
    | X x
    | Y y
    | Point (x, y)
    | Square (width, height)
    | Rect (left, top, right, bottom)
    | Line (point1, point2)
    | Empty