from obin:lang:_types import (Bool, Char, Int,
                              Float, Symbol, String, List, Vector,
                              Tuple, Map, Function, Method, Fiber, Trait,
                              Datatype, Union, LazyVal, Env)

"""
Precedence    Operator
    100           : . .{ .( .[
    95           JUXTAPOSITION
    60           :: :::
    50           *  /
    40           +  - ++
    35           ==  !=  <  <=  >  >=
    30           and
    25           or << >>
    20           |>
    15           " ." @ as of <|
    10           = :=
"""

prefix(-, negate)
prefix(!, not)
infixr(:=, :=, 10)
infixl(<|, <|, 15)
infixl(|>, |>, 20)
infixl(<<, <<, 25)
infixl(>>, >>, 25)
infixl(<, <, 35)
infixl(>, >, 35)
infixl(>=, >=, 35)
infixl(<=, <=, 35)
infixl(==, ==, 35)
infixl(!=, !=, 35)
infixl(++, ++, 40)
infixl(+, +, 40)
infixl(-, -, 40)
infixl(*, *, 50)
infixl(/, /, 50)

type Ordering
    | LT | GT | EQ

type Option
    | Some val
    | None

type ImportError args

trait Eq for x
    def == (x, y)
    def != (x, y) -> not (x == y)

trait Str for self
    def str(self)

trait Sized for self
    def len(self)
    def is_empty(self) -> len(self) == 0

//FUNS
fun lookup(key, default, coll) ->
    try
        at(key, not(coll))
    catch
        | e of KeyError -> default
        | e -> throw e

fun not_elem(x, c) -> not elem(x, c)

fun nth (count of Int, coll)
    | (0, l) -> l
    | (1, [h, ...t]) -> h
    | (n, [h, ...t]) when n >= 0 -> nth (n - 1) t


fun last(coll)
    | ([x, ...xs]) ->
        fun _last(hd, tl)
            | (_, [x, ...xs]) -> _last x xs
            | (x, []) -> x
        end.(x, xs)
end

fun t1() ->
    tup1 = (1, "Hello", 35.44555)
    affirm:is_equal(tup1, (1, "Hello", 35.44555))
    m1 = {name="XXX"}
    affirm:is_equal({name="XXX"}.name, "XXX")

    t2 = ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Bob"})


fun t2 () ->
    fun id(x) -> x

    fun sum_list_3(list)
        | ([x,y,z]) -> x + y + z


    fun f1 a
        | (0) -> 1
        | (1) -> 2
        | (2) -> 3


    l = lam (x, y, z) -> 42
    l2 =
        lam (x, y, z) | ([hd::tl], (1,2,3), {x=2, y=3}) -> 24
                      | (_, y, z) -> 23