generic == x y
generic first self
generic ! self
generic put index value coll

generic
   == x y
   first self
   ! self
   put index value coll

// from obin:lang:_types import (Bool, Char, Int,
//                               Float, Symbol, String, List, Vector,
//                               Tuple, Map, Function, Method, Fiber, Trait,
//                               Datatype, Union, LazyVal, Env)
// """
// Precedence    Operator
//     100           : . .{ .( .[
//     95           (
//     60           :: :::
//     50           *  /
//     40           +  - ++
//     35           ==  !=  <  <=  >  >=
//     30           and
//     25           or << >>
//     20           |>
//     15           " ." @ as of <|
//     10           = :=
// """

// prefix - negate
// prefix ! !
// prefix & &
// infixr := := 10
// infixl <| <| 15
// infixl |> |> 20
// infixl << << 25
// infixl >> >> 25
// infixl < < 35
// infixl > > 35
// infixl >= >= 35
// infixl <= <= 35
// infixl == == 35
// infixl != != 35
// infixl ++ ++ 40
// infixl + + 40
// infixl - - 40
// infixl * * 50
// infixl / / 50

// generic
//     == x y
//     != x y
//     <= x y
//     < x y
//     >= x y
//     > x y

//     cmp first second

//     max first second
//     min first second

//     - x y
//     + x y
//     * x y
//     / x y
//     mod x y
//     // unary -
//     negate x

//     str self
//     repr self

//     len self
//     is_empty self

//     put key value self
//     at key self
//     del obj self
//     elem key self

//     first self
//     rest self

//     empty self
//     cons value self
//     prepend value self
//     ++ self other
//     append value self
//     keys self
//     values self
//     index_of obj self
//     to_seq self

//     slice first last self
//     drop count self
//     take count self
//     lower_bound self
//     upper_bound self

//     range self last
//     range_by self last step
//     range_from self
//     range_from_by self step
//     ! self
//     := self value


// interface Eq (==, !=)

// interface
//     PartialEq (==)
//     Eq (!=, ==)
//     Ord(<, <=, >, >=, cmp, max, min)
//     Num (-, +, *, /, mod, negate)
//     Str (str)
//     Displayed (str, repr)
//     Sized (len, is_empty)
//     Collection(put, at, del, elem)
//     ReadOnlyCollection(at, elem)
//     Seq(first, rest)
//     Emtiable(empty)
//     Consable(cons)
//     Prependable(prepend)
//     Appendable(append)
//     Concatable(++)
//     Dict(keys, values, put, at, del, elem)
//     Indexed(index_of)
//     Seqable(to_seq)
//     Sliceable(slice, drop, take)
//     Bounded(lower_bound, upper_bound)
//     Ranged(range, range_by, range_from, range_from_by)
//     Ref(!)
//     MutRef(!, :=)

// trait TNotEq
//     def != (x, y) -> not (x == y)

// trait TSized of (Eq, Ord)
//     def is_empty(self) -> len(self) == 0

// trait TDino of Animal
//     def behavior:beast(self) -> True

//     def universe:animal:giant(self) -> io:print("I am big dino")

//     def ==(self, other)
//         | (self, other of Dino) -> self.name == other.name and
//                                     self.length == other.length
//         | (self, _) -> False

//     def len(self) -> self.length

// def len(self of MyList) -> len(self.__list)

// def ==(self of MyList, other)
//     | (self, other of MyList) -> self.__list == other.__list
//     | (self, _) -> False

// //error here type, not defined
// def is_empty(self) -> is_empty(self.__list)

// type MyList (__list)

// extend MyList with
//     def len(self) -> len(self.__list)
//     def + (self, other)
//         | (self, _) ->  MyList(x,y)
//         | (self, other of MyList) -> MyList(self.__list + other.__list)

//     trait DummyTrait (method1, ==, !=, ++, --)
//     trait TNotEq
//     trait TSized (is_empty)

//     // define generics without trait
//     def first(self) -> first(self.__list)
//     def rest(self) -> rest(self.__list)


// type ImportError args

// type Ordering
//     | LT | GT | EQ

// type Option
//     | Some val
//     | None

// type Shape
//     | X x
//     | Y y
//     | Point (x, y)
//     | Square (width, height)
//     | Rect (left, top, right, bottom)
//     | Line (point1, point2)
//     | Empty