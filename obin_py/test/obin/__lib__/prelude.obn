import from obin:core:types (Bool, Char, Int, Float, Symbol, String, List, Vector, Tuple, Map,
                             Function, Generic, Method, NativeFunction, Fiber, Trait, Datatype, TVar, Env)

prefix - negate
infixl < < 50
infixl > > 50
infixl >= >= 50
infixl <= <= 50
infixl == == 50
infixl != != 50
infixl + + 60
infixl - - 60
infixl * * 65
infixl / / 65
infixl ++ ++ 70



//lam x y
//    | 0 _ -> []
//    | _ [] -> []
//    | n [x, ...xs] -> x :: (take (n-1)  xs)
//end
//
//lam () -> 42 end
//lam list | x::xs end

//
////fun t  x . y ->
//////    match [1,2,3,4]
//////    | 1::2::xs -> xs
//////    ---
//////    f 331 332 334 .
//////      (g 441 442 .
//////         443 444) . 551 . 552 553 .
//////       554
////end
//
type LT
type GT
type EQ
//
trait Collection for self
    method len self
    method is_empty self
    method put key value self
    method at key self
    method del obj self
    method elem key self
---------------------------------

trait Eq for x
    method == x y -> throw (#NotImplemented, x, y)
    method != x y -> not (x == y)
---------------------------------

trait Ord  for x of Eq
    method <= x y -> throw (#NotImplemented, x, y)
    method < x y -> (cmp x y) == LT
    method >= x y -> (cmp x y) != LT
    method > x y -> (cmp x y) == GT

    method cmp x y ->
                cond
                | x == y -> EQ
                | x <= y  -> LT
                | else -> GT
                ---

    method max x y -> y if x <= y else x
    method min x y -> x if x <= y else y
---------------------------------

trait Num for x
    method - x y
    method + x y
    method * x y
    method / x y
    method mod x y
    // unary -
    method negate x
---------------

trait Str for self
    method str self
---

//YOU need kinds here
//trait FromStr for self of ToStr
//    method from_str self
//---

trait Inspectable for self of Str
    method inspect self -> str self
---

trait Mappable for self
    method map f self
---

trait Appendable for self
    //concat operator
    method ++ self other
    method append self value
---------------------------------


trait Dict for self of Collection
    method keys self
    method values self
------

trait Seq for self
    method first self
    method rest self
    // prepend/cons operator
    method cons  value self
    method empty self
---

trait Indexed for self
    method index_of obj self
---

trait Seqable for self
    method seq self
---

trait Sliceable for self
    method slice first . last . self
    method drop count self
    method take count self
---

//ERRORS
//TODO MAKE THIS DECLARATION ONE MACRO
type ImportError args end
type RuntimeError args end
type TypeError args end
type NotImplementedError args end
type ZeroDivisionError args end
type ReferenceError args end
type ConstructorError args end
type KeyError args end
type ValueError args end
type SliceError args end
type IndexError args end
type InvokeError args end
type InvalidArgCount args end
type MethodInvokeError args end
type MethodNotImplementedError args end
type MethodSpecializeError args end
type CompileError args end
type ParseError args end
type UnpackSequenceError args end
type FiberFlowError args end
type MatchError args end
type FunctionArgumentsMatchError args end
type ExceptionMatchError args end
type ExportError args end
type TraitAlreadyImplementedError args end
type TraitImplementationError args end
type TraitConstraintError args end

//FUNS

//in = elem
////notin = in
//fun notin obj storage -> not (obj `elem` storage) end
//
//fun lookup key default coll ->
//    try
//        at key coll
//    | e of KeyError -> default
//    | e -> throw e
//    ---
//---
