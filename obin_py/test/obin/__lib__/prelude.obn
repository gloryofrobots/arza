import from obin:core:types (Bool, Char, Int, Float, Symbol, String, List, Vector, Tuple, Map,
                             Function, Generic, Method, NativeFunction, Fiber, Trait, Datatype, TVar, Env)

prefix - negate
infixl |> |> 10
infixl <| <| 11
infixl << << 12
infixl >> >> 12
infixl < < 50
infixl > > 50
infixl >= >= 50
infixl <= <= 50
infixl == == 50
infixl != != 50
infixl + + 60
infixl - - 60
infixl * * 65
infixl / / 65
infixl ++ ++ 70

type Ordering
    | LT | GT | EQ


trait Collection for self
    def len self
    def is_empty self
    def put key value self
    def at key self
    def del obj self
    def elem key self


trait Eq for x
    def == x y -> throw (#NotImplemented, x, y)
    def != x y -> not (x == y)


trait Ord  for x of Eq
    def <= x y -> throw (#NotImplemented, x, y)
    def < x y -> (cmp x y) == LT
    def >= x y -> (cmp x y) != LT
    def > x y -> (cmp x y) == GT

    def cmp x y ->
                if x == y -> EQ
                elif x <= y -> LT
                else -> GT

    def max x y ->  y in_case x <= y else x
    def min x y -> x in_case x <= y else y

trait Num for x
    def - x y
    def + x y
    def * x y
    def / x y
    def mod x y
    // unary -
    def negate x

trait Str for self
    def str self

//YOU need kinds here
//trait FromStr for self of ToStr
//    def from_str self

trait Inspectable for self of (Str, Eq)
    def inspect self -> str self

trait Mappable for self
    def map f self

trait Appable for self
    //concat operator
    def ++ self other
    def app self value


trait Dict for self of Collection
    def keys self
    def values self

trait Seq for self
    def first self
    def rest self
    // prep/cons operator
    def cons value self
    def empty self

trait Indexed for self
    def index_of obj self

trait Seqable for self
    def seq self

trait Sliceable for self
    def slice first . last . self
    def drop count self
    def take count self

//ERRORS
//TODO MAKE THIS DECLARATION ONE MACRO
type ImportError args
type RuntimeError args
type TypeError args
type NotImplementedError args
type ZeroDivisionError args
type ReferenceError args
type ConstructorError args
type KeyError args
type ValueError args
type SliceError args
type IndexError args
type InvokeError args
type InvalidArgCount args
type MethodInvokeError args
type MethodNotImplementedError args
type MethodSpecializeError args
type CompileError args
type ParseError args
type UnpackSequenceError args
type FiberFlowError args
type MatchError args
type FunctionArgumentsMatchError args
type ExceptionMatchError args
type ExportError args
type TraitAlreadyImplementedError args
type TraitImplementationError args
type TraitConstraintError args

//FUNS
fun lookup key default coll ->
    try
        at key coll
    catch
        | e of KeyError -> default
        | e -> throw e

fun not_elem x c -> not (elem x c)

fun identity x -> x

fun |> x f -> f x
fun <| f x -> f x
fun >> f g x -> g (f x)
fun << f g x ->  f (g x)

fun twice f -> f >> f
fun flip f x y -> f y x
fun even x -> mod x 2 == 0
fun odd x -> not (even x)
