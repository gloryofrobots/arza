import from obin:core:types (Bool, Char, Int, Float, Symbol, String, List, Vector, Tuple, Map,
                             Function, Generic, Method, NativeFunction, Fiber, Trait, Datatype, TVar, Env)

union Ordering
    | LT | GT | EQ
-------------------

trait Eq for x
    method == x y -> not (x != y)
    method != x y -> not (x == y)
---------------------------------

trait Ord  for x
    method <= x y -> cmp x y != GT
    method < x y -> cmp x y == LT
    method >= x y -> cmp x y != LT
    method > x y -> cmp x y == GT

    method cmp x y ->
                cond
                | x == y -> EQ
                | x <= y  -> LT
                | else -> GT
                ---

    method max x y -> y if x <= y else x
    method min x y -> x if x <= y else y
---

//trait Any for self
//
////    method id self -> obin:unique_id self
////    method type_id self -> obin:type_id self
//---


trait Stringable for self
    method str self
---

trait Inspectable for self // of Show
    method inspect self -> str self
---

trait Parsable for self
    method from_string self
---

trait Mappable for self
    method map f self
---

trait Range for arg
    // first..last
    method range arg last
    // first.._
    method range_from arg
    // first.._..step
    method range_from_step arg step
    // _..last
    method range_to arg
    // _..last..step
    method range_to_by arg step
    // first..last..step
    method range_from_to_by arg last step
---

trait Growable for self
    //concat operator
    method ++ self other
    // prepend/cons operator
    method cons value self
    method append self value
---

trait Collection for self
    method len self
    method is_empty self -> (len self) == 0

    method at self key

    method put self key value
    method remove self obj
    method contains self key
---


trait Seq for self //of Growable
    method first self
    method rest self
---

trait Indexed for self
    method index_of self obj
    method last self
---

trait Seqable for self
    method seq self
---

trait Sliceable for first
    method slice first last
---


//fun is_identical self other -> (id self) == (id other)
//fun in obj storage -> contains storage obj end
//fun notin obj storage -> not (obj `in` storage) end
//
//
//fun lookup self key default ->
//    try
//        at self key
//    | (#KeyError, ..._) -> default
//    ---
//---
//
//



//(deftype CloseableSeq [delegate-seq close-fn]
//  clojure.lang.ISeq
//    (next [this]
//      (if-let [n (next delegate-seq)]
//        (CloseableSeq. n close-fn)
//        (.close this)))
//    (first [this] (if-let [f (first delegate-seq)] f (.close this)))
//    (more [this] (if-let [n (next this)] n '()))
//    (cons [this obj] (CloseableSeq. (cons obj delegate-seq) close-fn))
//    (count [this] (count delegate-seq))
//    (empty [this] (CloseableSeq. '() close-fn))
//    (equiv [this obj] (= delegate-seq obj))
//  clojure.lang.Seqable
//    (seq [this] this)
//  java.io.Closeable
//    (close [this] (close-fn)))