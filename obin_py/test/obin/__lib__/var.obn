import fiber
from datatype import TypeDerived
type Var val

fun var v ->
    co = (fiber:coroutine
            fun holder yield v ->
                fun loop v ->
                    msg = yield v
                    match msg with
                        | #Read ->
                            loop v
                        | (#Write, new_val) ->
                            loop new_val

                loop v
            end)

    co v
    Var co

extend Var
    def ! self -> self.val #Read

    def := self value -> self.val (#Write, value)

    def == self other -> self.val == other.val

    def str self -> "Var"

    use TRepr
