import fiber
from datatype import TypeDerived
type Var val

fun var v ->
    co = fiber:coroutine .
            fun holder yield v ->
                fun loop v ->
                    msg = yield v
                    match msg with
                        | #Read ->
                            loop v
                        | (#Write, new_val) ->
                            loop new_val

                loop v

    co v
    Var co

extend Var
    with Ref
        def ! self ->
            self.val #Read
    with MutRef
        def := self value ->
            self.val (#Write, value)

    with Eq
        def == self other ->
            self.val == other.val

    with Str
        def str self -> "Var"
    with Repr

