extend LazyVal
    with Ref
        def ! self -> self ()

extend LazyList
    with Seq
        def first self ->
            match self with
                | x of LazyNil -> throw NotImplementedError ("first not defined for LazyNil",)
                | x of LazyCons -> self.head

        def rest self ->
            match self with
                | x of LazyNil -> throw NotImplementedError ("rest not defined for LazyNil",)
                | x of LazyCons -> !self.tail
    with Str
        def str self -> "[...]"
    with Seqable
        def to_seq self -> self
    with Sized
        def len self -> throw NotImplementedError ("len not defined for LazyNil",)
        def is_empty self ->
            match self with
                    | x of LazyNil -> True
                    | x of LazyCons -> False
    with Emptiable
        def empty self ->
            []


def test () ->
    fun squares n ->
        n * n ::: squares (n + 1)

    sqrs = squares 1

    _s =  (seq:take 4 sqrs)
    _s2 = (seq:take 10 sqrs)
    _s3 = (seq:take 20 sqrs)
    affirm:is_equal (seq:take 4 sqrs) [1, 4, 9, 16]
    affirm:is_equal (seq:take 10 sqrs) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    affirm:is_equal (seq:take 20 sqrs) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]
