from datatype import TypeDerived
import io

type LazyList head tail
extend LazyList
    with Collection = TypeDerived
    with Seq
        def first self -> self.head
        def rest self -> !self.tail
    with Str
        def str self -> "[" ++ str self.head ++ ", ...]"
    with Seqable
        def to_seq self -> self
    with Sized
        def len self -> throw NotImplementedError ("len not defined for LazyList",)
        def is_empty self -> False
    with Emptiable
        def empty self -> []
    with Constructable
        def cons value self -> throw NotImplementedError ("Consing with LazyList directly is forbidden," ++
                                                            " use ::: macro or cons head (lazy tail) instead",)

--------------------------------------------------------------------------

extend LazyVal
    with Ref
        def ! self -> self ()

    with Constructable
        def cons value self ->
            LazyList value self
    with Str
        def str self -> "<delayed>"

--------------------------------------------------------------------

type Empty
type ListGenerator val fn

extend ListGenerator
    with Seqable
        def to_seq self -> self
    with Seq
        def first self ->
            self.val
        def rest self ->
            try
                ListGenerator (self.fn ()) self.fn
            catch e of Interrupt ->
                ListGenerator (Empty) self.fn
    with Sized
        def len self -> NotImplementedError len
        def is_empty self -> self.val == Empty

    with Emptiable
        def empty self -> []

fun list_generator fn ->
    val = fn ()
    ListGenerator val fn


