class Traits:
    def __init__(self, symbols):
        from obin.types.space import newtrait
        _s = symbols.symbol

        # ---------------AUTOGENERATED---------------------
        self.Any = newtrait(_s(u"Any"), _s(u"self"))
        self.Eq = newtrait(_s(u"Eq"), _s(u"self"))
        self.Ord = newtrait(_s(u"Ord"), _s(u"self"))
        self.Num = newtrait(_s(u"Num"), _s(u"num"))
        self.Collection = newtrait(_s(u"Collection"), _s(u"self"))
        self.Seq = newtrait(_s(u"Seq"), _s(u"self"))
        self.Callable = newtrait(_s(u"Callable"), _s(u"self"))
        self.Indexed = newtrait(_s(u"Indexed"), _s(u"self"))


class Methods:
    def __init__(self, traits, symbols):
        from obin.types.space import newmethod, newmethod_hotpath, newlist as _l
        from obin.builtins import hotpath as hp
        _s = symbols.symbol
        # # ---------------AUTOGENERATED---------------------
        # # Eq
        # self.eq = newmethod_hotpath(_s(u"=="), traits.Eq, _l([_s(u"self"), _s(u"other"), ]), hp.hp_eq)
        # self.ne = newmethod_hotpath(_s(u"!="), traits.Eq, _l([_s(u"self"), _s(u"other"), ]), hp.hp_ne)
        # # Ord
        # self.gt = newmethod_hotpath(_s(u">"), traits.Ord, _l([_s(u"self"), _s(u"other"), ]), hp.hp_gt)
        # self.ge = newmethod_hotpath(_s(u">="), traits.Ord, _l([_s(u"self"), _s(u"other"), ]), hp.hp_ge)
        # self.le = newmethod_hotpath(_s(u"<="), traits.Ord, _l([_s(u"self"), _s(u"other"), ]), hp.hp_le)
        # self.lt = newmethod_hotpath(_s(u"<"), traits.Ord, _l([_s(u"self"), _s(u"other"), ]), hp.hp_lt)
        # self.compare = newmethod(_s(u"compare"), traits.Ord, _l([_s(u"self"), _s(u"other"), ]))
        # # Num
        # self.negate = newmethod_hotpath(_s(u"negate"), traits.Num, _l([_s(u"num"), ]), hp.hp_uminus)
        # self.add = newmethod_hotpath(_s(u"+"), traits.Num, _l([_s(u"num"), _s(u"other"), ]), hp.hp_add)
        # self.sub = newmethod_hotpath(_s(u"-"), traits.Num, _l([_s(u"num"), _s(u"other"), ]), hp.hp_sub)
        # self.mul = newmethod_hotpath(_s(u"*"), traits.Num, _l([_s(u"num"), _s(u"other"), ]), hp.hp_mul)
        # self.div = newmethod_hotpath(_s(u"/"), traits.Num, _l([_s(u"num"), _s(u"other"), ]), hp.hp_div)
        # self.mod = newmethod_hotpath(_s(u"mod"), traits.Num, _l([_s(u"num"), _s(u"other"), ]), hp.hp_mod)
        # # Collection
        # self.in_ = newmethod_hotpath(_s(u"in"), traits.Collection, _l([_s(u"other"), _s(u"self"), ]), hp.hp_in_)
        # self.notin = newmethod_hotpath(_s(u"notin"), traits.Collection, _l([_s(u"other"), _s(u"self"), ]), hp.hp_notin)
        # # Seq
        # self.cons = newmethod_hotpath(_s(u"::"), traits.Seq, _l([_s(u"other"), _s(u"self"), ]), hp.hp_cons)
        # self.concat = newmethod_hotpath(_s(u"++"), traits.Seq, _l([_s(u"self"), _s(u"other"), ]), hp.hp_concat)


class Types:
    def __init__(self, symbols):
        from obin.types.space import newnativedatatype as newtype, newnativetypeconstructor as newctor
        _s = symbols.symbol
        # ---------------AUTOGENERATED---------------------
        self.Bool = newtype(_s(u"Bool"))
        self.Char = newtype(_s(u"Char"))
        self.Int = newtype(_s(u"Int"))
        self.Float = newtype(_s(u"Float"))
        self.Symbol = newtype(_s(u"Symbol"))
        self.String = newtype(_s(u"String"))
        self.List = newtype(_s(u"List"))
        self.Vector = newtype(_s(u"Vector"))
        self.Tuple = newtype(_s(u"Tuple"))
        self.Map = newtype(_s(u"Map"))
        self.Function = newtype(_s(u"Function"))
        self.Generic = newtype(_s(u"Generic"))
        self.Method = newtype(_s(u"Method"))
        self.NativeFunction = newtype(_s(u"NativeFunction"))
        self.Fiber = newtype(_s(u"Fiber"))
        self.Trait = newtype(_s(u"Trait"))
        self.Datatype = newtype(_s(u"Datatype"))
        self.TVar = newtype(_s(u"TVar"))
        self.Env = newtype(_s(u"Env"))


class Std:
    def __init__(self, symbols):
        self.traits = Traits(symbols)
        self.types = Types(symbols)
        self.methods = Methods(self.traits, symbols)
