from tpl import render

def method(name, funcname, signature, hotpath):
    return dict(name=name, funcname=funcname, signature=signature, hotpath=hotpath)


METHODS = [
        method("eq", "==", ["self", "other"], "hp_eq"),
        # method("ne", "!=", ["self", "other"], "hp_ne"),
        
        # method("gt", ">", ["self", "other"], "hp_gt"),
        # method("ge", ">=", ["self", "other"], "hp_ge"),
        method("le", "<=", ["self", "other"], "hp_le"),
        # method("lt", "<", ["self", "other"], "hp_lt"),
        method("negate",  "negate", ["num"], "hp_uminus"),
        method("add", "+", ["num", "other"], "hp_add"),
        method("sub", "-", ["num", "other"], "hp_sub"),
        method("mul", "*", ["num", "other"], "hp_mul"),
        method("div", "/", ["num", "other"], "hp_div"),
        method("mod", "mod", ["num", "other"], "hp_mod"),
        method("contains", "contains", ["self", "other"], "hp_contains"),
        method("cons", "cons", ["other", "self"], "hp_cons"),
        method("concat", "++", ["self", "other"], "hp_concat"),
]


def put_method_hotpath():
    print "    # ---------------AUTOGENERATED---------------------"
    TPL = \
    """    method = api.at(prelude, _s(u"{{funcname}}"))
    {% if  hotpath  is not none %}    method.set_hotpath(hp.{{hotpath}}) {% endif %}"""
    for M in METHODS:
        print render(TPL, M)

        
put_method_hotpath()
# def method_declaration():
#     print "        # ---------------AUTOGENERATED---------------------"
#     TPL = """        self.{{name}} = {%- if True -%}
#     {% if  hotpath  is not none -%} 
#         newmethod_hotpath(_s(u"{{funcname}}"), traits.{{trait.name}},_l([{% for sig in signature %}_s(u"{{sig}}"),{% endfor %}]), hp.{{hotpath}})
#     {%- else -%} 
#         newmethod(_s(u"{{funcname}}"), traits.{{trait.name}}, _l([{% for sig in signature %}_s(u"{{sig}}"),{% endfor %}])){% endif %}
#     {%- endif %}
#     """
#     for T in TRAITS:
#         if len(T["methods"]):
#             print "        # %s" % T["name"]
#         for M in T["methods"]:
#             print render(TPL, M)

# def put_methods():
#     print "    # ---------------AUTOGENERATED---------------------"
#     TPL = "    api.put(module, methods.{{name}}.name, methods.{{name}})"
#     for T in TRAITS:
#         if len(T["methods"]):
#             print "    # %s" % T["name"]
#         for M in T["methods"]:
#             print render(TPL, M)
