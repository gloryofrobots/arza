from tpl import render

def method(name, funcname, signature, hotpath):
    return dict(name=name, funcname=funcname, signature=signature, hotpath=hotpath)


METHODS = [
        method("eq", "==", ["self", "other"], "hp_eq"),
        method("ne", "!=", ["self", "other"], "hp_ne"),
        
        # method("gt", ">", ["self", "other"], "hp_gt"),
        # method("ge", ">=", ["self", "other"], "hp_ge"),
        method("le", "<=", ["self", "other"], "hp_le"),
        # method("lt", "<", ["self", "other"], "hp_lt"),
        method("negate",  "negate", ["num"], "hp_uminus"),
        method("add", "+", ["num", "other"], "hp_add"),
        method("sub", "-", ["num", "other"], "hp_sub"),
        method("mul", "*", ["num", "other"], "hp_mul"),
        method("div", "/", ["num", "other"], "hp_div"),
        method("mod", "mod", ["num", "other"], "hp_mod"),
        method("contains", "contains", ["self", "other"], "hp_contains"),
        method("concat", "++", ["self", "other"], "hp_concat"),
        method("cons", "cons", ["other", "self"], "hp_cons"),
        method("first", "first", ["self"], "hp_first"),
        method("rest", "rest", ["self"], "hp_rest"),
        method("slice", "slice", ["self","from", "to"], "hp_slice"),
        method("take", "take", ["self","count"], "hp_take"),
        method("drop", "drop", ["self","count"], "hp_drop"),
        method("is_empty", "is_empty", ["self"], "hp_is_empty"),
]


def put_method_hotpath():
    print "    # ---------------AUTOGENERATED---------------------"
    TPL = \
    """    method = api.at(prelude, _s(u"{{funcname}}"))
    {% if  hotpath  is not none %}    method.set_hotpath(hp.{{hotpath}}) {% endif %}"""
    for M in METHODS:
        print render(TPL, M)

        
put_method_hotpath()
