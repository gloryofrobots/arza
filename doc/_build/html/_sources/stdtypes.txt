Building blocks
===============

* Integers

.. code-block:: none

   1 -42 100012020202


* Floats

.. code-block:: none

   2.02020330 -0.0000000001


Strings
-------

.. code-block:: none

   "I am string"

   """
   I a
                m
          multiline string
   """


Symbols
-------

.. code-block:: none

    #atomic_string_created_onLyOnce


Tuples
------

.. code-block:: none
               
    // Tuples are always created inside parens, so you can't write just 1,2,3
    () (1,) (1,2,3)


Lists
-----

.. code-block:: none
               
   [] [1] [1,2,3] 1::2::3::[]


Maps
-----

.. code-block:: none
               
    {} {x=1} {x=1, y=(2,3), z=f(), n=(fun()=1)}



Records
-------

.. code-block:: none
               
    // Records are instances of record types
    // To create instance use type like a function
    let v2 = Vec2(1, 2)
    let v3 = Vec3(1, 2, 4)

Functions
---------

.. code-block:: none
               
    fun add3 (x, y, z) = x + y + z
    fun (a, b) = a not b
    // lambdas
    (x, y, z) -> x + y + z
    // equivalent to single element tuple (x,) -> x
    x -> x
    // tuple from tuple
    ((x,y,z),) -> x + y + z


Intefaces and generic functions
-------------------------------

.. code-block:: none
               
   // following code block will create interface Num
   // and generic functions -, +, *, /, mod, negate
   interface Num(I) =
       -(I, I)
       +(I, I)
       *(I, I)
       /(I, I)
       mod(I, I)
       // unary -
       negate(I)
