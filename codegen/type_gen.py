from tpl import render

def mktype(name, traits, ctors=None):
    t = dict(name=name, traits=traits)
    if ctors is not None:
        for ctor in ctors:
            ctor["union"] = t

    t["ctors"] = ctors if ctors is not None else []
    return t

def mkctor(name):
    return dict(name=name)

A = "Any"
N = "Number"
C = "Callable"

TYPES = [
    mktype("Bool", [A]),
    mktype("Char", [A]),

    mktype("Int", [N, A]),
    mktype("Float", [N, A]),

    mktype("Symbol", [A]),
    mktype("String", [A]),
    mktype("List", [A]),
    mktype("Vector", [A]),
    mktype("Tuple", [A]),
    mktype("Map", [A]),

    mktype("Function", [C, A]),
    mktype("Partial", [C, A]),
    mktype("Generic", [C, A]),
    mktype("Fiber", [C, A]),
    mktype("Coroutine", [C, A]),

    mktype("Trait", [A]),
    mktype("Interface", [A]),
    mktype("Datatype", [A]),
    mktype("LazyVal", [A]),
    mktype("Env", [A]),
]

def gen_declaration():
    import sys
    p = sys.stdout.write
    print "    # ---------------AUTOGENERATED---------------------"

    DT_TPL = \
    """    self.{{name}} = newtype(_s(u"{{name}}"))"""
    CT_TPL = \
    """    self.{{name}} = newctor(_s(u"{{name}}"), self.{{union.name}})"""
    for t in TYPES:
        print render(DT_TPL, t)
        for c in t["ctors"]:
            print render(CT_TPL, c)


def gen_puts():
    print "    # ---------------AUTOGENERATED---------------------"
    def t_put(t):
        return "    api.put(module, types.%s.name, types.%s)" % (t["name"], t["name"])

    for t in TYPES:
        print t_put(t)
        for c in t["ctors"]:
            print t_put(c)

def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in xrange(0, len(l), n):
        yield l[i:i+n]

def gen_export():
    names = [type["name"] for type in TYPES]
    type_chunks = list(chunks(names, 10))
    lines = [", ".join(line) for line in type_chunks]
    exports = ",\n                             ".join(lines)

    TPL = "from obin:lang:_types import ({{exports}})"
    print render(TPL, dict(exports=exports))

gen_declaration()

gen_puts()
#
gen_export()